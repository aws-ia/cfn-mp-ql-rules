AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploys the EC2 Autoscaling, LaunchConfig and Instance for Artifactory"
Parameters:
  PrivateSubnet1ID:
    Type: 'AWS::EC2::Subnet::Id'
  PrivateSubnet2ID:
    Type: 'AWS::EC2::Subnet::Id'
  MinScalingNodes:
    Type: Number
  MaxScalingNodes:
    Type: Number
  DeploymentTag:
    Type: String
  HostRole:
    Type: String
  AmiId:
    Type: String
  QSS3BucketName:
    Type: String
  QSS3KeyPrefix:
    Type: String
  ArtifactoryLicense1:
    Type: String
  ArtifactoryLicense2:
    Type: String
  ArtifactoryLicense3:
    Type: String
  ArtifactoryLicense4:
    Type: String
  ArtifactoryServerName:
    Type: String
  CertificateDomain:
    Type: String
  ArtifactoryIAMAcessKey:
    Type: String
    NoEcho: 'true'
  SecretAccessKey:
    Type: String
    NoEcho: 'true'
  ArtifactoryS3Bucket:
    Type: String
  Certificate:
    Type: String
  CertificateKey:
    Type: String
    NoEcho: 'true'
  DBType:
    Type: String
  ArtifactoryDBEndpointAddress:
    Type: String
  DatabaseName:
    Type: String
  DatabaseUser:
    Type: String
  DatabasePassword:
    Type: String
    NoEcho: 'true'
  ArtifactoryPrimary:
    Type: String
  MasterKey:
    Type: String
    NoEcho: 'true'
  ExtraJavaOptions:
    Type: String
  ArtifactoryVersion:
    Type: String
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
  ArtifactoryELB:
    Type: String
  HostProfile:
    Type: String
  SecurityGroups:
    Type: String
  InstanceType:
    Type: String
  VolumeSize:
    Type: Number
  KeystorePassword:
    Description: Default Keystore from Java in which we upgrade.
    Type: String
    NoEcho: 'true'
  AnsibleVaultPass:
    Description: Ansiblevault Password to secure the artifactory.yml
    Type: String
    NoEcho: 'true'
# To populate additional mappings use the following with the desired --region
# aws --region us-west-2 ec2 describe-images --owners amazon --filters 'Name=name,Values=amzn-ami-hvm-2018.03.0.20181129-x86_64-gp2' 'Name=state,Values=available' --output json | jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId'
Mappings:
  AWSAMIRegionMap:
    AMI:
      AMZNLINUXHVM: amzn-ami-hvm-2018.03.0.20181129-x86_64-gp2
    ap-northeast-1:
      AMZNLINUXHVM: ami-0ab3e16f9c414dee7
    ap-northeast-2:
      AMZNLINUXHVM: ami-0e1e385b0a934254a
    ap-south-1:
      AMZNLINUXHVM: ami-02913db388613c3e1
    ap-southeast-1:
      AMZNLINUXHVM: ami-05c859630889c79c8
    ap-southeast-2:
      AMZNLINUXHVM: ami-07cc15c3ba6f8e287
    ca-central-1:
      AMZNLINUXHVM: ami-04070f04f450607dc
    eu-central-1:
      AMZNLINUXHVM: ami-010fae13a16763bb4
    eu-west-1:
      AMZNLINUXHVM: ami-028188d9b49b32a80
    sa-east-1:
      AMZNLINUXHVM: ami-0e2c2c29d8017dd99
    us-east-1:
      AMZNLINUXHVM: ami-00eb20669e0990cb4
    us-east-2:
      AMZNLINUXHVM: ami-0c64dd618a49aeee8
    us-west-1:
      AMZNLINUXHVM: ami-0bce08e823ed38bdd
    us-west-2:
      AMZNLINUXHVM: ami-08d489468314a58df
      # Stubbed for future if Debian is wanted.
      #LinuxAMINameMap:
      #  Amazon-Linux-HVM:
      #    Code: AMZNLINUXHVM
Conditions:
  GovCloudCondition: !Equals
    - !Ref 'AWS::Region'
    - us-gov-west-1
Resources:
  ArtifactoryScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref ArtifactoryLaunchConfiguration
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
      MinSize: !Ref MinScalingNodes
      MaxSize: !Ref MaxScalingNodes
      Cooldown: '300'
      DesiredCapacity: !Ref MinScalingNodes
      LoadBalancerNames:
        - !Ref ArtifactoryELB
      HealthCheckType: ELB
      HealthCheckGracePeriod: 600
      Tags:
        - Key: Name
          Value: !Ref DeploymentTag
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
  ArtifactoryLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          roleName:
            - !Ref HostRole #!Ref ArtifactoryHostRole
          buckets:
            - !Ref QSS3BucketName
      'AWS::CloudFormation::Init':
        configSets:
          artifactory_install:
            - "config-artifactory-master"
            - "secure-artifactory"
        config-artifactory-master:
          files:
            /root/.artifactory_ansible/artifactory.yml:
              content: !Sub |
                # Base install for Artifactory
                - import_playbook: site-artifactory.yml
                  vars:
                    artifactory_license1: ${ArtifactoryLicense1}
                    artifactory_license2: ${ArtifactoryLicense2}
                    artifactory_license3: ${ArtifactoryLicense3}
                    artifactory_license4: ${ArtifactoryLicense4}
                    artifactory_server_name: ${ArtifactoryServerName}
                    certificate_domain: ${CertificateDomain}
                    s3_endpoint: s3.${AWS::Region}.amazonaws.com
                    s3_access_key: ${ArtifactoryIAMAcessKey}
                    s3_access_secret_key: ${SecretAccessKey}
                    s3_bucket: ${ArtifactoryS3Bucket}
                    certificate: ${Certificate}
                    certificate_key: ${CertificateKey}
                    ssl_dir: /etc/pki/tls/certs/
                    db_type: ${DBType}
                    db_ipaddr: ${ArtifactoryDBEndpointAddress}
                    db_name: ${DatabaseName}
                    db_user: ${DatabaseUser}
                    db_password: ${DatabasePassword}
                    art_primary: ${ArtifactoryPrimary}
                    artifactory_keystore_pass: ${KeystorePassword}
                    master_key: ${MasterKey}
                    extra_java_opts: ${ExtraJavaOptions}
                    artifactory_version: ${ArtifactoryVersion}
              mode: "0400"
            /root/.vault_pass.txt:
              content: !Sub |
                ${AnsibleVaultPass}
              mode: "0400"
            /root/.secureit.sh:
              content: /usr/local/bin/ansible-vault encrypt /root/.artifactory_ansible/artifactory.yml --vault-id /root/.vault_pass.txt
              mode: "0770"
        secure-artifactory:
          commands:
            'secure ansible playbook':
              command: '/root/.secureit.sh'
              ignoreErrors: 'false'
    Properties:
      AssociatePublicIpAddress: false
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref HostProfile
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - !Ref AmiId
      SecurityGroups:
        - !Ref SecurityGroups
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref VolumeSize
            VolumeType: gp2
            DeleteOnTermination: true

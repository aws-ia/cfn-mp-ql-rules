{"AWSTemplateFormatVersion": "2010-09-09", "Description": "This template creates a single 47lining PI2AWS Connector installation. **WARNING** This template creates Amazon EC2 Windows instance and related resources. You will be billed for the AWS resources used if you create a stack from this template. Also, you are solely responsible for complying with the license terms for the software downloaded and installed by this template. By creating a stack from this template, you are agreeing to such terms.", "Parameters": {"AFDomainName": {"Description": "Domain name of the user that runs AF Server. Required only if Authentication Method is set to \"Explicit user and password\" and if you adopted Asset Framework Server in your OSIsoft system. This Quick Start can independently connect to PI Data Archive and Asset Framework Server.", "Type": "String"}, "AFPassword": {"Description": "Password of the user with privileges to access PI Asset Framework Server. Required only if Authentication Method is set to \"Explicit user and password\" and if you adopted Asset Framework Server in your OSIsoft system. This Quick Start can independently connect to PI Data Archive and Asset Framework Server.", "NoEcho": "true", "Type": "String"}, "AFPort": {"Default": 5457, "Description": "Port on which PI AF Server runs. Required only if you adopted Asset Framework Server in your OSIsoft system. This Quick Start can independently connect to PI Data Archive and Asset Framework Server.", "Type": "Number"}, "AFServerIP": {"AllowedPattern": "^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))?$", "Description": "Host (IP) of the PI Asset Framework Server. Required only if you adopted Asset Framework Server in your OSIsoft system. This Quick Start can independently connect to PI Data Archive and Asset Framework Server.", "Type": "String"}, "AFUser": {"Description": "Name of the user with privileges to access PI Asset Framework Server. Required only if Authentication Method is set to \"Explicit user and password\" and if you adopted Asset Framework Server in your OSIsoft system. This Quick Start can independently connect to PI Data Archive and Asset Framework Server.", "Type": "String"}, "AuthType": {"AllowedValues": ["WIS", "Explicit user and password"], "Default": "WIS", "Description": "The authentication method to use between Connector Agent and OSIsoft system. Two authentication methods are supported: Windows Integrated Security (WIS) and Explicit user and password authentication. If you are using Active Directory with your OSIsoft system and already have VPN established then you can use WIS authentication method for Connector Agent. If you don't use WIS, then you can specify Explicit user and password authentication.", "Type": "String"}, "ConnectorInstanceProfileARN": {"Type": "String"}, "DomainControllerServerIP": {"AllowedPattern": "^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))?$", "Description": "Host (IP) of the AD Domain Controller server. Required only if you've selected WIS authentication method.", "Type": "String"}, "ElasticsearchDomainEndpoint": {"Type": "String"}, "IncomingQueueUrl": {"Type": "String"}, "InstanceType": {"AllowedValues": ["t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.12xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge"], "ConstraintDescription": "must be a valid EC2 instance type.", "Default": "m5.xlarge", "Description": "Amazon EC2 instance type", "Type": "String"}, "KeyName": {"ConstraintDescription": "must be the name of an existing EC2 KeyPair.", "Description": "Name of an existing EC2 KeyPair", "Type": "AWS::EC2::KeyPair::KeyName"}, "KinesisStreamName": {"Type": "String"}, "LicensedSoftwareS3KeyPrefix": {"Type": "String"}, "LogGroupName": {"Type": "String"}, "LogsToElasticsearchRoleARN": {"Type": "String"}, "MetricNamespaceName": {"Type": "String"}, "OutgoingQueueUrl": {"Type": "String"}, "PIPassword": {"Description": "Password for the PI Data Archive user. Required only if Authentication Method is set to \"Explicit user and password\".", "NoEcho": "true", "Type": "String"}, "PIPort": {"Default": 5450, "Description": "Port on which PI Data Archive runs.", "Type": "Number"}, "PIServerIP": {"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", "Description": "Host (IP) of the PI Data Archive Server.", "Type": "String"}, "PIUser": {"Type": "String"}, "PiPointsTableName": {"Type": "String"}, "PublicSubnet1ID": {"Description": "Connector subnet 1", "Type": "AWS::EC2::Subnet::Id"}, "PublicSubnet2ID": {"Description": "Connector subnet 2", "Type": "AWS::EC2::Subnet::Id"}, "QSDeploymentSuffix": {"AllowedPattern": "[a-z0-9]+", "ConstraintDescription": "Deployment suffix can include numbers, lowercase letters and should have the maximum length of 7 characters.", "Default": "qs", "Description": "You can deploy this Quick Start multiple times in the same region if you provide a different suffix that is added to resource names to make them unique per each deployment. Use this parameter to support deployment of production and test environments in the same region in the same AWS account.", "MaxLength": 7, "MinLength": 1, "Type": "String"}, "RegionalLambdaBucketARN": {"Description": "RegionalLambdaBucket bucket ARN", "Type": "String"}, "RegionalLambdaBucketName": {"Description": "Regional S3 bucket where tha lambda code will be stored", "Type": "String"}, "RemoteAccessCIDR": {"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$", "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x", "Description": "The CIDR IP range that is permitted to SSH into the bastion host instance and access Amazon ES. We recommend that you set this value to a trusted IP range. For example, you might want to grant only your corporate network access to the software. You can use http://checkip.amazonaws.com/ to check your IP address. This parameter must be in the form x.x.x.x/x (e.g., 96.127.8.12/32, YOUR_IP/32).", "Type": "String"}, "StateS3Bucket": {"Type": "String"}, "VpcId": {"Description": "VPC id", "Type": "AWS::EC2::VPC::Id"}, "WISFQDN": {"Default": "", "Description": "Fully qualified domain name (FQDN) of the forest domain for OSIsoft system e.g. \"osisoft-example.com\". Required only if Authentication Method is set to \"WIS\".", "Type": "String"}, "WISPassword": {"Default": "", "Description": "The password (in Active Directory in your Windows network) for the user who has privileges to access PI Data Archive and AF Server. Required only if Authentication Method is set to \"WIS\".", "NoEcho": "true", "Type": "String"}, "WISUser": {"Default": "", "Description": "The user name (in Active Directory in your Windows network) for the user who has privileges to access PI Data Archive and AF Server. Required only if Authentication Method is set to \"WIS\".", "Type": "String"}}, "Mappings": {"AWSAMIRegionMap": {"AMI": {"WS2016": "Windows_Server-2016-English-Full-Base-2017.11.29"}, "us-east-1": {"WS2016": "ami-08910872"}, "us-west-2": {"WS2016": "ami-f6d8008e"}, "eu-west-1": {"WS2016": "ami-e055e899"}}}, "Conditions": {"UseWIS": {"Fn::Equals": [{"Ref": "AuthType"}, "WIS"]}}, "Resources": {"ConnectorLogGroup": {"Properties": {"LogGroupName": {"Ref": "LogGroupName"}}, "Type": "AWS::Logs::LogGroup"}, "ConnectorStream": {"Properties": {"LogGroupName": {"Ref": "ConnectorLogGroup"}}, "Type": "AWS::Logs::LogStream"}, "KinesisPushedRecordsMetricFilter": {"Properties": {"FilterPattern": "{ $.entityName = \"KinesisRecordPushedMetric\"}", "LogGroupName": {"Ref": "ConnectorLogGroup"}, "MetricTransformations": [{"MetricName": {"Fn::Join": ["-", [{"Ref": "ConnectorStream"}, "Kinesis"]]}, "MetricNamespace": {"Ref": "MetricNamespaceName"}, "MetricValue": "$.value"}]}, "Type": "AWS::Logs::MetricFilter"}, "LogsToElasticsearchLambda": {"Properties": {"Code": {"S3Bucket": {"Ref": "RegionalLambdaBucketName"}, "S3Key": "lambda_deployment_package.zip"}, "Description": "Send metrics from CloudWatch to Elastisearch", "Environment": {"Variables": {"ES_DOMAIN_ENDPOINT": {"Ref": "ElasticsearchDomainEndpoint"}}}, "Handler": "lambdas/logs_to_es_lambda.handler", "Role": {"Ref": "LogsToElasticsearchRoleARN"}, "Runtime": "nodejs4.3", "Timeout": 30}, "Type": "AWS::Lambda::Function"}, "LogsToElasticsearchLambdaPermission": {"Properties": {"Action": "lambda:InvokeFunction", "FunctionName": {"Fn::GetAtt": ["LogsToElasticsearchLambda", "Arn"]}, "Principal": "logs.amazonaws.com"}, "Type": "AWS::Lambda::Permission"}, "LogsToElastisearchSubcriptionFilter": {"DependsOn": "LogsToElasticsearchLambdaPermission", "Properties": {"DestinationArn": {"Fn::GetAtt": ["LogsToElasticsearchLambda", "Arn"]}, "FilterPattern": "", "LogGroupName": {"Ref": "LogGroupName"}}, "Type": "AWS::Logs::SubscriptionFilter"}, "PI2AWSConnectorAutoScalingGroup": {"CreationPolicy": {"ResourceSignal": {"Count": "1", "Timeout": "PT30M"}}, "Properties": {"Cooldown": "300", "DesiredCapacity": "1", "LaunchConfigurationName": {"Ref": "PI2AWSConnectorLaunchConfiguration"}, "MaxSize": "1", "MinSize": "1", "Tags": [{"Key": "Name", "PropagateAtLaunch": "true", "Value": {"Fn::Sub": "PI2AWSConnector-${QSDeploymentSuffix}"}}], "VPCZoneIdentifier": [{"Ref": "PublicSubnet1ID"}, {"Ref": "PublicSubnet2ID"}]}, "Type": "AWS::AutoScaling::AutoScalingGroup"}, "PI2AWSConnectorLaunchConfiguration": {"Metadata": {"AWS::CloudFormation::Init": {"config": {"commands": {"1a-configure-cloudwatch": {"command": "xcopy \"c:\\AWS.EC2.Windows.CloudWatch.json\" \"c:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\\"", "waitAfterCompletion": "0"}, "2a-domain-controller-entry": {"command": {"Fn::Sub": "echo ${DomainControllerServerIP} ${WISFQDN} >> \"c:\\Windows\\System32\\Drivers\\etc\\hosts\""}, "waitAfterCompletion": "0"}, "3a-install-dotnet-46": {"command": {"Fn::Sub": "C:\\AF-Install-Kit\\NDP46.exe /q /wait /norestart /log c:\\install-log-dotnet.log"}, "waitAfterCompletion": "0"}, "3b-install-dotnet-targeting-46": {"command": {"Fn::Sub": "C:\\AF-Install-Kit\\NDP46-TargetingPack.exe /q /wait /norestart /log c:\\install-log-dotnet-targeting.log"}, "waitAfterCompletion": "0"}, "3c-install-buildtools": {"command": {"Fn::Sub": "\"C:\\AF-Install-Kit\\vs_buildtools.exe\" --quiet --wait --norestart"}, "waitAfterCompletion": "0"}, "3d-install-7zip": {"command": "msiexec.exe /i C:\\7zip.msi /Q /LOG \"C:\\install-log-7zip.log\"", "waitAfterCompletion": "0"}, "4a-unpack-af-client": {"command": "\"C:\\Program Files\\7-Zip\\7z.exe\" e -y c:\\AF-Install-Kit\\PI-AF-Client.exe -oC:\\AF-Install-Kit\\PI-AF", "waitAfterCompletion": "0"}, "4b-move-af-client": {"command": "powershell \"Get-ChildItem -Path C:\\AF-Install-Kit\\PI-AF -Recurse -File | Move-Item -Destination C:\\AF-Install-Kit\"", "waitAfterCompletion": "0"}, "4c-install-af-client": {"command": "cd \"c:\\AF-Install-Kit\" && Setup.exe -f af-silent.ini", "waitAfterCompletion": "10"}, "5a-unpack-connector": {"command": "\"C:\\Program Files\\7-Zip\\7z.exe\" x -y c:\\AF-Install-Kit\\connector-agent.zip -oC:\\connector-source", "waitAfterCompletion": "0"}, "5b-build-connector": {"command": {"Fn::Sub": "powershell -f C:\\connector-source\\assets\\build-osisoft-connector.ps1 -ConnectorSourcePath C:\\connector-source -InstallDir C:\\connector"}, "waitAfterCompletion": "0"}, "5c-copy-connector-dll": {"command": "xcopy /Y C:\\connector-build-tmp\\connector-build\\*.dll C:\\connector\\", "waitAfterCompletion": "0"}, "5d-copy-connector-pdb": {"command": "xcopy /Y C:\\connector-build-tmp\\connector-build\\*.pdb C:\\connector\\", "waitAfterCompletion": "0"}, "5e-move-grantrights-ps1-files": {"command": "xcopy C:\\connector-source\\assets\\grantRights.ps1 C:\\connector", "waitAfterCompletion": "0"}, "6a-pi-hosts-entry": {"command": {"Fn::Sub": "echo ${PIServerIP} PIHostName >> \"c:\\Windows\\System32\\Drivers\\etc\\hosts\""}, "waitAfterCompletion": "0"}, "6b-af-hosts-entry": {"command": {"Fn::Sub": "echo ${AFServerIP} AFHostName >> \"c:\\Windows\\System32\\Drivers\\etc\\hosts\""}, "waitAfterCompletion": "0"}, "8-open-ports": {"command": {"Fn::Join": [" && ", [{"Fn::Sub": "netsh advfirewall firewall add rule name=\"Open Port PI Server ${PIPort} IN \" dir=in action=allow protocol=TCP localport=${PIPort}"}, {"Fn::Sub": "netsh advfirewall firewall add rule name=\"Open Port PI Server ${PIPort} OUT \" dir=out action=allow protocol=TCP localport=${PIPort}"}, {"Fn::Sub": "netsh advfirewall firewall add rule name=\"Open Port AF Server ${AFPort} OUT \" dir=out action=allow protocol=TCP localport=${AFPort}"}, {"Fn::Sub": "netsh advfirewall firewall add rule name=\"Open Port AF Server ${AFPort} IN \" dir=in action=allow protocol=TCP localport=${AFPort}"}]]}, "waitAfterCompletion": "0"}, "9a-move-nssm": {"command": "xcopy /Y C:\\connector-source\\assets\\nssm.exe c:\\connector\\", "waitAfterCompletion": "0"}, "9b-config-nssm": {"command": {"Fn::Join": [" && ", ["\"C:\\connector\\nssm.exe\" install pi2aws-connector \"C:\\connector\\PI2AWSConnector.exe\"", "\"C:\\connector\\nssm.exe\" set pi2aws-connector Start SERVICE_AUTO_START"]]}, "waitAfterCompletion": "0"}, "9c-set-up-wis": {"command": {"Fn::If": ["UseWIS", "schtasks /create /tn \"vpnconn\" /sc onstart /delay 0000:30 /rl highest /ru system /tr \"powershell -file 'C:\\wis.ps1' >> 'C:\\wis.log 2>&1'\"", "\n"]}, "waitAfterCompletion": "15"}, "9d-run-connector": {"command": {"Fn::If": ["UseWIS", "\n", "\"C:\\connector\\nssm.exe\" start pi2aws-connector"]}, "waitAfterCompletion": "0"}}, "files": {"c:\\7zip.msi": {"source": "http://www.7-zip.org/a/7z1801-x64.msi"}, "c:\\AF-Install-Kit\\af-silent.ini": {"content": {"Fn::Join": ["\n", ["[SETUPKIT]", "NAME = SetupAFClient2_x", "DISPLAYNAME = PI AF Client ", "SHOWSKIPPEDMODULES = FALSE", "FEATUREUPGRADE = FALSE", "SUPPRESSCOMPLETIONMESSAGE = TRUE", "SUPPRESSPROGRESSMESSAGE = TRUE", "SUPPRESSHEADERMESSAGE = TRUE", "SUPPRESSDIALOGS = TRUE", "[NUMSETUPMODULES]", "NUM = 12", "[SETUPMODULES]", "1 = dotnet462Setup", "2 = PreInstallTasks", "3 = MSVC9SP1x86Redistrib", "4 = MSVC9SP1x64Redistrib", "5 = MSRuntimesVS2017_x86", "6 = MSRuntimesVS2017_x64", "7 = PINS", "8 = PIBufss.msi", "9 = PIBufss_x64.msi", "10 = AFClient_x86.msi", "11 = AFClient_x64.msi", "12 = VSTOWrapper", "[COMMANDLINE]", "1 = /q", "2 = ", "3 = /q /norestart", "4 = /q /norestart", "5 = /q /norestart", "6 = /q /norestart", "7 = ALLUSERS=1 REBOOT=Suppress /qn", "8 = ALLUSERS=1 REBOOT=Suppress /qn", "9 = ALLUSERS=1 REBOOT=Suppress /qn", {"Fn::Sub": "10 = /qn REBOOT=Suppress ALLUSERS=1 ADDLOCAL=FD_AFSDK,FD_AFExplorer AF_SERVER=AFHostName PI_SERVER=PIHostName PI_USER=${AFUser} PI_PORT=${PIPort}"}, {"Fn::Sub": "11 = /qn REBOOT=Suppress ALLUSERS=1 ADDLOCAL=FD_AFSDK,FD_AFExplorer AF_SERVER=AFHostName PI_SERVER=PIHostName PI_USER=${AFUser} PI_PORT=${PIPort}"}, "[UPGRADECOMMANDLINE]", "[DISPLAYNAME]", "3 = Microsoft Visual C++ 2008 Redistributable x86", "4 = Microsoft Visual C++ 2008 Redistributable x64", "[VERSION]", "[CHECKFORINSTALLEDONLY]", "[UNSUPPORTED_OPERATING_SYSTEMS]", "0 = Win95, Win98, WinME, WinNT, Win2K,  WinXP, WinNET, VistaNoSp, VistaSp1, Win2008NoSp, Win2008Sp1, Win2008SP2_X64_CORE, Win7NoSp, Win2008R2NoSp, Win2008R2SP1_X64_CORE ", "3 = X64", "4 = X86", "6 = X86", "8 = X64", "9 = X86", "10 = X64", "11 = X86", "[RUNTIME_PARAMETERS]", "[PIBUFSS]"]]}}, "c:\\AWS.EC2.Windows.CloudWatch.json": {"content": {"Fn::Join": ["\r\n", ["{\"IsEnabled\": true,", "\"EngineConfiguration\": {", "\"PollInterval\": \"00:00:15\",", "\"Components\": [", "{", "\"Id\": \"ConnectorLogs\",", "\"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",", "\"Parameters\": {", "\"LogDirectoryPath\": \"C:\\\\connector\\\\Logs\\\\\",", "\"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss\",", "\"Encoding\": \"UTF-8\",", "\"Filter\": \"\",", "\"CultureName\": \"en-US\",", "\"TimeZoneKind\": \"UTC\"", "}", "},", "{", "\"Id\": \"CloudWatchLogs\",", "\"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",", "\"Parameters\": {", "\"AccessKey\": \"\",", "\"SecretKey\": \"\",", {"Fn::Sub": "\"Region\": \"${AWS::Region}\","}, {"Fn::Sub": "\"LogGroup\": \"${LogGroupName}\","}, "\"LogStream\": \"{instance_id}\"", "}", "}],", "\"Flows\": {", "\"Flows\": [", "\"ConnectorLogs,CloudWatchLogs\"", "]", "}}}"]]}}, "c:\\connector\\PI2AWSConnector.exe.config": {"content": {"Fn::Join": ["\r\n", ["<?xml version=\"1.0\" encoding=\"utf-8\"?>", "<configuration>", "<configSections>", "<section name=\"log4net\" type=\"log4net.Config.Log4NetConfigurationSectionHandler, log4net\" />", "</configSections>", "    <startup>", "        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.6\"/>", "    </startup>", "  <runtime>", "    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">", "      <probing privatePath=\"bin\"/>", "    </assemblyBinding>", "  </runtime>", "  <appSettings>", {"Fn::Sub": "    <add key=\"PIServer\" value=\"PIHostName\"/>"}, {"Fn::Sub": "    <add key=\"AFServer\" value=\"AFHostName\"/>"}, "    <add key=\"Interval\" value=\"1\"/>", {"Fn::Sub": "    <add key=\"StreamName\" value=\"${KinesisStreamName}\"/>"}, {"Fn::Sub": "    <add key=\"EventQueueUrl\" value=\"${IncomingQueueUrl}\"/>"}, {"Fn::Sub": "    <add key=\"ResponseQueueUrl\" value=\"${OutgoingQueueUrl}\"/>"}, {"Fn::Sub": "    <add key=\"PiPointsTableName\" value=\"${PiPointsTableName}\"/>"}, {"Fn::Sub": "    <add key=\"Region\" value=\"${AWS::Region}\"/>"}, {"Fn::Sub": "    <add key=\"LogGroup\" value=\"${LogGroupName}\"/>"}, {"Fn::Sub": "    <add key=\"LogStream\" value=\"${ConnectorStream}\"/>"}, {"Fn::Sub": "    <add key=\"StateBucket\" value=\"${StateS3Bucket}\" />"}, {"Fn::Sub": "    <add key=\"StateKey\" value=\"connector-state\"/>"}, {"Fn::Sub": "    <add key=\"AFUser\" value=\"${AFUser}\"/>"}, {"Fn::Sub": "    <add key=\"AFPassword\" value=\"${AFPassword}\"/>"}, {"Fn::Sub": "    <add key=\"AFDomain\" value=\"${AFDomainName}\"/>"}, {"Fn::Sub": "    <add key=\"PIUser\" value=\"${PIUser}\"/>"}, {"Fn::Sub": "    <add key=\"PIPassword\" value=\"${PIPassword}\"/>"}, "  </appSettings>", "  <log4net>", "<appender name=\"RollingFile\" type=\"log4net.Appender.RollingFileAppender\">", "<encoding value=\"utf-8\" />", "<file value=\"Logs\\CommandLine.Log\" />", "<threshold value=\"ALL\" />", "<appendToFile value=\"true\" />", "<rollingStyle value=\"Composite\" />", "<maximumFileSize value=\"10MB\" />", "<maxSizeRollBackups value=\"10\" />", "<datePattern value=\"yyyyMMdd\" />", "<layout type=\"log4net.Layout.PatternLayout\">", "<conversionPattern value=\"%date{yyyy-MM-dd HH:mm:ss} [%thread] %level  %message %newline\" />", "</layout>", "</appender>", "<appender name=\"ColoredConsoleAppender\" type=\"log4net.Appender.ColoredConsoleAppender\">", "<encoding value=\"utf-8\" />", "<mapping>", "<level value=\"ERROR\" />", "<foreColor value=\"Red, highintensity\" />", "</mapping>", "<mapping>", "<level value=\"WARN\" />", "<foreColor value=\"Yellow, highintensity\" />", "</mapping>", "<mapping>", "<level value=\"ALL\" />", "<foreColor value=\"Green\" />", "</mapping>", "<layout type=\"log4net.Layout.PatternLayout\">", "<conversionPattern value=\"%date{yyyy-MM-dd HH:mm:ss} [%thread] %level  %message %newline\" />", "</layout>", "</appender>", "<root>", "<level value=\"INFO\" />", "<appender-ref ref=\"RollingFile\" />", "<appender-ref ref=\"ColoredConsoleAppender\" />", "</root>", "</log4net>", "</configuration>"]]}}, "c:\\wis.ps1": {"content": {"Fn::Join": ["\r\n", [{"Fn::Sub": "$fqdn = \"${WISFQDN}\""}, {"Fn::Sub": "$wisuser = \"${WISUser}\""}, {"Fn::Sub": "$wispassword = \"${WISPassword}\""}, "", "Function Join-Domain([string]$strDomain, [string]$strUser, [string]$strPassword) {", "  Try {", "      $pass = $strPassword | ConvertTo-SecureString -asPlainText -Force", "      $username = \"$strDomain\\$strUser\"", "      $credential = New-Object System.Management.Automation.PSCredential($username,$pass)", "      Add-Computer -DomainName $strDomain -Credential $credential", "  }", "  Catch {}", "}", "", "Function Set-ServiceAcctCreds([string]$strServiceName,[string]$newAcct,[string]$newPass) {", "  $filter = 'Name=' + \"'\" + $strServiceName + \"'\" + ''", "  $service = Get-WMIObject -class Win32_Service -Filter $filter", "  $service.StopService()", "  while ($service.Started){", "    sleep 2", "    $service = Get-WMIObject -class Win32_Service -Filter $filter", "  }", "  $service | Invoke-WmiMethod -Name Change -ArgumentList @($null,$null,$null,$null,$null,$null,$null,$null,$null,$newAcct,$newPass)", "  $service.StartService()", "}", "", "$wmi = Get-WmiObject win32_networkadapterconfiguration -filter \"ipenabled = 'true'\"", {"Fn::Sub": "$wmi.SetDNSServerSearchOrder(\"${DomainControllerServerIP}\")"}, "& Join-Domain $fqdn $wisuser $wispassword", "start-sleep -seconds 20", "$fulluser = \"$fqdn\\$wisuser\"", "Invoke-Expression -Command \"C:\\connector\\grantRights.ps1 $fulluser\"", "& Set-ServiceAcctCreds 'pi2aws-connector' $fulluser $wispassword.TrimEnd(\"`r?`n\")"]]}}}}}}, "Properties": {"IamInstanceProfile": {"Ref": "ConnectorInstanceProfileARN"}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "WS2016"]}, "InstanceType": {"Ref": "InstanceType"}, "KeyName": {"Ref": "KeyName"}, "SecurityGroups": [{"Ref": "PI2AWSSecurityGroup"}]}, "Type": "AWS::AutoScaling::LaunchConfiguration"}, "PI2AWSSecurityGroup": {"Properties": {"GroupDescription": "Enable RDP", "SecurityGroupIngress": [{"CidrIp": {"Ref": "RemoteAccessCIDR"}, "FromPort": "3389", "IpProtocol": "tcp", "ToPort": "3389"}, {"CidrIp": {"Fn::Sub": "${PIServerIP}/32"}, "FromPort": {"Ref": "AFPort"}, "IpProtocol": "tcp", "ToPort": {"Ref": "AFPort"}}, {"CidrIp": {"Fn::Sub": "${PIServerIP}/32"}, "FromPort": {"Ref": "PIPort"}, "IpProtocol": "tcp", "ToPort": {"Ref": "PIPort"}}], "VpcId": {"Ref": "VpcId"}}, "Type": "AWS::EC2::SecurityGroup"}, "SubscribedPointsMetricsFilter": {"Properties": {"FilterPattern": "{ $.entityName = \"SubscriptionPointsMetric\"}", "LogGroupName": {"Ref": "ConnectorLogGroup"}, "MetricTransformations": [{"MetricName": {"Fn::Join": ["-", [{"Ref": "ConnectorStream"}, "Subscription"]]}, "MetricNamespace": {"Ref": "MetricNamespaceName"}, "MetricValue": "$.value"}]}, "Type": "AWS::Logs::MetricFilter"}}}

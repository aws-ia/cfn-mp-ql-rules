{"AWSTemplateFormatVersion": "2010-09-09", "Description": "This template builds a base TIBCO BWCE docker image, creates an ECR repo with name 'tibco-bwce' and pushes base docker image into the ECR repo. It then leverages an existing VPC. License: Apache 2.0 (Please do not remove) Apr,2,2018 (qs-1oalbg1k9)", "Metadata": {"AWS::CloudFormation::Interface": {"ParameterGroups": [{"Label": {"default": "Network Configuration"}, "Parameters": ["VPCID", "CIDRBlockCluster", "PrivateSubnet1ID", "PrivateSubnet2ID", "PublicSubnet1ID", "PublicSubnet2ID", "AdminIngressLocation"]}, {"Label": {"default": "ECS Cluster + Studio Configuration"}, "Parameters": ["ClusterSize", "InstanceType", "VolSize", "InstanceTypeStudioImage", "StudioPassword", "VolSizeStudioImage", "KeyName"]}, {"Label": {"default": "Base Image Customization Configuration"}, "Parameters": ["PluginList", "ExtBucket"]}, {"Label": {"default": "AWS Quickstart Configuration"}, "Parameters": ["QSS3BucketName", "QSS3KeyPrefix"]}], "ParameterLabels": {"AdminIngressLocation": {"default": "Admin Ingress Location"}, "CIDRBlockCluster": {"default": "VPC CIDR"}, "ClusterSize": {"default": "ECS Cluster Size:"}, "ExtBucket": {"default": "Create S3 Bucket for Base Image Customization?"}, "InstanceType": {"default": "ECS Cluster Instance Type:"}, "InstanceTypeStudioImage": {"default": "Studio EC2 Instance Type:"}, "KeyName": {"default": "Key Pair:"}, "PluginList": {"default": "List of Plug-ins:"}, "PrivateSubnet1ID": {"default": "Private Subnet ID 1"}, "PrivateSubnet2ID": {"default": "Private Subnet ID 2"}, "PublicSubnet1ID": {"default": "Public Subnet ID 1"}, "PublicSubnet2ID": {"default": "Public Subnet ID 2"}, "QSS3BucketName": {"default": "Quick Start S3 Bucket Name"}, "QSS3KeyPrefix": {"default": "Quick Start S3 Key Prefix"}, "StudioPassword": {"default": "Studio Password:"}, "VPCID": {"default": "VPC ID"}, "VolSize": {"default": "ECS Cluster Volume Size:"}, "VolSizeStudioImage": {"default": "Studio EC2 Volume Size:"}}}}, "Parameters": {"AdminIngressLocation": {"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})", "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.", "Description": "CIDR block (IP address range) to allow SSH and VNC access to your BWCE studio instance. Use 0.0.0.0/0 to allow access from all locations. You can always manually change this later if needed.", "MaxLength": "18", "MinLength": "9", "Type": "String"}, "CIDRBlockCluster": {"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$", "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28", "Default": "10.0.0.0/16", "Description": "CIDR block for the VPC", "Type": "String"}, "ClusterSize": {"ConstraintDescription": "ClusterSize must be numeric and between 1 and 100.", "Default": 2, "Description": "Number of EC2 instances to be created initially in the ECS Cluster (1-100). This value will be used to set the Min, Max & Desired count of instances in the Auto Scaling Group.", "MaxValue": 100, "MinValue": 1, "Type": "Number"}, "ExtBucket": {"AllowedValues": ["Yes", "No"], "ConstraintDescription": "The value should be Yes/No.", "Default": "No", "Description": "Do you want to create a new S3 bucket & required folder structure for extending base image? You can upload third-party drivers, OSGI bundles, certificates, plugins etc. in this bucket to extend the base image later.", "Type": "String"}, "InstanceType": {"AllowedValues": ["t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "f1.2xlarge", "f1.16xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g2.2xlarge", "g2.8xlarge", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "x1.16xlarge", "x1.32xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge"], "ConstraintDescription": "InstanceType must be a valid EC2 instance type.", "Default": "t2.medium", "Description": "Select an instance type for EC2 instances to be created in the ECS cluster.", "Type": "String"}, "InstanceTypeStudioImage": {"AllowedValues": ["t2.large", "t2.xlarge", "t2.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge"], "ConstraintDescription": "InstanceTypeStudioImage must be a valid EC2 instance type.", "Default": "m4.large", "Description": "Select an instance type that runs your BusinessWorks Container Edition studio.", "Type": "String"}, "KeyName": {"AllowedPattern": "[-_ a-zA-Z0-9]*", "ConstraintDescription": "Must be the name of an existing key pair. It can contain only alphanumeric characters, spaces, dashes and underscores.", "Description": "Select an existing key pair. You must provide existing key pair to be able to SSH into EC2 instances.", "MaxLength": 64, "MinLength": 1, "Type": "AWS::EC2::KeyPair::KeyName"}, "PluginList": {"Description": "Provide list of IDs of supported Plug-ins to be added in the customized image, e.g. for including Data Conversion, MongoDB and S3 plug-ins, provide the value as 'DC, MongoDB, S3'. This list should be comma separated and should not include any space inbetween. The list of supported Plug-ins are - AMQP (Plug-in for AMQP), Cassandra (Plug-in for Cassandra), DC (Plug-in for Data Conversion), DCRM (Plug-in for Microsoft Dynamics CRM), FTL (Plug-in for FTL), Kafka (Plug-in for Apache Kafka), Marketo (Plug-in for Marketo), MongoDB (Plug-in for MongoDB), MQ (Plug-in for WebSphere MQ), OData (Plug-in for OData), S3 (Plug-in for Amazon S3), ServiceNow (Plug-in for ServiceNow), SFDC (Plug-in for Salesforce.com), SFTP (Plug-in for SFTP), SQS-SNS (Plugin for SQS-SNS), Workday (Plug-in for Workday), Netsuite (Plug-in for Workday), PDF (Plug-in for PDF), Files (Plug-in for Files), SAP (Plug-in for SAP), ADB (Plug-in for ADB)", "Type": "String"}, "PrivateSubnet1ID": {"Description": "ID of private subnet 1 in Availability Zone 1 for the Workload (e.g., subnet-c0236ecd)", "Type": "AWS::EC2::Subnet::Id"}, "PrivateSubnet2ID": {"Description": "ID of private subnet 2 in Availability Zone 2 for the Workload (e.g., subnet-bdf5347d)", "Type": "AWS::EC2::Subnet::Id"}, "PublicSubnet1ID": {"Description": "ID of public subnet 1 in Availability Zone 1 for the ELB load balancer (e.g., subnet-0ba63bb)", "Type": "AWS::EC2::Subnet::Id"}, "PublicSubnet2ID": {"Description": "ID of public subnet 2 in Availability Zone 2 for the ELB load balancer (e.g., subnet-e323d09)", "Type": "AWS::EC2::Subnet::Id"}, "QSS3BucketName": {"AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$", "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).", "Default": "aws-quickstart", "Description": "S3 bucket name for the Quick Start assets. This string can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).", "Type": "String"}, "QSS3KeyPrefix": {"AllowedPattern": "^[0-9a-zA-Z-/]*$", "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).", "Default": "quickstart-tibco-bwce/", "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).", "Type": "String"}, "StudioPassword": {"ConstraintDescription": "This password needs to be set in order to access your BWCE studio instance. The max length of this password is 8 characters.", "Description": "Password to access the BWCE studio via VNC", "MaxLength": 8, "MinLength": 1, "NoEcho": "true", "Type": "String"}, "VPCID": {"Description": "ID of your existing VPC for deployment", "Type": "AWS::EC2::VPC::Id"}, "VolSize": {"ConstraintDescription": "VolumeSize must be numeric and between 30 and 16384.", "Default": 30, "Description": "Volume Size (GB) for ECS cluster instances.", "MaxValue": 16384, "MinValue": 30, "Type": "Number"}, "VolSizeStudioImage": {"ConstraintDescription": "VolSizeStudioImage must be numeric and between 40 and 100.", "Default": 40, "Description": "Volume Size  (GB) for EC2 instance running BusinessWorks Container Edition studio.", "MaxValue": 100, "MinValue": 40, "Type": "Number"}}, "Conditions": {"CreateS3Bucket": {"Fn::Equals": [{"Ref": "ExtBucket"}, "Yes"]}, "GovCloudCondition": {"Fn::Equals": [{"Ref": "AWS::Region"}, "us-gov-west-1"]}, "HasVolSize": {"Fn::Not": [{"Fn::Equals": [{"Ref": "VolSize"}, ""]}]}, "HasVolStudioSize": {"Fn::Not": [{"Fn::Equals": [{"Ref": "VolSizeStudioImage"}, ""]}]}}, "Rules": {"SubnetsInVPC": {"Assertions": [{"Assert": {"Fn::EachMemberIn": [{"Fn::ValueOfAll": ["AWS::EC2::Subnet::Id", "VpcId"]}, {"Fn::RefAll": "AWS::EC2::VPC::Id"}]}, "AssertDescription": "All subnets must be in the VPC"}]}}, "Mappings": {"AWSAMIRegionMap": {"us-east-1": {"AMI": "ami-cf2b59b0"}, "us-east-2": {"AMI": "ami-05c9f660"}, "us-west-1": {"AMI": "ami-c28663a1"}, "us-west-2": {"AMI": "ami-5e703726"}, "eu-west-1": {"AMI": "ami-e1fcfa98"}, "eu-west-2": {"AMI": "ami-def11eb9"}, "eu-central-1": {"AMI": "ami-1c7640f7"}, "ap-northeast-1": {"AMI": "ami-a823e5d7"}, "ap-southeast-1": {"AMI": "ami-b0340fcc"}, "ap-southeast-2": {"AMI": "ami-8f3fe2ed"}, "ca-central-1": {"AMI": "ami-1eb0337a"}}}, "Resources": {"ECSHostSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"VpcId": {"Ref": "VPCID"}, "GroupDescription": "Access to the ECS hosts and the tasks/containers that run on them", "SecurityGroupIngress": [{"SourceSecurityGroupId": {"Ref": "LoadBalancerSecurityGroup"}, "IpProtocol": -1}], "Tags": [{"Key": "Name", "Value": {"Fn::Sub": "${AWS::StackName}-ECS-Hosts"}}]}}, "EC2SecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"VpcId": {"Ref": "VPCID"}, "GroupDescription": "Base security group for EC2 BusinessWorks Container Edition Instance", "SecurityGroupIngress": [{"IpProtocol": "tcp", "CidrIp": {"Ref": "AdminIngressLocation"}, "FromPort": "22", "ToPort": "22"}]}}, "LoadBalancerSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"VpcId": {"Ref": "VPCID"}, "GroupDescription": "Access to the load balancer that sits in front of ECS", "SecurityGroupIngress": [{"CidrIp": {"Ref": "AdminIngressLocation"}, "IpProtocol": "tcp", "FromPort": "8080", "ToPort": "8080"}], "Tags": [{"Key": "Name", "Value": {"Fn::Sub": "${AWS::StackName}-LoadBalancers"}}]}}, "BWCEArtifactsBucket": {"Type": "AWS::S3::Bucket", "Condition": "CreateS3Bucket", "DeletionPolicy": "Retain"}, "BwceEcrRepository": {"Type": "AWS::ECR::Repository"}, "DefaultTargetGroup": {"Type": "AWS::ElasticLoadBalancingV2::TargetGroup", "Properties": {"VpcId": {"Ref": "VPCID"}, "Port": 8080, "Protocol": "HTTP", "HealthCheckPath": "/_ping", "HealthCheckPort": 7777, "HealthCheckProtocol": "HTTP", "Matcher": {"HttpCode": "200,302"}, "HealthCheckIntervalSeconds": 30, "HealthCheckTimeoutSeconds": 5, "HealthyThresholdCount": 3, "UnhealthyThresholdCount": 2}}, "LoadBalancer": {"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer", "Properties": {"Subnets": [{"Ref": "PublicSubnet1ID"}, {"Ref": "PublicSubnet2ID"}], "SecurityGroups": [{"Ref": "LoadBalancerSecurityGroup"}]}}, "LoadBalancerListener": {"Type": "AWS::ElasticLoadBalancingV2::Listener", "Properties": {"LoadBalancerArn": {"Ref": "LoadBalancer"}, "Port": 8080, "Protocol": "HTTP", "DefaultActions": [{"Type": "forward", "TargetGroupArn": {"Ref": "DefaultTargetGroup"}}]}}, "InitialEC2Setup": {"Type": "AWS::EC2::Instance", "Properties": {"ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "AMI"]}, "InstanceType": "t2.medium", "IamInstanceProfile": {"Ref": "ECSInstanceProfile"}, "InstanceInitiatedShutdownBehavior": "terminate", "SecurityGroupIds": [{"Ref": "EC2SecurityGroup"}], "SubnetId": {"Ref": "PublicSubnet1ID"}}, "Metadata": {"AWS::CloudFormation::Init": {"configSets": {"quickstartwithS3": ["bucketFolderCreation", "endMessage"], "cfnInitEnd": ["endMessage"]}, "bucketFolderCreation": {"commands": {"01_create_folder": {"command": {"Fn::Join": ["", ["#!/bin/bash\n", "aws s3api put-object --bucket ", {"Fn::If": ["CreateS3Bucket", {"Ref": "BWCEArtifactsBucket"}, {"Ref": "AWS::NoValue"}]}, " --key certs/\n", "aws s3api put-object --bucket ", {"Fn::If": ["CreateS3Bucket", {"Ref": "BWCEArtifactsBucket"}, {"Ref": "AWS::NoValue"}]}, " --key jars/\n", "aws s3api put-object --bucket ", {"Fn::If": ["CreateS3Bucket", {"Ref": "BWCEArtifactsBucket"}, {"Ref": "AWS::NoValue"}]}, " --key lib/\n", "aws s3api put-object --bucket ", {"Fn::If": ["CreateS3Bucket", {"Ref": "BWCEArtifactsBucket"}, {"Ref": "AWS::NoValue"}]}, " --key monitor-agents/\n", "aws s3api put-object --bucket ", {"Fn::If": ["CreateS3Bucket", {"Ref": "BWCEArtifactsBucket"}, {"Ref": "AWS::NoValue"}]}, " --key plugins/\n", "aws s3api put-object --bucket ", {"Fn::If": ["CreateS3Bucket", {"Ref": "BWCEArtifactsBucket"}, {"Ref": "AWS::NoValue"}]}, " --key thirdparty-installs/\n"]]}}}}, "endMessage": {"commands": {"02_end_Message": {"command": "echo 'end cfn-init...'"}}}}}}, "StudioEC2Instance": {"Type": "AWS::EC2::Instance", "Metadata": {"AWS::CloudFormation::Init": {"config": {"files": {"/tmp/studio_pass.txt": {"content": {"Ref": "StudioPassword"}, "mode": "000644", "owner": "ec2-user", "group": "ec2-user"}}}}}, "Properties": {"ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "AMI"]}, "InstanceType": {"Ref": "InstanceTypeStudioImage"}, "KeyName": {"Ref": "KeyName"}, "SecurityGroupIds": [{"Ref": "EC2SecurityGroup"}], "SubnetId": {"Ref": "PublicSubnet1ID"}, "Tags": [{"Key": "Name", "Value": {"Fn::Sub": "${AWS::StackName} - BWCE Studio"}}], "IamInstanceProfile": {"Ref": "EC2InstanceProfile"}}}, "ECSCluster": {"Type": "AWS::ECS::Cluster", "Properties": {"ClusterName": {"Ref": "AWS::StackName"}}}, "ECSAutoScalingGroup": {"Type": "AWS::AutoScaling::AutoScalingGroup", "Properties": {"VPCZoneIdentifier": [{"Ref": "PrivateSubnet1ID"}, {"Ref": "PrivateSubnet2ID"}], "LaunchConfigurationName": {"Ref": "ECSLaunchConfiguration"}, "MinSize": "1", "MaxSize": "100", "DesiredCapacity": {"Ref": "ClusterSize"}, "Tags": [{"Key": "Name", "Value": {"Fn::Sub": "${AWS::StackName} ECS host"}, "PropagateAtLaunch": true}]}, "CreationPolicy": {"ResourceSignal": {"Timeout": "PT60M"}}, "UpdatePolicy": {"AutoScalingRollingUpdate": {"MinInstancesInService": 1, "MaxBatchSize": 1, "PauseTime": "PT15M", "WaitOnResourceSignals": true}}}, "ECSLaunchConfiguration": {"Type": "AWS::AutoScaling::LaunchConfiguration", "Properties": {"ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "AMI"]}, "InstanceType": {"Ref": "InstanceType"}, "KeyName": {"Ref": "KeyName"}, "BlockDeviceMappings": [{"DeviceName": "/dev/sda1", "Ebs": {"DeleteOnTermination": false, "VolumeType": "gp2", "VolumeSize": {"Fn::If": ["HasVolSize", {"Ref": "VolSize"}, 30]}}}], "SecurityGroups": [{"Ref": "ECSHostSecurityGroup"}], "IamInstanceProfile": {"Ref": "ECSInstanceProfile"}}, "Metadata": {"AWS::CloudFormation::Init": {"config": {"commands": {"01_add_instance_to_cluster": {"command": {"Fn::Sub": "echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config"}}, "02_add_instance_to_cluster": {"command": "echo ECS_CHECKPOINT=false >> /etc/ecs/ecs.config"}, "03_add_instance_to_cluster": {"command": "echo ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=10m >> /etc/ecs/ecs.config"}, "04_add_instance_to_cluster": {"command": "echo ECS_DISABLE_IMAGE_CLEANUP=false >> /etc/ecs/ecs.config"}}, "files": {"/etc/cfn/cfn-hup.conf": {"mode": 256, "owner": "root", "group": "root", "content": {"Fn::Sub": "[main]\nstack=${AWS::StackId}\nregion=${AWS::Region}\n"}}, "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {"content": {"Fn::Sub": "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\naction=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration\n"}}}, "services": {"sysvinit": {"cfn-hup": {"enabled": true, "ensureRunning": true, "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}}}}}}}, "StudioRole": {"Type": "AWS::IAM::Role", "Properties": {"Path": "/", "AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": ["ec2.amazonaws.com", "ecs.amazonaws.com"]}, "Action": ["sts:AssumeRole"]}]}, "Policies": [{"PolicyName": "ecs-policy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["ecs:DeregisterContainerInstance", "ecs:DiscoverPollEndpoint", "ecs:Poll", "ecs:RegisterContainerInstance", "ecs:RegisterTaskDefinition", "ecs:ListTaskDefinitions", "ecs:RunTask", "ecs:StartTelemetrySession", "ecs:UpdateContainerInstancesState", "ecs:Submit*", "ecs:CreateService"], "Resource": "*"}]}}, {"PolicyName": "ecr-policy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["ecr:GetAuthorizationToken", "ecr:BatchCheckLayerAvailability", "ecr:GetDownloadUrlForLayer", "ecr:GetRepositoryPolicy", "ecr:DescribeRepositories", "ecr:ListImages", "ecr:BatchGetImage", "ecr:InitiateLayerUpload", "ecr:UploadLayerPart", "ecr:CompleteLayerUpload", "ecr:PutImage"], "Resource": "*"}]}}, {"PolicyName": "extra-policy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["iam:PassRole", "elasticloadbalancing:Describe*"], "Resource": "*"}]}}]}}, "EC2InstanceProfile": {"Type": "AWS::IAM::InstanceProfile", "Properties": {"Path": "/", "Roles": [{"Ref": "StudioRole"}]}}, "ECSRole": {"Type": "AWS::IAM::Role", "Properties": {"Path": "/", "AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": ["ec2.amazonaws.com"]}, "Action": ["sts:AssumeRole"]}]}, "Policies": [{"PolicyName": "ecs-policy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["ecs:DeregisterContainerInstance", "ecs:DiscoverPollEndpoint", "ecs:Poll", "ecs:RegisterContainerInstance", "ecs:StartTelemetrySession", "ecs:UpdateContainerInstancesState", "ecs:Submit*"], "Resource": "*"}]}}, {"PolicyName": "ecr-policy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["ecr:GetAuthorizationToken", "ecr:BatchCheckLayerAvailability", "ecr:GetDownloadUrlForLayer", "ecr:GetRepositoryPolicy", "ecr:DescribeRepositories", "ecr:ListImages", "ecr:BatchGetImage", "ecr:InitiateLayerUpload", "ecr:UploadLayerPart", "ecr:CompleteLayerUpload", "ecr:PutImage"], "Resource": "*"}]}}, {"PolicyName": "logs-policy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents", "logs:DescribeLogStreams"], "Resource": "*"}]}}, {"PolicyName": "elb-policy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["elasticloadbalancing:DeregisterInstancesFromLoadBalancer", "elasticloadbalancing:DeregisterTargets", "elasticloadbalancing:Describe*", "elasticloadbalancing:RegisterInstancesWithLoadBalancer", "elasticloadbalancing:RegisterTargets"], "Resource": "*"}]}}, {"PolicyName": "ec2-policy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["aws-marketplace:MeterUsage", "ec2:CreateTags*", "ec2:Describe*"], "Resource": "*"}]}}, {"Fn::If": ["CreateS3Bucket", {"PolicyName": "s3-policy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["s3:ListBucket", "s3:PutObject", "s3:GetObject", "s3:DeleteObject", "s3:ListObject"], "Resource": {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "BWCEArtifactsBucket"}, "/*"]]}}]}}, {"Ref": "AWS::NoValue"}]}]}}, "ECSInstanceProfile": {"Type": "AWS::IAM::InstanceProfile", "Properties": {"Path": "/", "Roles": [{"Ref": "ECSRole"}]}}, "ECRCleanupStack": {"Type": "AWS::CloudFormation::Stack", "DependsOn": "BwceEcrRepository", "Properties": {"TemplateURL": {"Fn::Sub": ["https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}templates/cleanup-repo.template", {"QSS3Region": {"Fn::If": ["GovCloudCondition", "s3-us-gov-west-1", "s3"]}}]}, "Parameters": {"Repository": {"Ref": "BwceEcrRepository"}}}}}, "Outputs": {"VPC": {"Description": "A reference to the VPC.", "Value": {"Fn::Sub": "https://console.aws.amazon.com/vpc/home?region=${AWS::Region}#vpcs:filter=${AWS::StackName}"}}, "LoadBalancer": {"Description": "A reference to the Application Load Balancer.", "Value": {"Fn::GetAtt": ["LoadBalancer", "DNSName"]}}, "DefaultTargetGroup": {"Description": "A reference to the ARN of the default Target Group for the Application Load Balancer.", "Value": {"Ref": "DefaultTargetGroup"}}, "StudioEC2Instance": {"Description": "IP address of the BWCE Studio Instance", "Value": {"Fn::GetAtt": ["StudioEC2Instance", "PublicIp"]}}, "StudioRole": {"Description": "ARN of the IAM Role applied to BWCE Studio Instance", "Value": {"Fn::GetAtt": ["StudioRole", "Arn"]}}, "AutoScalingGroup": {"Description": "A reference to the Auto Scaling Group.", "Value": {"Fn::Sub": "https://console.aws.amazon.com/ec2/autoscaling/home?region=${AWS::Region}#AutoScalingGroups:id=${ECSAutoScalingGroup}"}}, "ECSClusterName": {"Description": "Name of the ECS Cluster created", "Value": {"Ref": "ECSCluster"}}, "ECSCluster": {"Description": "A reference to the ECS cluster.", "Value": {"Fn::Sub": "https://console.aws.amazon.com/ecs/home?region=${AWS::Region}#/clusters/${ECSCluster}/services"}}, "BwceEcrRepository": {"Description": "Name of the ECR Repository created to store customized image. This image will have the plugins you selected installed within it.", "Value": {"Ref": "BwceEcrRepository"}}, "ECR": {"Description": "A reference to the Amazon ECR (Amazon EC2 Container Registry).", "Value": {"Fn::Sub": "https://console.aws.amazon.com/ecs/home?region=${AWS::Region}#/repositories/${BwceEcrRepository}#images"}}, "S3Bucket": {"Description": "A reference to the S3 Bucket which will be used for customizing base image. If you selected 'Create S3 Bucket for Base Image Customization?' as 'No', then it will not be applicable.", "Value": {"Fn::If": ["CreateS3Bucket", {"Fn::Join": ["", ["https://console.aws.amazon.com/s3/home?region=", {"Ref": "AWS::Region"}, "&bucket=", {"Ref": "BWCEArtifactsBucket"}, ""]]}, "Not Applicable"]}}}}

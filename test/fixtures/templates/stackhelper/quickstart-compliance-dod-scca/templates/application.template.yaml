---
AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Provides resources directly required for the application, such as EC2
  instances, autoscaling groups, and databases
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Region Config
        Parameters:
          - pRegionAZ1Name
          - pRegionAZ2Name
      - Label:
          default: Network (existing VPC config)
        Parameters:
          - pProductionCIDR
          - pProductionVPC
          - pAppPrivateSubnetA
          - pAppPrivateSubnetB
          - pDBPrivateSubnetA
          - pDBPrivateSubnetB
      - Label:
          default: Application Configuration
        Parameters:
          - pWebInstanceType
          - pWebServerAMI
          - pAppInstanceType
          - pAppAmi
      - Label:
          default: Database Configuration
        Parameters:
          - pDBName
          - pDBUser
          - pDBPassword
          - pDBClass
          - pDBAllocatedStorage
      - Label:
          default: Deep Security Configuration
        Parameters:
          - pDeepSecurityAgentDownload
          - pDeepSecurityHeartbeat
  Stack:
    Value: '3'
  VersionDate:
    Value: '20160510'
  Identifier:
    Value: template-application
  Input:
    Description: VPC, SubnetIDs, S3 bucket names, CIDR blocks, KeyNames, AMIs, DB name and password
  Output:
    Description: Outputs ID of all deployed resources
Parameters:
  pSecurityAlarmTopic:
    Description: SNS topic for alarms and notifications
    Type: String
    Default: ''
  pEC2KeyPair:
    Description: Key Name for Instance
    Type: String
    Default: ''
  pProductionCIDR:
    Description: Production VPC CIDR
    Type: String
  pVDMSCIDR:
    Description: VDMS VPC CIDR
    Type: String
  pProductionVPC:
    Description: Production VPC
    Type: AWS::EC2::VPC::Id
  pBastionSSHCIDR:
    Description: |
      CIDR block (optional) of Public IPs allowed to access Bastion instance in
      this deployment
    Type: String
    Default: 0.0.0.0/0
  pAppPrivateSubnetA:
    Description: WebApp Subnet A
    Type: AWS::EC2::Subnet::Id
  pAppPrivateSubnetB:
    Description: WebApp Subnet A
    Type: AWS::EC2::Subnet::Id
  pWebInstanceType:
    Description: Instance type for the webservers
    Type: String
  pAppInstanceType:
    Description: Instance type for the app webservers
    Type: String
  pDBPrivateSubnetA:
    Description: rDBPrivateSubnetA
    Type: AWS::EC2::Subnet::Id
  pDBPrivateSubnetB:
    Description: rDBPrivateSubnetB
    Type: AWS::EC2::Subnet::Id
  pRegionAZ1Name:
    Description: rDBPrivateSubnetB
    Type: AWS::EC2::AvailabilityZone::Name
  pRegionAZ2Name:
    Description: rDBPrivateSubnetB
    Type: AWS::EC2::AvailabilityZone::Name
  pWebServerAMI:
    Description: 'Which webserver AMI do you want to use, default '
    Type: String
    Default: none
  pAppAmi:
    Description: Which App AMI do you want to use?
    Type: String
    Default: none
  pDBName:
    Description: Name of RDS Database
    Type: String
  pDBUser:
    Description: Username of DB Instance
    Type: String
  pDBPassword:
    Description: Password of DB Instance
    NoEcho: true
    Type: String
  pDBClass:
    Description: Instance class of RDS instance
    Type: String
  pDBAllocatedStorage:
    Description: Allocated Storage (in GB) for RDS instance
    Type: String
  pEnvironment:
    Description: Environment type (development, test, or production)
    Type: String
    Default: development
  pSupportsGlacier:
    Description: |
      Determines whether this region supports Glacier (passed in from main
      template)
    Type: String
    Default: 'true'
  pTemplateUrlPrefix:
    Description: URL prefix used for various assets
    Type: String
    Default: ''
  pDeepSecurityAgentDownload:
    Description: Base URL for download of Deep Security Agent Software
    Type: String
    Default: https://fqdn:port/
  pDeepSecurityHeartbeat:
    Description: Complete URL for activation of Deep Security Agent
    Type: String
    Default: dsm://fqdn:4120/
Mappings:
  elbMap:
    us-east-1:
      ELB: '127311923021'
    us-east-2:
      ELB: '033677994240'
    us-west-1:
      ELB: '027434742980'
    us-west-2:
      ELB: '797873946194'
    ca-central-1:
      ELB: '985666609251'
    eu-west-1:
      ELB: '156460612806'
    eu-west-2:
      ELB: '652711504416'
    ap-south-1:
      ELB: '718504428378'
    ap-southeast-2:
      ELB: '783225319266'
    ap-southeast-1:
      ELB: '114774131450'
    ap-northeast-1:
      ELB: '582318560864'
    ap-northeast-2:
      ELB: '600734575887'
    eu-central-1:
      ELB: '054676820928'
    sa-east-1:
      ELB: '507241528517'
    us-gov-west-1:
      ELB: '048591011584'
Conditions:
  IsGovCloud:
    Fn::Equals:
      - Ref: AWS::Region
      - us-gov-west-1
  SupportsGlacier:
    Fn::Equals:
      - Ref: pSupportsGlacier
      - 'true'
Resources:
  rS3ELBAccessLogs:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
  rS3AccessLogsPolicy:
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    Properties:
      Bucket:
        Ref: rS3ELBAccessLogs
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Sid: ELBAccessLogs20130930
            Effect: Allow
            Resource:
              Fn::Join:
                - ''
                - - 'arn:'
                  - Fn::If:
                      - IsGovCloud
                      - aws-us-gov
                      - aws
                  - ':s3:::'
                  - Ref: rS3ELBAccessLogs
                  - /
                  - Logs
                  - /AWSLogs/
                  - Ref: AWS::AccountId
                  - /*
            Principal:
              AWS:
                Fn::FindInMap:
                  - elbMap
                  - Ref: AWS::Region
                  - ELB
            Action:
              - s3:PutObject
  rSecurityGroupWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Reverse Proxy in DMZ
      VpcId:
        Ref: pProductionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: sg-reverse-proxy-dmz
        - Key: Environment
          Value: !Ref pEnvironment
  rSecurityGroupWebInstance:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Reverse Proxy Instances in DMZ
      VpcId:
        Ref: pProductionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp:
            Ref: pProductionCIDR
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp:
            Ref: pProductionCIDR
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp:
            Ref: pVDMSCIDR
        - IpProtocol: tcp
          FromPort: 4118
          ToPort: 4118
          CidrIp:
            Ref: pVDMSCIDR
      Tags:
        - Key: Name
          Value: sg-reverse-proxy-dmz-instances
        - Key: Environment
          Value:
            Ref: pEnvironment
  rSecurityGroupApp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Appservers ELB
      VpcId:
        Ref: pProductionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp:
            Ref: pProductionCIDR
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: sg-app-server-elb
        - Key: Environment
          Value:
            Ref: pEnvironment
  rSecurityGroupAppInstance:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Appserver Instances
      VpcId:
        Ref: pProductionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp:
            Ref: pProductionCIDR
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp:
            Ref: pProductionCIDR
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp:
            Ref: pVDMSCIDR
        - IpProtocol: tcp
          FromPort: 4118
          ToPort: 4118
          CidrIp:
            Ref: pVDMSCIDR
      Tags:
        - Key: Name
          Value: sg-app-server-app-instances
        - Key: Environment
          Value:
            Ref: pEnvironment
  rSecurityGroupRDS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Port 3306 database for access
      VpcId:
        Ref: pProductionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId:
            Ref: rSecurityGroupAppInstance
      Tags:
        - Key: Name
          Value: sg-database-access
        - Key: Environment
          Value:
            Ref: pEnvironment
  rWebContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - Id: Transition90daysRetain7yrs
            Status: Enabled
            ExpirationInDays: '2555'
            Transition:
              TransitionInDays: '90'
              StorageClass:
                Fn::If:
                  - SupportsGlacier
                  - GLACIER
                  - STANDARD_IA
      VersioningConfiguration:
        Status: Enabled
    DeletionPolicy: Delete
  rWebContentS3Policy:
    Type: AWS::S3::BucketPolicy
    DependsOn: rWebContentBucket
    Properties:
      Bucket:
        Ref: rWebContentBucket
      PolicyDocument:
        Statement:
          - Sid: EnforceSecureTransport
            Action: s3:*
            Effect: Deny
            Principal: '*'
            Resource:
              Fn::Join:
                - ''
                - - 'arn:'
                  - Fn::If:
                      - IsGovCloud
                      - aws-us-gov
                      - aws
                  - ':s3:::'
                  - Ref: rWebContentBucket
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: EnforceEncryptionOnPut
            Effect: Deny
            Principal: '*'
            Action: s3:PutObject
            Resource:
              Fn::Join:
                - ''
                - - 'arn:'
                  - Fn::If:
                      - IsGovCloud
                      - aws-us-gov
                      - aws
                  - ':s3:::'
                  - Ref: rWebContentBucket
                  - /*
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption: AES256
  rDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: MySQL RDS Subnet Group
      SubnetIds:
        - Ref: pDBPrivateSubnetA
        - Ref: pDBPrivateSubnetB
  rRDSInstanceMySQL:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - rDBSubnetGroup
      - rSecurityGroupRDS
    Properties:
      DBName:
        Ref: pDBName
      Engine: MySQL
      MultiAZ: 'true'
      StorageEncrypted: 'true'
      MasterUsername:
        Ref: pDBUser
      MasterUserPassword:
        Ref: pDBPassword
      DBInstanceClass:
        Ref: pDBClass
      AllocatedStorage:
        Ref: pDBAllocatedStorage
      VPCSecurityGroups:
        - Ref: rSecurityGroupRDS
      DBSubnetGroupName:
        Ref: rDBSubnetGroup
  rELBApp:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn:
      - rS3ELBAccessLogs
      - rSecurityGroupApp
      - rS3AccessLogsPolicy
    Properties:
      Subnets:
        - Ref: pAppPrivateSubnetA
        - Ref: pAppPrivateSubnetB
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '15'
        Target: TCP:80
        Timeout: '5'
        UnhealthyThreshold: '3'
      AccessLoggingPolicy:
        S3BucketName:
          Ref: rS3ELBAccessLogs
        S3BucketPrefix: Logs
        Enabled: 'true'
        EmitInterval: '60'
      SecurityGroups:
        - Ref: rSecurityGroupApp
      Listeners:
        - InstancePort: '80'
          LoadBalancerPort: '80'
          Protocol: HTTP
          InstanceProtocol: HTTP
      Scheme: internal
      Tags:
        - Key: Name
          Value: ProxyELB
        - Key: Environment
          Value:
            Ref: pEnvironment
  rELBWeb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn:
      - rS3ELBAccessLogs
      - rSecurityGroupWeb
      - rS3AccessLogsPolicy
    Properties:
      Subnets:
        - Ref: pAppPrivateSubnetA
        - Ref: pAppPrivateSubnetB
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '30'
        Target: TCP:80
        Timeout: '5'
        UnhealthyThreshold: '5'
      AccessLoggingPolicy:
        S3BucketName:
          Ref: rS3ELBAccessLogs
        S3BucketPrefix: Logs
        Enabled: 'true'
        EmitInterval: '60'
      SecurityGroups:
        - Ref: rSecurityGroupWeb
      Listeners:
        - InstancePort: '80'
          LoadBalancerPort: '80'
          Protocol: HTTP
          InstanceProtocol: HTTP
      Scheme: internal
      Tags:
        - Key: Name
          Value: Proxy ELB
        - Key: Environment
          Value:
            Ref: pEnvironment
  rAutoScalingConfigWeb:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - rELBApp
      - rAutoScalingGroupApp
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          bootstrap:
            - nginx
            - installDeepSecurityAgent
        nginx:
          packages:
            yum:
              nginx: []
              java-1.6.0-openjdk-devel: []
              git: []
          files:
            /tmp/nginx/default.conf:
              content: !Sub |
                server {
                  listen 80;
                  charset utf-8;
                  location / {
                    resolver xxxxx;
                    set $elb 'https://${rELBApp.DNSName}';
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header Host $http_host;
                    proxy_redirect off;
                    proxy_pass $elb;
                  }
                }
              mode: '000755'
              owner: root
              group: root
          commands:
            01-nginx-setup:
              command: |
                #!/bin/bash
                ## Nginx setup
                sleep 5
                echo 'Replace resolver placeholder with /etc/resolv.conf nameservers'
                sed -i "s/xxxxx/$(grep ^nameserver /etc/resolv.conf | sed 's/^nameserver//' | tr -d '\n')/" /tmp/nginx/default.conf
                cp /tmp/nginx/default.conf /etc/nginx/conf.d/default.conf
                service nginx stop
                sed -i '/default_server;/d' /etc/nginx/nginx.conf
                sleep 10
                service nginx restart
          services:
            sysvinit:
              nginx:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/nginx/conf.d/default.conf
        installDeepSecurityAgent:
          commands:
            0-download-DSA:
              command:
                Fn::Join:
                  - ''
                  - - 'curl -k '
                    - Ref: pDeepSecurityAgentDownload
                    - software/agent/amzn1/x86_64/ -o /tmp/agent.rpm
            1-install-DSA:
              command: rpm -ivh /tmp/agent.rpm
            2-sleep-for-rpm-install:
              command: sleep 10
            3-activate-DSA:
              command:
                Fn::Join:
                  - ''
                  - - '/opt/ds_agent/dsa_control -a '
                    - Ref: pDeepSecurityHeartbeat
                    - ' "policy:Linux Server"'
    Properties:
      AssociatePublicIpAddress: 'True'
      ImageId:
        Ref: pWebServerAMI
      InstanceType:
        Ref: pWebInstanceType
      KeyName:
        Ref: pEC2KeyPair
      SecurityGroups:
        - Ref: rSecurityGroupWebInstance
  rAutoScalingGroupWeb:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: rAutoScalingConfigWeb
    Properties:
      VPCZoneIdentifier:
        - Ref: pAppPrivateSubnetA
        - Ref: pAppPrivateSubnetB
      LaunchConfigurationName:
        Ref: rAutoScalingConfigWeb
      MinSize: '2'
      MaxSize: '4'
      LoadBalancerNames:
        - Ref: rELBWeb
      HealthCheckType: ELB
      HealthCheckGracePeriod: '300'
      Tags:
        - Key: Name
          Value: Proxy Server
          PropagateAtLaunch: 'true'
        - Key: Environment
          Value:
            Ref: pEnvironment
          PropagateAtLaunch: 'true'
  rAutoScalingUpWeb:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: rAutoScalingGroupWeb
      Cooldown: '500'
      ScalingAdjustment: '1'
  rAutoScalingDownWeb:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: rAutoScalingGroupWeb
      Cooldown: '500'
      ScalingAdjustment: '-1'
  rCWAlarmHighCPUWeb:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '50'
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: '60'
      AlarmActions:
        - Ref: rAutoScalingUpWeb
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: rAutoScalingGroupWeb
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  rCWAlarmLowCPUWeb:
    Type: AWS::CloudWatch::Alarm
    DependsOn: rAutoScalingGroupWeb
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '10'
      AlarmDescription: Alarm if CPU too too, remove a webserver
      Period: '60'
      AlarmActions:
        - Ref: rAutoScalingDownWeb
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: rAutoScalingGroupWeb
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
  rAutoScalingConfigApp:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: rRDSInstanceMySQL
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          bootstrap:
            - install_cfn
            - wordpress_install
            - installDeepSecurityAgent
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                Fn::Join:
                  - ''
                  - - '[main]

'
                    - stack=
                    - Ref: AWS::StackId
                    - '

'
                    - region=
                    - Ref: AWS::Region
                    - '

'
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                Fn::Join:
                  - ''
                  - - '[cfn-auto-reloader-hook]

'
                    - 'triggers=post.update

'
                    - 'path=Resources.rAutoScalingConfigApp.Metadata.AWS::CloudFormation::Init

'
                    - 'action=/opt/aws/bin/cfn-init -v '
                    - '         --stack '
                    - Ref: AWS::StackName
                    - '         --resource rAutoScalingConfigApp '
                    - '         --configsets bootstrap '
                    - '         --region '
                    - Ref: AWS::Region
                    - '

'
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        wordpress_install:
          packages:
            yum:
              php: []
              php-mysql: []
              mysql: []
              httpd: []
          sources:
            /var/www/html: https://wordpress.org/latest.tar.gz
          files:
            /var/www/html/wordpress/wp-config.php:
              content: !Sub |
                <?php
                define('DB_NAME', '${pDBName}');
                define('DB_USER', '${pDBUser}');
                define('DB_PASSWORD', '${pDBPassword}');
                define('DB_HOST', '${rRDSInstanceMySQL.Endpoint.Address}');
                define('FORCE_SSL_ADMIN', true);
                if (strpos($_SERVER['HTTP_X_FORWARDED_PROTO'], 'https') !== false) { $_SERVER['HTTPS']='on'; }
                define('DB_CHARSET', 'utf8');s
                define('DB_COLLATE', '');

                $table_prefix  = 'wp_';
                define('WP_DEBUG', false);

                if ( !defined('ABSPATH') )
                  define('ABSPATH', dirname(__FILE__) . '/');

                require_once(ABSPATH . 'wp-settings.php');
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
        installDeepSecurityAgent:
          commands:
            0-download-DSA:
              command:
                Fn::Join:
                  - ''
                  - - 'curl -k '
                    - Ref: pDeepSecurityAgentDownload
                    - software/agent/amzn1/x86_64/ -o /tmp/agent.rpm
            1-install-DSA:
              command: rpm -ivh /tmp/agent.rpm
            2-sleep-for-rpm-install:
              command: sleep 10
            3-activate-DSA:
              command:
                Fn::Join:
                  - ''
                  - - '/opt/ds_agent/dsa_control -a '
                    - Ref: pDeepSecurityHeartbeat
                    - ' "policy:Linux Server"'
    Properties:
      ImageId:
        Ref: pAppAmi
      InstanceType:
        Ref: pAppInstanceType
      KeyName:
        Ref: pEC2KeyPair
      SecurityGroups:
        - Ref: rSecurityGroupAppInstance
  rAutoScalingGroupApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: rAutoScalingConfigApp
    Properties:
      VPCZoneIdentifier:
        - Ref: pAppPrivateSubnetA
        - Ref: pAppPrivateSubnetB
      LaunchConfigurationName:
        Ref: rAutoScalingConfigApp
      MinSize: '2'
      MaxSize: '4'
      LoadBalancerNames:
        - Ref: rELBApp
      HealthCheckType: ELB
      HealthCheckGracePeriod: '300'
      Tags:
        - Key: Name
          Value: AppServer
          PropagateAtLaunch: 'true'
        - Key: Environment
          Value:
            Ref: pEnvironment
          PropagateAtLaunch: 'true'
  rAutoScalingDownApp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: rAutoScalingGroupApp
      Cooldown: '1'
      ScalingAdjustment: '1'
  rAutoScalingUpApp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: rAutoScalingGroupApp
      Cooldown: '1'
      ScalingAdjustment: '-1'
  rCWAlarmHighCPUApp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '50'
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: '60'
      AlarmActions:
        - Ref: rAutoScalingDownApp
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: rAutoScalingGroupApp
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  rCWAlarmLowCPUApp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '10'
      AlarmDescription: Alarm if CPU too too, remove a webseerver
      Period: '60'
      AlarmActions:
        - Ref: rAutoScalingUpApp
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: rAutoScalingGroupApp
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
  rPostProcInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: PostProcePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: UploadServerCertificate
                Effect: Allow
                Action:
                  - iam:ListServerCertificates
                  - iam:UploadServerCertificate
                Resource:
                  - '*'
              - Sid: CreateLoadBalancerListener
                Effect: Allow
                Action:
                  - elasticloadbalancing:CreateLoadBalancerListeners
                Resource:
                  - '*'
              - Sid: PublishNotificationTopic
                Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - Ref: pSecurityAlarmTopic
  rSelfDestructPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SelfDestruct
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowSelfDestruct
            Effect: Allow
            Action:
              - ec2:TerminateInstances
            Resource:
              - !Sub arn:*:ec2:${AWS::Region}:${AWS::AccountId}:instance/${rPostProcInstance}
      Roles:
        - !Ref rPostProcInstanceRole
  rPostProcInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: rPostProcInstanceRole
  rPostProcInstance:
    Type: AWS::EC2::Instance
    DependsOn:
      - rAutoScalingConfigApp
      - rAutoScalingConfigWeb
    Properties:
      ImageId:
        Ref: pWebServerAMI
      InstanceType:
        Ref: pAppInstanceType
      IamInstanceProfile:
        Ref: rPostProcInstanceProfile
      SubnetId:
        Ref: pAppPrivateSubnetA
      SecurityGroupIds:
        - Ref: rSecurityGroupAppInstance
      Tags:
        - Key: Name
          Value: PostProcessor
Outputs:
  LandingPageURL:
    Value:
      Fn::Join:
        - ''
        - - https://
          - Fn::GetAtt:
              - rELBWeb
              - DNSName
          - /landing.html
    Description: Landing Page
  WebsiteURL:
    Value:
      Fn::Join:
        - ''
        - - https://
          - Fn::GetAtt:
              - rELBWeb
              - DNSName
          - /wordpress/wp-admin/install.php
    Description: WordPress Website (demonstration purposes only)
  rSecurityGroupWeb:
    Value:
      Ref: rSecurityGroupWeb
  rSecurityGroupApp:
    Value:
      Ref: rSecurityGroupApp
  rSecurityGroupRDS:
    Value:
      Ref: rSecurityGroupRDS
  SurveyLink:
    Description: Please take a moment to complete the survey by clicking this link
    Value: https://aws.au1.qualtrics.com/SE/?SID=SV_55sYYdtY1NhTTgN&qs=nist-high
  Help:
    Description: For assistance or questions regarding this quickstart please email compliance-accelerator@amazon.com
    Value: ''

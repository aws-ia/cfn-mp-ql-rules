AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  McAfee-ePO Management Console Stack which manages the application server infrastructure components.
Metadata:
  LICENSE: Apache License Version 2.0
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: McAfee ePolicy Orchestrator Platform Configuration
        Parameters:
          - Environment
          - SubDomainName
          - KeyPairName
      - Label:
          default: Peer-Parent Stack Configuration
        Parameters:
          - ParentStack
          - BaseStack
      - Label:
          default: On-Premise Domain Configuration
        Parameters:
          - OnPremiseDomainName
          - OnPremiseServerDNS
      - Label:
          default: ePO Application Server Configuration
        Parameters:
          - UsePreviousValue
          - EPOImageId
          - EPOLicenseKey
          - EPOAdminUserName
          - EPOAdminPassword
          - ConfirmEPOAdminPassword
          - EPOPassphraseDR
          - ConfirmEPOPassphraseDR
          - EPOConsolePort
          - EPOELBCertificateARN
          - EPOAccessCIDR
          - EPOInstanceType
          - EPOInstanceSize
          - EPODatabaseName
          - EPOBuildVersion
      - Label:
          default: ePO Database Configuration
        Parameters:
          - DBMasterUsername
          - DBMasterUserPassword
          - ConfirmDBMasterUserPassword
          - DBInstanceIdentifier
      - Label:
          default: AH Stack Configuration
        Parameters:
          - AHPort
          - ClientAccessCIDR
      - Label:
          default: Administration Configuration
        Parameters:
          - AdminEmailAddress
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      Environment:
        default: Deployment Environment
      SubDomainName:
        default: Sub Domain Name
      KeyPairName:
        default: AWS Key Pair Name
      ParentStack:
        default: Parent Stack
      BaseStack:
        default: Base Stack
      OnPremiseDomainName:
        default: On Premises Domain Name
      OnPremiseServerDNS:
        default: On Premises Server DNS
      UsePreviousValue:
        default: Use Previous Value
      EPOImageId:
        default: Image ID
      EPOLicenseKey:
        default: License Key
      EPOAdminUserName:
        default: Admin Username
      EPOAdminPassword:
        default: Admin Password
      ConfirmEPOAdminPassword:
        default: Confirm Admin Password
      EPOPassphraseDR:
        default: DR Passphrase
      ConfirmEPOPassphraseDR:
        default: Confirm DR Passphrase
      EPOConsolePort:
        default: Console Port
      EPOELBCertificateARN:
        default: Load Balancer Certificate ARN
      EPOAccessCidr:
        default: Access CIDR
      EPOInstanceType:
        default: Instance Type
      EPOInstanceSize:
        default: Allocated Storage
      EPODatabaseName:
        default: Database Name
      EPOBuildVersion:
        default: Build Version
      DBMasterUsername:
        default: DB Master Username
      DBMasterUserPassword:
        default: DB Master Password
      ConfirmDBMasterUserPassword:
        default: Confirm DB Master Password
      DBInstanceIdentifier:
        default: DB Instance Identifier
      AHPort:
        default: AH Port
      ClientAccessCIDR:
        default: External Access CIDR
      AdminEmailAddress:
        default: Operator Email
      QSS3BucketName:
        default: S3 Bucket Name
      QSS3KeyPrefix:
        default: S3 Key Prefix
Parameters:
  Environment:
    AllowedValues:
      - 'Production'
      - 'Development'
    Default: 'Production'
    Description: What is the targeted deployment environment?
    Type: String
  SubDomainName:
    Description: >-
      The non-existant sub domain name to be used for managment solution. (e.g. manage.mcafee.com ). We recommend either to register AWS Route 53 domain name so that public DNS records can be propagated automatically OR add the sub domain Name Server(NS) records into your main domain server.
    Default: ''
    MaxLength: 256
    Type: String
  KeyPairName:
    Description: The name of an existing public/private key pair, which allows you to securely connect to your instance after it launches.
    Type: AWS::EC2::KeyPair::KeyName
  ParentStack:
    Description: Parent stack name by which pipeline stack is deriving if any.
    MinLength: 1
    MaxLength: 256
    Type: String
  BaseStack:
    Description: Base stack name by which pipeline stack is deriving if any.
    MinLength: 1
    MaxLength: 256
    Type: String
  OnPremiseDomainName:
    AllowedPattern: ^$|^(?!.{256})([a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]\.){1,}([a-zA-Z]{2,8})$
    Description: >-
      [Optional] The on-premises domain name that you want to resolve from inside the VPC (e.g. mcafee.com). This is required for DNS resolution between the ePO instance in the VPC and on-premises services like LDAP(ldap.mcafee.com). Note: This is only required if you are planning to use Active Directory and if you are planning to use a domain name instead of an IP address for the LDAP server.
    Default: ''
    Type: String
  OnPremiseServerDNS:
    Default: ''
    Description: >-
      [Optional] The on-premises DNS (e.g. 192.168.1.1) that will be used to resolve the domain name queries. This is required for DNS resolution between the ePO instance in VPC and services like LDAP(ldap.mcafee.com). Note: This is only required if you are planning to use Active Directory if you are planning to use a domain name instead of an IP address for the LDAP server.
    MaxLength: 256
    Type: String
  UsePreviousValue:
    Default: 1
    Description: Use existing ePO Instance details like ImageId.
    Type: String
  EPOImageId:
    Type: String
    Description: ePO AMI ID, starts with ami-*.
    MinLength: 1
    MaxLength: 64
  EPOLicenseKey:
    Default: ''
    Description: Enter in your ePO license key (xxx-xxx-xxx-xxxx).  If no license key is entered, environment will launch in evaluation mode.
    Type: String
  EPOAdminUserName:
    Description: The global administrator username for ePO Console Access.
    MaxLength: 256
    MinLength: 2
    Type: String
  EPOAdminPassword:
    AllowedPattern: '((?=.*\d)(?=.*\W)(?!.*\")(?!.*\\)(?!.*\s).{8,256})'
    ConstraintDescription: Must be minimum of 8 characters and contain alpha, numeric, and a special character but must not contain backslashes (\) or spaces or any double quotes (")'.
    Description: 'The administrator password for ePO Console Access.  Must be a minimum of 8 characters and contain alpha, numeric, and a special character.'
    MaxLength: 256
    MinLength: 8
    NoEcho: true
    Type: String
  ConfirmEPOAdminPassword:
    AllowedPattern: '((?=.*\d)(?=.*\W)(?!.*\")(?!.*\\)(?!.*\s).{8,256})'
    ConstraintDescription: Must be minimum of 8 characters and contain alpha, numeric, and a special character but must not contain backslashes (\) or spaces or any double quotes (")'.
    Description: 'Create a global administrator password for McAfee ePO console login. Must be a minimum of 8 characters and contain alpha, numeric, and a special character.'
    MaxLength: 256
    MinLength: 8
    NoEcho: true
    Type: String
  EPOPassphraseDR:
    AllowedPattern: '^[^\"\\\s]*$'
    ConstraintDescription: 'It must be 14 to 200 characters in length. It must not contain backslashes (\) or spaces or any double quotes (")'
    Description: 'The Keystore encryption password required for disaster recovery. Server recovery passphrase must be 14 to 200 characters in length. It must not contain backslashes (\) or spaces or any double quotes (")'
    MaxLength: 200
    MinLength: 14
    NoEcho: true
    Type: String
  ConfirmEPOPassphraseDR:
    AllowedPattern: '^[^\"\\\s]*$'
    ConstraintDescription: 'It must be 14 to 200 characters in length. It must not contain backslashes (\) or spaces or any double quotes (")'
    Description: 'Create a keystore encryption passphrase. This is required for disaster recovery. Server recovery passphrase must be 14 to 200 characters in length. It must not contain backslashes (\) or spaces or any double quotes (")'
    MaxLength: 200
    MinLength: 14
    NoEcho: true
    Type: String
  EPOConsolePort:
    Default: '8443'
    Description: The secure port number to access the ePO console.
    MinLength: 1
    MaxLength: 64
    Type: String
  EPOELBCertificateARN:
    AllowedPattern: ^$|((arn:aws:)|(arn:aws-us-gov:))([a-z])([a-z0-9/:-])*([a-z0-9])$
    Default: ''
    Description: >-
      [ Optional ] ARN of the certificate stored in  Amazon Certifcate Manager(ACM) or imported in AWS IAM. Generally the certificate associated with the sub domain needs to be presented. Certificate will be attached with ePO load balancer. e.g., arn:aws:*:us-west-1:*:certificate/* or arn:aws-us-gov:*:us-west-1:*:certificate/* .
    MaxLength: 256
    Type: String
  EPOAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: >-
      CIDR block that's allowed external access to the ePO Console. e.g., x.x.x.x/16-28. We recommend that you set this value to a trusted CIDR block. For example, you might want to restrict access to your corporate network.
    Type: String
  EPOInstanceType:
    Default: 'c4.large'
    Type: String
    Description: EPO instance type, must be valid instance size for the region.
  EPOInstanceSize:
    Default: '512'
    Type: String
    Description: Allocated disk storage for ePO Instance.
  EPODatabaseName:
    Default: epo-hosted-db
    Type: String
    Description: EPO Database name.
  EPOBuildVersion:
    Default: '5.10.0.2000'
    Type: String
    Description: EPO version with major.minor.patch.build-number
  DBMasterUsername:
    Description: Login ID for the master user for database, it must contain from 2 to 8 characters.
    MaxLength: 8
    MinLength: 2
    Type: String
  DBMasterUserPassword:
    AllowedPattern: '[^@\/\"]+'
    ConstraintDescription: It can contain any printable ASCII character except "/", """, or "@". Must contain from 8 to 255 characters
    Description: >-
      The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@". Must contain from 8 to 255 characters
    MaxLength: 255
    MinLength: 8
    NoEcho: true
    Type: String
  ConfirmDBMasterUserPassword:
    AllowedPattern: '[^@\/\"]+'
    ConstraintDescription: It can contain any printable ASCII character except "/", """, or "@". Must contain from 8 to 255 characters
    Description: >-
      Create a password for the master user for the database. This password can contain any printable ASCII character except "/", """, or "@". Must contain from 8 to 255 characters
    MaxLength: 255
    MinLength: 8
    NoEcho: true
    Type: String
  DBInstanceIdentifier:
    Default: ''
    MaxLength: 512
    Description: Database instance identifier unique for this region.
    Type: String
  AHPort:
    Default: '443'
    Description: The agent server communication(ASC) port used by the McAfee Agent to securely communicate to server.
    MinLength: 1
    MaxLength: 64
    Type: String
  ClientAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: >-
      CIDR block that is allowed to connect from on premise endpoints to Agent Handler's/DXL Brokers. e.g., x.x.x.x/16-28.
    Type: String
  AdminEmailAddress:
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,8}|[0-9]{1,3})(\]?)
    ConstraintDescription: Must be a valid email address.
    Description: Email address that notifications of any operations will be sent. In addition this will be used for tagging of ownership of resources.
    Type: String
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-). It cannot start or end with a hyphen (-) or period (.).
    Default: aws-ia
    Description: >-
      S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-). It cannot start or end with a hyphen (-) or period (.).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). Prefix cannot start with a slash but must end with a slash unless it is the empty string.'
    Default: quickstart-mcafee-epo/
    Description: >-
      The S3 key name prefix used to simulate a folder for your copy of Quick Start assets, if you decide to customize or extend the Quick Start for your own use.This prefix can include numbers, lowercase letters, uppercase letters, hyphens, and forward slashes.'
    Type: String
Conditions:
  cCreateELBCertificate: !Equals [!Ref 'EPOELBCertificateARN', '']
  cUseELBCertificate: !Not [!Equals [!Ref 'EPOELBCertificateARN', '']]
  cIsProduction: !Equals [!Ref 'Environment', 'Production']
  cGovCloudCondition: !Or
    - !Equals [!Ref 'AWS::Region', us-gov-west-1]
    - !Equals [!Ref 'AWS::Region', us-gov-east-1]
  cNotGovCloudCondition: !Not [!Condition cGovCloudCondition]
Rules:
  MatchPassword:
    Assertions:
      - Assert: !Equals
          - !Ref EPOAdminPassword
          - !Ref ConfirmEPOAdminPassword
        AssertDescription: ePO Admin passwords do not match.
      - Assert: !Equals
          - !Ref EPOPassphraseDR
          - !Ref ConfirmEPOPassphraseDR
        AssertDescription: ePO DR Passphrases do not match.
      - Assert: !Equals
          - !Ref DBMasterUserPassword
          - !Ref ConfirmDBMasterUserPassword
        AssertDescription: DB Master Passwords do not match.
Resources:
  # ePO pre deploy action which sets up the parameter store for layered stack approach
  # and additonal parameters into parameter store for ePO provisioning
  EPOPreDeployAction:
    Type: Custom::EPOPreDeployAction
    Properties:
      ServiceToken:
        Fn::ImportValue: !Sub ${BaseStack}-PreDeployLambda
      ParameterStoreIdentifier: !Sub /mcafee/${ParentStack}
      Parameters: !Sub
        - |
          {
            "EPOAdminUserName": {"Type": "String","Value": "${EPOAdminUserName}","Description": "ePO admin user name."},
            "EPOAdminPassword": {"Type": "SecureString","Value": "${EPOAdminPassword}","Description": "ePO admin user password."},
            "ConfirmEPOAdminPassword": {"Type": "SecureString","Value": "${ConfirmEPOAdminPassword}","Description": "ePO admin user password."},
            "EPOLicenseKey": {"Type": "SecureString","Value": "${EPOLicenseKey}","Description": "ePO license key."},
            "EPOPassphraseDR": {"Type": "SecureString","Value": "${EPOPassphraseDR}","Description": "ePO DR Passphrase."},
            "ConfirmEPOPassphraseDR": {"Type": "SecureString","Value": "${ConfirmEPOPassphraseDR}","Description": "ePO DR Passphrase."},
            "EPOConsolePort": {"Type": "String","Value": "${EPOConsolePort}","Description": "ePO console port."},
            "EPOServerDNS": {"Type": "String","Value": "${EPOServerDNSName}","Description": "ePO server dns."},
            "EPODatabaseName": {"Type": "String","Value": "${EPODatabaseName}","Description": "ePO database name."},
            "DBMasterUsername": {"Type": "String","Value": "${DBMasterUsername}","Description": "DB master user name."},
            "DBMasterUserPassword": {"Type": "SecureString","Value": "${DBMasterUserPassword}","Description": "DB master user Password."},
            "ConfirmDBMasterUserPassword": {"Type": "SecureString","Value": "${ConfirmDBMasterUserPassword}","Description": "DB master user Password."},
            "OnPremiseDomainName": {"Type": "String","Value": "${OnPremiseDomainName}","Description": "On Premise domain name."},
            "OnPremiseServerDNS": {"Type": "String","Value": "${OnPremiseServerDNS}","Description": "On Premise DNS server IP."}
          }
        - EPOServerDNSName: !GetAtt [EPOEC2NetworkInterface, PrimaryPrivateIpAddress]
  # Sync ePO instance parameters lambda role
  SyncEPOInstanceParametersLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: SyncEPOInstanceParametersLambdaRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:DeleteParameter
                Resource: !Sub
                  - arn:${Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
                  - Partition: !If [cGovCloudCondition, aws-us-gov, aws]
  # Sync ePO instance parameters lambda
  SyncEPOInstanceParametersLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub ${QSS3BucketName}
        S3Key: !Sub ${QSS3KeyPrefix}functions/packages/modules/epo/sync-epo-instance-parameters.zip
      Description: Lambda function to get ePO instance parameters based on stack persist condtion
      Handler: sync-epo-instance-parameters.handler
      Role: !GetAtt SyncEPOInstanceParametersLambdaRole.Arn
      Runtime: python3.6
      Timeout: 120
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SyncEPOInstanceParametersLambda
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-ApplicationServer
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}
  # Sync ePO instance parameters lambda version
  SyncEPOInstanceParametersLambdaVersion1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref SyncEPOInstanceParametersLambda
  # Sync ePO instance parameters lambda log group
  SyncEPOInstanceParametersLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: SyncEPOInstanceParametersLambda
    Properties:
      LogGroupName: !Join
        - ''
        - - '/aws/lambda/'
          - !Ref SyncEPOInstanceParametersLambda
      RetentionInDays: 7
  # Sync ePO instance parameters custom action
  SyncEPOInstanceParametersAction:
    Type: Custom::SyncEPOInstanceParametersAction
    DependsOn: SyncEPOInstanceParametersLambdaLogGroup
    Properties:
      ServiceToken: !GetAtt SyncEPOInstanceParametersLambda.Arn
      EPOImageIdParam: !Sub /mcafee/${ParentStack}/EPOImageId
      EPOInstanceTypeParam: !Sub /mcafee/${ParentStack}/EPOInstanceType
      EPOInstanceSizeParam: !Sub /mcafee/${ParentStack}/EPOInstanceSize
      UsePreviousValue: ${UsePreviousValue}
      PassedParameters: !Sub >
        {

          "EPOImageId": "${EPOImageId}",
          "EPOInstanceType": "${EPOInstanceType}",
          "EPOInstanceSize": "${EPOInstanceSize}"
        }

  # ePO Instance internal security group
  EPOInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ePO Instance.
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref EPOConsolePort
          ToPort: !Ref EPOConsolePort
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PublicSubnet1CIDR
        - IpProtocol: tcp
          FromPort: !Ref EPOConsolePort
          ToPort: !Ref EPOConsolePort
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PublicSubnet2CIDR
        - IpProtocol: tcp
          FromPort: !Ref EPOConsolePort
          ToPort: !Ref EPOConsolePort
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PrivateSubnet1CIDR
        - IpProtocol: tcp
          FromPort: !Ref EPOConsolePort
          ToPort: !Ref EPOConsolePort
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PrivateSubnet2CIDR
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PublicSubnet1CIDR
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PublicSubnet2CIDR
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PrivateSubnet1CIDR
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PrivateSubnet2CIDR
        - IpProtocol: tcp
          FromPort: 8444
          ToPort: 8444
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PublicSubnet1CIDR
        - IpProtocol: tcp
          FromPort: 8444
          ToPort: 8444
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PublicSubnet2CIDR
        - IpProtocol: tcp
          FromPort: 8444
          ToPort: 8444
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PrivateSubnet1CIDR
        - IpProtocol: tcp
          FromPort: 8444
          ToPort: 8444
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PrivateSubnet2CIDR
        - IpProtocol: tcp
          FromPort: !Ref AHPort
          ToPort: !Ref AHPort
          CidrIp: !Ref ClientAccessCIDR
        - IpProtocol: tcp
          FromPort: !Ref AHPort
          ToPort: !Ref AHPort
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PublicSubnet1CIDR
        - IpProtocol: tcp
          FromPort: !Ref AHPort
          ToPort: !Ref AHPort
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PublicSubnet2CIDR
        - IpProtocol: tcp
          FromPort: !Ref AHPort
          ToPort: !Ref AHPort
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PrivateSubnet1CIDR
        - IpProtocol: tcp
          FromPort: !Ref AHPort
          ToPort: !Ref AHPort
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PrivateSubnet2CIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PublicSubnet1CIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PublicSubnet2CIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PrivateSubnet1CIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Fn::ImportValue: !Sub ${BaseStack}-PrivateSubnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EPOInstanceSecurityGroup
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-ApplicationServer
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}
      VpcId:
        Fn::ImportValue: !Sub ${BaseStack}-VPCID
  # EC2 instance role
  EPOEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: EPOEC2Role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudformation:Describe*
                  - rds:Describe*
                Resource: '*'
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                  - ssm:GetParametersByPath
                  - ssm:DescribeAssociation
                  - ssm:GetDeployablePatchSnapshotForInstance
                  - ssm:GetDocument
                  - ssm:GetManifest
                  - ssm:ListAssociations
                  - ssm:ListInstanceAssociations
                  - ssm:PutInventory
                  - ssm:PutComplianceItems
                  - ssm:PutConfigurePackageResult
                  - ssm:UpdateAssociationStatus
                  - ssm:UpdateInstanceAssociationStatus
                  - ssm:UpdateInstanceInformation
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2messages:AcknowledgeMessage
                  - ec2messages:DeleteMessage
                  - ec2messages:FailMessage
                  - ec2messages:GetEndpoint
                  - ec2messages:GetMessages
                  - ec2messages:SendReply
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DescribeInstanceStatus
                Resource: '*'
  # EC2 Instance Profile
  EPOEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EPOEC2Role
  # Network Interface for ePO on private subnet 1
  EPOEC2NetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Private static IP for ePO in private subnet 1
      GroupSet:
        - !Ref EPOELBSecurityGroup
        - !Ref EPOInstanceSecurityGroup
        - Fn::ImportValue: !Sub ${BaseStack}-RDPAdminSecurityGroup
      SourceDestCheck: 'false'
      SubnetId:
        Fn::ImportValue: !Sub ${BaseStack}-PrivateSubnet1ID
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EPOEC2NetworkInterface
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-ApplicationServer
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}
  # ePO EC2 Instance
  EPOEC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      Version: !Ref EPOBuildVersion
      AWS::CloudFormation::Init:
        configSets:
          default:
            - provison_cfn
            - provison_epo
        provison_cfn:
          files:
            c:\Users\Administrator\.aws\config:
              content: !Sub |
                [default]
                  output=json
                  region=${AWS::Region}
            c:\cfn\cfn-hup.conf:
              content: !Sub |
                [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.epo.Metadata.AWS::CloudFormation::Init
                  action=cfn-init.exe -v -s ${AWS::StackName} -r EPOEC2Instance --region ${AWS::Region}
            # No harm to add this entry in Non-Gov cloud env
            c:\Windows\System32\drivers\etc\hosts:
              content: !Join
                - ' '
                - - !GetAtt [EPOEC2NetworkInterface, PrimaryPrivateIpAddress]
                  - !If
                    - cNotGovCloudCondition
                    - !Sub epo.${SubDomainName}
                    - !GetAtt EPOLoadBalancer.DNSName
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
        provison_epo:
          commands:
            0setup:
              command: !Join
                - ' '
                - - !Sub cwa-config.bat epo ${AWS::Region} McAfee-ePO ${ParentStack}
                  - Fn::ImportValue: !Sub ${BaseStack}-ePOLogGroup
              cwd: c:\provision\scripts\
              waitAfterCompletion: '0'
            1setup:
              command: !Join
                - ' '
                - - !Sub node provision.js --platform aws --component epo --region ${AWS::Region} --stackname ${AWS::StackName} --rootstackname ${ParentStack} --paramspath /mcafee/${ParentStack}
                  - !Sub --db.username ${DBMasterUsername} --db.database ${EPODatabaseName} --db.identifier ${DBInstanceIdentifier} --epo.serverdns
                  - !If
                    - cNotGovCloudCondition
                    - !Sub epo.${SubDomainName}
                    - !GetAtt EPOLoadBalancer.DNSName
                  - !Sub --epo.port 8080 --epo.secure_port ${EPOConsolePort} --ah.port ${AHPort} --threadsperchild 250
              cwd: c:\provision\
              waitAfterCompletion: '0'
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !GetAtt [SyncEPOInstanceParametersAction, EPOInstanceSize]
      IamInstanceProfile: !Ref EPOEC2InstanceProfile
      ImageId: !GetAtt [SyncEPOInstanceParametersAction, EPOImageId]
      InstanceType: !GetAtt [SyncEPOInstanceParametersAction, EPOInstanceType]
      KeyName: !Ref KeyPairName
      Monitoring: !If
        - cIsProduction
        - true
        - false
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref EPOEC2NetworkInterface
          DeviceIndex: 0
      Tags:
        - Key: Name
          Value: !Sub ${ParentStack}-ePO
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-ApplicationServer
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT90M
  # ePO AWS ELB security group
  EPOELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ePO AWS Elastic Load Balancer.
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref EPOConsolePort
          ToPort: !Ref EPOConsolePort
          CidrIp: !Ref EPOAccessCIDR
        - IpProtocol: tcp
          FromPort: !Ref AHPort
          ToPort: !Ref AHPort
          CidrIp: !Ref EPOAccessCIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EPOELBSecurityGroup
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-ApplicationServer
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}
      VpcId:
        Fn::ImportValue: !Sub ${BaseStack}-VPCID
  # ePO AWS Application Load Balancer
  EPOLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value:
            Fn::ImportValue: !Sub ${BaseStack}-DataStore
        - Key: access_logs.s3.prefix
          Value: 'logs/elb/epo'
        - Key: idle_timeout.timeout_seconds
          Value: 600
      SecurityGroups:
        - !Ref EPOELBSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${BaseStack}-PublicSubnet1ID
        - Fn::ImportValue: !Sub ${BaseStack}-PublicSubnet2ID
      Type: application
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EPOLoadBalancer
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-ApplicationServer
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}
  # ePO Application Load Balancer Listener with user provided certificate
  EPOLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: cUseELBCertificate
    Properties:
      Certificates:
        - CertificateArn: !Ref EPOELBCertificateARN
      DefaultActions:
        - TargetGroupArn: !Ref EPOTargetGroup
          Type: forward
      LoadBalancerArn: !Ref EPOLoadBalancer
      Port: !Ref EPOConsolePort
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
  # ePO Application Load Balancer Listener with self signed certificate
  # NOTE: For resource creation, have the protocol as HTTP and in the post epo deploy we will change the protocol when we
  # can create the certificate and attach it to the agent handler load balancer
  EPOLoadBalancerListenerWithSelfSignedCert:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: cCreateELBCertificate
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref EPOTargetGroup
          Type: forward
      LoadBalancerArn: !Ref EPOLoadBalancer
      Port: !Ref EPOConsolePort
      Protocol: HTTP
  # ePO Application load balancer target group
  EPOTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-399
      Port: 8080
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 300
      Targets:
        - Id: !Ref EPOEC2Instance
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub ${BaseStack}-VPCID
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EPOTargetGroup
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-ApplicationServer
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}
  # ePO Application Load Balancer Local AH Listener
  EPOLoadBalancerLocalAHListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: cUseELBCertificate
    Properties:
      Certificates:
        - CertificateArn: !Ref EPOELBCertificateARN
      DefaultActions:
        - TargetGroupArn: !Ref EPOLocalAHTargetGroup
          Type: forward
      LoadBalancerArn: !Ref EPOLoadBalancer
      Port: !Ref AHPort
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
  EPOLoadBalancerLocalAHListenerWithSelfSignedCert:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: cCreateELBCertificate
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref EPOLocalAHTargetGroup
          Type: forward
      LoadBalancerArn: !Ref EPOLoadBalancer
      Port: !Ref AHPort
      Protocol: HTTP
  # ePO Application load balancer local AH target group
  EPOLocalAHTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPort: 80
      HealthCheckPath: /Software/sitestat.xml
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-399
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 300
      Targets:
        - Id: !Ref EPOEC2Instance
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub ${BaseStack}-VPCID
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EPOLocalAHTargetGroup
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-ApplicationServer
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}
  # ePO Record Set
  EPOR53RecordSet:
    Type: AWS::Route53::RecordSet
    Condition: cNotGovCloudCondition
    Properties:
      AliasTarget:
        DNSName: !GetAtt EPOLoadBalancer.DNSName
        HostedZoneId: !GetAtt EPOLoadBalancer.CanonicalHostedZoneID
      Comment: External ePO DNS RecordSet.
      HostedZoneId:
        Fn::ImportValue: !Sub ${BaseStack}-R53PublicHostedZone
      Name: !Sub epo.${SubDomainName}
      Type: A
  # ePO ec2 SNS topic name for recovery and reboot
  EPOEC2SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ePO-Cloudwatch-Alarms
      TopicName: !Sub ${AWS::StackName}-ePO-Cloudwatch-Alarms
      Subscription:
        - Endpoint: !Ref AdminEmailAddress
          Protocol: email
  # ePO ec2 cloudwatch alarm role
  EPOEC2CloudwatchAlarmRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - swf.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub
          - arn:${Partition}:iam::aws:policy/CloudWatchActionsEC2Access
          - Partition: !If [cGovCloudCondition, aws-us-gov, aws]
      Path: /actions/
  # ePO ec2 system status check and recover
  EPOEC2SystemStatusCheck:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - EPOEC2Instance
      - EPOEC2SnsTopic
    Properties:
      AlarmDescription: Trigger a recovery when instance status check fails for 5 consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 5
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
        - !Sub
          - 'arn:${Partition}:automate:${AWS::Region}:ec2:recover'
          - Partition: !If [cGovCloudCondition, aws-us-gov, aws]
        - !Ref EPOEC2SnsTopic
      OKActions:
        - !Ref EPOEC2SnsTopic
      Dimensions:
        - Name: InstanceId
          Value: !Ref EPOEC2Instance
  # ePO EC2 instance satus check
  EPOEC2InstanceStatusCheck:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - EPOEC2Instance
      - EPOEC2SnsTopic
      - EPOEC2CloudwatchAlarmRole
    Properties:
      AlarmDescription: Trigger a restart when instance status check fails for 5 consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_Instance
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 5
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      AlarmActions:
        - !Sub
          - 'arn:${Partition}:swf:${AWS::Region}:${AWS::AccountId}:action/actions/AWS_EC2.InstanceId.Reboot/1.0'
          - Partition: !If [cGovCloudCondition, aws-us-gov, aws]
        - !Ref EPOEC2SnsTopic
      OKActions:
        - !Ref EPOEC2SnsTopic
      Dimensions:
        - Name: InstanceId
          Value: !Ref EPOEC2Instance
  # AMI backup management Lambda IAM role
  EPOAMIBackupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: EPOAMIBackupLambdaRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                  - ec2:CreateImage
                  - ec2:DescribeImages
                  - ec2:DeregisterImage
                Resource: '*'
  # Create AMI lambda log group
  EPOCreateAMIBackupLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: EPOCreateAMIBackupLambda
    Properties:
      LogGroupName: !Join
        - ''
        - - '/aws/lambda/'
          - !Ref EPOCreateAMIBackupLambda
      RetentionInDays: 7
  # Create AMI lambda, Accepts parameter AwsRegion, Owner, InstanceId, ImageId, RetentionPeriodInDays
  EPOCreateAMIBackupLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub ${QSS3BucketName}
        S3Key: !Sub ${QSS3KeyPrefix}functions/packages/modules/create-ami-backup.zip
      Description: Lambda function that creates AMI's for ASG and vpc-id filters
      Handler: create-ami-backup.handler
      MemorySize: 128
      Role: !GetAtt EPOAMIBackupLambdaRole.Arn
      Runtime: python3.6
      Timeout: 300
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EPOCreateAMIBackupLambda
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-ApplicationServer
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}
  # Create AMI lambda version
  EPOCreateAMIBackupVersion1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref EPOCreateAMIBackupLambda
  # Delete AMI lambda,accepts parameter AwsRegion, InstanceID, ImageId
  EPODeleteAMIBackupLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub ${QSS3BucketName}
        S3Key: !Sub ${QSS3KeyPrefix}functions/packages/modules/delete-ami-backup.zip
      Description: A Lambda function that cleans up AMI's at their Retention date
      Handler: delete-ami-backup.handler
      MemorySize: 128
      Role: !GetAtt EPOAMIBackupLambdaRole.Arn
      Runtime: python3.6
      Timeout: 300
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EPODeleteAMIBackupLambda
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-ApplicationServer
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}
  # Delete AMI backup lambda version
  EPODeleteAMIBackupVersion1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref EPODeleteAMIBackupLambda
  # Delete AMI lambda log group
  EPODeleteAMIBackupLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: EPODeleteAMIBackupLambda
    Properties:
      LogGroupName: !Join
        - ''
        - - '/aws/lambda/'
          - !Ref EPODeleteAMIBackupLambda
      RetentionInDays: 7
  # Create AMI AWS event rule, which runs every day
  EPOCreateAMIBackupScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Run the AMI creation script daily
      ScheduleExpression: cron(0 12 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt EPOCreateAMIBackupLambda.Arn
          Id: !Sub ${ParentStack}-epo
          Input:
            "Fn::Join":
              - "\n"
              - - "{"
                - "Fn::Join":
                    - " "
                    - - '"mcafee:cloudformation:stack-name":'
                      - "Fn::Join": ["", ['"', !Ref ParentStack, '"']]
                      - ','
                - "Fn::Join":
                    - " "
                    - - '"Owner":'
                      - "Fn::Join": ["", ['"', !Ref AdminEmailAddress, '"']]
                      - ','
                - "Fn::Join":
                    - " "
                    - - '"VpcId":'
                      - "Fn::Join": ["", ['"', {'Fn::ImportValue': !Sub '${BaseStack}-VPCID'}, '"']]
                      - ','
                - "Fn::Join":
                    - " "
                    - - '"InstanceID":'
                      - "Fn::Join": ["", ['"', !Ref EPOEC2Instance, '"']]
                      - ','
                - "Fn::Join":
                    - " "
                    - - '"RetentionPeriodInDays":'
                      - '"7"'
                - "}"
  # Permissions to create AMI Lambda functions to be run from CloudWatch events
  EPOPermissionForEventsToInvokeCreateAMILambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt EPOCreateAMIBackupLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EPOCreateAMIBackupLambda.Arn
  # Run the delete ami Lambda functions every day
  EPODeleteAMIBackupScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Run the AMI backup delete script daily
      ScheduleExpression: cron(0 12 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt EPODeleteAMIBackupLambda.Arn
          Id: !Sub ${ParentStack}-epo
          Input:
            "Fn::Join":
              - "\n"
              - - "{"
                - "Fn::Join":
                    - " "
                    - - '"mcafee:cloudformation:stack-name":'
                      - "Fn::Join": ["", ['"', !Ref ParentStack, '"']]
                      - ','
                - "Fn::Join":
                    - " "
                    - - '"Owner":'
                      - "Fn::Join": ["", ['"', !Ref AdminEmailAddress, '"']]
                      - ','
                - "Fn::Join":
                    - " "
                    - - '"VpcId":'
                      - "Fn::Join": ["", ['"', {'Fn::ImportValue': !Sub '${BaseStack}-VPCID'}, '"']]
                      - ','
                - "Fn::Join":
                    - " "
                    - - '"InstanceID":'
                      - "Fn::Join": ["", ['"', !Ref EPOEC2Instance, '"']]
                - "}"
  # Permissions to delete ami Lambda functions to be run from CloudWatch events
  EPOPermissionForEventsToInvokeDeleteAMILambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt EPODeleteAMIBackupLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EPODeleteAMIBackupLambda.Arn
      # ePO Post deploy lambda role
  EPOPostDeployLambdaRole:
    Type: AWS::IAM::Role
    Condition: cCreateELBCertificate
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: EPOPostDeployLambdaRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:DeleteServerCertificate
                  - iam:UploadServerCertificate
                  - iam:GetServerCertificate
                Resource: !Sub
                  - 'arn:${Partition}:iam::${AWS::AccountId}:server-certificate/EPO_ELB_${ParentStack}'
                  - Partition: !If [cGovCloudCondition, aws-us-gov, aws]
              - Effect: Allow
                Action:
                  - elasticloadbalancing:ModifyListener
                Resource:
                  - !Ref EPOLoadBalancerListenerWithSelfSignedCert
                  - !Ref EPOLoadBalancerLocalAHListenerWithSelfSignedCert
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub
                  - arn:${Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
                  - Partition: !If [cGovCloudCondition, aws-us-gov, aws]
  # ePO Post deploy lambda
  EPOPostDeployLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: cCreateELBCertificate
    Properties:
      GroupDescription: Security group for PostDeployLambda.
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EPOPostDeployLambdaSecurityGroup
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-ApplicationServer
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}
      VpcId:
        Fn::ImportValue: !Sub '${BaseStack}-VPCID'
  EPOPostDeployLambda:
    Type: AWS::Lambda::Function
    Condition: cCreateELBCertificate
    Properties:
      Code:
        S3Bucket: !Sub ${QSS3BucketName}
        S3Key: !Sub ${QSS3KeyPrefix}functions/packages/modules/epo/post-epo-deploy.zip
      Description: Lambda function to finish up post deployment epo tasks.
      Handler: post-epo-deploy.handler
      Role: !GetAtt EPOPostDeployLambdaRole.Arn
      Runtime: python3.6
      Timeout: 300
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EPOPostDeployLambda
        - Key: Owner
          Value: !Ref AdminEmailAddress
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: McAfee-ePO-ApplicationServer
        - Key: Solution
          Value: McAfee-ePO
        - Key: mcafee:cloudformation:stack-name
          Value: !Sub ${ParentStack}
      VpcConfig:
        SecurityGroupIds:
          - !Ref EPOPostDeployLambdaSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub ${BaseStack}-PrivateSubnet1ID
          - Fn::ImportValue: !Sub ${BaseStack}-PrivateSubnet2ID
  # ePO Post deploylambda version
  EPOPostDeployLambdaVersion1:
    Type: AWS::Lambda::Version
    Condition: cCreateELBCertificate
    Properties:
      FunctionName: !Ref EPOPostDeployLambda
  # ePO post deploy lambda log group
  EPOPostDeployLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: cCreateELBCertificate
    DependsOn: EPOPostDeployLambda
    Properties:
      LogGroupName: !Join
        - ''
        - - '/aws/lambda/'
          - !Ref EPOPostDeployLambda
      RetentionInDays: 7
  # ePO post deploy custom action
  EPOPostDeployAction:
    Type: Custom::EPOPostDeployAction
    Condition: cCreateELBCertificate
    DependsOn: [EPOPostDeployLambdaLogGroup, EPODeleteResourcesAssociatedWithLambdaCustomAction]
    Properties:
      ServiceToken: !GetAtt EPOPostDeployLambda.Arn
      ParentStack: !Sub ${ParentStack}
      EPOConsoleURL: !GetAtt [EPOEC2NetworkInterface, PrimaryPrivateIpAddress]
      EPOConsolePort: !Sub ${EPOConsolePort}
      EPOHTTPSListenerARN: !Ref EPOLoadBalancerListenerWithSelfSignedCert
      LAHHTTPSListenerARN: !Ref EPOLoadBalancerLocalAHListenerWithSelfSignedCert
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
      ParameterStoreIdentifier: !Sub /mcafee/${ParentStack}
      # Custom action to invoke the delete resources associated with lambda, for now its just ENI associated with security group
  EPODeleteResourcesAssociatedWithLambdaCustomAction:
    Type: Custom::EPODeleteResourcesAssociatedWithLambdaCustomAction
    Condition: cCreateELBCertificate
    Properties:
      ServiceToken:
        Fn::ImportValue: !Sub '${BaseStack}-DeleteResourcesAssociatedWithLambda'
      SecurityGroup: !Ref EPOPostDeployLambdaSecurityGroup
Outputs:
  ePOStackName:
    Description: ePO application server stack name
    Value: !Ref AWS::StackName
  ePOConsoleURL:
    Condition: cNotGovCloudCondition
    Description: McAfee ePO console URL via sub domain name.
    Value: !Join
      - ''
      - - 'https://'
        - !Ref EPOR53RecordSet
        - ':'
        - !Ref EPOConsolePort
  ePOConsoleLBURL:
    Description: McAfee ePO Console URL via Amazon Elastic Load Balancer
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt EPOLoadBalancer.DNSName
        - ':'
        - !Ref EPOConsolePort
  ePOConsolePort:
    Description: ePO Console Port
    Value: !Ref EPOConsolePort
  ePOLoadbalancerName:
    Description: EPO Amazon Elastic Load Balancer
    Value: !GetAtt EPOLoadBalancer.LoadBalancerName
  EPOServerDNSName:
    Description: ePO Server DNS Name
    Value: !If
      - cNotGovCloudCondition
      - !Ref EPOR53RecordSet
      - !GetAtt EPOLoadBalancer.DNSName
  EPOLoadBalancerURL:
    Description: EPO Load Balancer URL
    Value: !GetAtt EPOLoadBalancer.DNSName
  EPOEC2Instance:
    Description: EPO EC2 instance Name
    Value: !Ref EPOEC2Instance
  EPOEC2NetworkInterface:
    Description: Static Private IP for ePO
    Value: !GetAtt [EPOEC2NetworkInterface, PrimaryPrivateIpAddress]
  EPOEC2SystemStatusCheckARN:
    Description: ARN of ePO system check alaram
    Value: !GetAtt [EPOEC2SystemStatusCheck, Arn]
  EPOEC2InstanceStatusCheckARN:
    Description: ARN of ePO instance check alaram
    Value: !GetAtt [EPOEC2InstanceStatusCheck, Arn]

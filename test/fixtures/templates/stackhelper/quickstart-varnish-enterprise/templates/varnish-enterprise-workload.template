---
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This workload template deploys Varnish Enterprise nodes behind an NLB load balancer in two private subnets. The cluster also is configured to use an S3 bucket for storage. ***NOTE*** You must subscribe to the Varnish Enterprise 6 (Ubuntu) AMI HVM from the AWS Marketplace before you launch this template. (qs-1p582k9b1)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - PublicSubnet1ID
          - PublicSubnet2ID
      - Label:
          default: Amazon EC2 Configuration
        Parameters:
          - KeyPairName
          - WorkloadInstanceType
      - Label:
          default: Amazon EFS Configuration
        Parameters:
          - VolumeName
          - MountPoint
      - Label:
          default: VE Workload Nodes Configuration
        Parameters:
          - WorkloadNodesSSHCIDR
          - WorkloadNodesMinSize
          - WorkloadNodesMaxSize
          - WorkloadNodesDesiredCapacity
          - OperatorEmail
          - VarnishSSLCertificateSecretsManagerKey
      - Label:
          default: Varnish Software Configuration
        Parameters:
          - VarnishBackendAddress
          - VarnishBackendProtocol
          - VHAToken
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      KeyPairName:
        default: SSH key name
      OperatorEmail:
        default: Operator email
      PublicSubnet1ID:
        default: Public subnet 1 ID
      PublicSubnet2ID:
        default: Public subnet 2 ID
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      VarnishSSLCertificateSecretsManagerKey:
        default: Secrets Manager key of SSL certificate
      VarnishBackendAddress:
        default: Varnish backend address
      VarnishBackendProtocol:
        default: Varnish backend protocol
      VHAToken:
        default: VHA token string
      VPCID:
        default: VPC ID
      VolumeName:
        default: EFS volume name
      MountPoint:
        default: Linux mount point
      WorkloadInstanceType:
        default: Workload servers instance type
      WorkloadNodesDesiredCapacity:
        default: Workload nodes desired capacity
      WorkloadNodesMaxSize:
        default: Workload nodes maximum size
      WorkloadNodesMinSize:
        default: Workload nodes minimum size
      WorkloadNodesSSHCIDR:
        default: CIDR range used to access the VE nodes
Parameters:
  KeyPairName:
    Description: >-
      Name of an existing EC2 key pair. All instances will launch with this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  OperatorEmail:
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: Must be a valid email address.
    Description: >-
      Email address that notifications of any scaling operations will be sent to.
    Type: String
  PublicSubnet1ID:
    Description: >-
      ID of public subnet 1 in Availability Zone 1 for the ELB load balancer (e.g., subnet-9bc642ac).
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Description: >-
      ID of public subnet 2 in Availability Zone 2 for the ELB load balancer (e.g., subnet-e3246d8e).
    Type: AWS::EC2::Subnet::Id
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-ia
    Description: >-
      S3 bucket name for the Quick Start assets. This string can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Type: String
  VarnishSSLCertificateSecretsManagerKey:
    Description: The AWS Secrets Manager key of an existing SSL certificate to install within Varnish. See Deployment Guide.
    Type: String
    Default: AWS::NoValue
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-varnish-enterprise/
    Description: >-
      S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
    Type: String
  VarnishBackendAddress:
    Description: >-
      Web server backend IP/hostname address. Customized port/TCP can be added after colon (:). For example: 127.0.0.1:80
    Default: 127.0.0.1
    Type: String
  VarnishBackendProtocol:
    AllowedPattern: ^(http|https)$
    ConstraintDescription: Protocol can be either HTTP or HTTPS.
    Description: Internet protocol. It can be either HTTP or HTTPS.
    Default: http
    Type: String
  VHAToken:
    AllowedPattern: ^[0-9a-zA-Z-/_=]*$
    ConstraintDescription: >-
      Varnish High Availability (VHA) Token for VHA agents to do a caching synchronization. The Token can include numbers, lowercase letters, uppercase letters, hyphens (-), underscores (_), equal signs (=), and forward slashes (/).
    Description: >-
      Varnish High Availability (VHA) Token can include numbers, lowercase letters, uppercase letters, hyphens (-), underscores (_), equal signs (=), and forward slashes (/).
    Default: MYTOKEN
    MinLength: '1'
    Type: String
  VolumeName:
    Description: A name to be used for the EFS volume.
    Default: myEFSvolume
    MinLength: '1'
    Type: String
  MountPoint:
    Description: A Linux mount point for workload nodes to mount the EFS volume.
    Default: myEFSvolume
    MinLength: '1'
    Type: String
  VPCID:
    Description: ID of your existing VPC for deployment.
    Type: AWS::EC2::VPC::Id
  WorkloadInstanceType:
    AllowedValues:
      - t2.small
      - t2.medium
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12large
      - m5.24large
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
    ConstraintDescription: Must contain a valid instance type.
    Default: m4.xlarge
    Description: EC2 instance type for the workload instances.
    Type: String
  WorkloadNodesDesiredCapacity:
    Default: '2'
    Description: The desired capacity for the Auto Scaling group of workload nodes.
    Type: String
  WorkloadNodesMaxSize:
    Default: '4'
    Description: The maximum size of the Auto Scaling group of workload nodes.
    Type: String
  WorkloadNodesMinSize:
    Default: '2'
    Description: The minimum size of the Auto Scaling group of workload nodes.
    Type: String
  WorkloadNodesSSHCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|1[0-9]|2[0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/0-32
    Default: '0.0.0.0/0'
    Description: CIDR block for SSH clients.
    Type: String
Rules:
  KeyPairsNotEmpty:
    Assertions:
      - Assert: !Not
          - !EachMemberEquals
            - !RefAll AWS::EC2::KeyPair::KeyName
            - ''
        AssertDescription: All key pair parameters must not be empty
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll AWS::EC2::VPC::Id
        AssertDescription: All subnets must in the VPC
Conditions:
  UserProvidedSSL: !Not [!Equals [!Ref VarnishSSLCertificateSecretsManagerKey, "AWS::NoValue"]]
Mappings:
  AWSAMIRegionMap:
    AMI:
      UBUNTUVE6: ubuntu-18.04-VE6.0.1r5-1
    ap-northeast-1:
      UBUNTUVE6: ami-0d6220fab731c1023
    ap-northeast-2:
      UBUNTUVE6: ami-09f0de653bc501190
    ap-south-1:
      UBUNTUVE6: ami-0d3124ccc375c65af
    ap-southeast-1:
      UBUNTUVE6: ami-0b427c8ebdb22ce0a
    ap-southeast-2:
      UBUNTUVE6: ami-0e93b03052e409ed8
    ca-central-1:
      UBUNTUVE6: ami-09bb69575f5310d8f
    eu-central-1:
      UBUNTUVE6: ami-057e0fb712d14341a
    eu-north-1:
      UBUNTUVE6: ami-1dd45d63
    eu-west-1:
      UBUNTUVE6: ami-01de6eb3fb5024e04
    eu-west-2:
      UBUNTUVE6: ami-0a91cd170519f17b6
    eu-west-3:
      UBUNTUVE6: ami-0d9c8cf10883509dd
    sa-east-1:
      UBUNTUVE6: ami-08b477eb25c1eed1e
    us-east-1:
      UBUNTUVE6: ami-0c27463b6e9453fd1
    us-east-2:
      UBUNTUVE6: ami-0ecddcf4d768accea
    us-west-1:
      UBUNTUVE6: ami-088115b2b9d1593a1
    us-west-2:
      UBUNTUVE6: ami-037859d2ed99107b0
#
# Main resources from here
#
Resources:
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref OperatorEmail
          Protocol: email
          #
          # Network Load Balancer, NLB, related
          #
  PublicNLB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Type: network
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1ID
        - !Ref PublicSubnet2ID
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: true
  NLBListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PublicNLBTargetGroup80
      LoadBalancerArn: !Ref PublicNLB
      Port: 80
      Protocol: TCP
  NLBListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PublicNLBTargetGroup443
      LoadBalancerArn: !Ref PublicNLB
      Port: 443
      Protocol: TCP
  PublicNLBTargetGroup80:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-399
      Port: 80
      Protocol: TCP
      VpcId: !Ref VPCID
  PublicNLBTargetGroup443:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTPS
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-399
      Port: 443
      Protocol: TCP
      VpcId: !Ref VPCID
      #
      # Machine Roles
      #
  SetupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: VEQuickStartS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*
        - PolicyName: WorkloadSetup
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:EnableAlarmActions
                  - cloudwatch:PutMetricAlarm
                Resource: '*'
  WorkloadFetchSSLPolicy:
    Type: AWS::IAM::Policy
    Condition: UserProvidedSSL
    Properties:
      Roles:
        - !Ref SetupRole
      PolicyName: FetchSSLFromSecretsManager
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${VarnishSSLCertificateSecretsManagerKey}*'
  SetupRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref SetupRole
        #
        # Elastic File System, EFS, related
        #
  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: CF-Varnish-Enterprise-6
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
        - Key: Name
          Value: !Ref VolumeName
  MountTargetPublicSubnet1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PublicSubnet1ID
      SecurityGroups:
        - !Ref MountTargetSecurityGroup
  MountTargetPublicSubnet2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PublicSubnet2ID
      SecurityGroups:
        - !Ref MountTargetSecurityGroup
        #
        # Autoscaling related here
        #
  WorkloadSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to the Workload instances
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref WorkloadNodesSSHCIDR
      Tags:
        - Key: Name
          Value: CF-Varnish-Enterprise-6
  WorkloadASLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: s3
          roleName: !Ref SetupRole
      AWS::CloudFormation::Init:
        configSets:
          quickstart:
            - install_common
            - install_ssl
            - configure_common
            - configure_ssl
            - cleanup
        install_common:
          packages:
            apt:
              nfs-common: []
          commands:
            01_createdir:
              command: !Sub 'mkdir -p /${MountPoint} /etc/varnish/cfn-scripts'
          files:
            "/etc/varnish/cfn-scripts/configure_varnish.sh":
              source: !Sub 'https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/varnish.sh'
              mode: "000755"
              owner: "root"
              group: "root"
              authentication: S3AccessCreds
            "/etc/varnish/cfn-scripts/manage_vha_nodes.sh":
              content: !Sub |
                #!/bin/bash

                FILE=/${MountPoint}/nodes.conf

                PUBLICIPV4=$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
                INSTANCEID=$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id)

                touch ${!FILE}
                if ! /bin/grep -q ${!INSTANCEID} ${!FILE}; then
                  /bin/echo "${!INSTANCEID} = ${!PUBLICIPV4}" | /usr/bin/tee -a ${!FILE}
                else
                  /bin/sed -i "/${!INSTANCEID}/d" ${!FILE}
                fi
              mode: "000755"
              owner: "root"
              group: "root"
            "/etc/varnish/cfn-scripts/crontab":
              content: "*/1 * * * * /etc/varnish/cfn-scripts/crontab_nodes_diff.sh\n"
              mode: "000644"
              owner: "root"
              group: "root"
            "/etc/varnish/cfn-scripts/crontab_nodes_diff.sh":
              content: !Sub |
                #!/bin/bash

                if diff -q /etc/varnish/nodes.conf /${MountPoint}/nodes.conf > /dev/null; then
                  true
                else
                  # Different
                  cp /${MountPoint}/nodes.conf /etc/varnish/nodes.conf
                  systemctl reload vha-agent
                fi
              mode: "000755"
              owner: "root"
              group: "root"
        install_ssl:
          commands:
            01_install_pip:
              command: !If
                - UserProvidedSSL
                - "apt-get -y install python-pip"
                - "touch /tmp/.nossl"
            02_install_awscli:
              command: !If
                - UserProvidedSSL
                - "pip install awscli"
                - "touch /tmp/.nossl"
            03_fetch_ssl_from_secrets_manager:
              command: !If
                - UserProvidedSSL
                - !Sub |
                  /usr/local/bin/aws --region ${AWS::Region} secretsmanager get-secret-value --secret-id ${VarnishSSLCertificateSecretsManagerKey}  | jq -r '.SecretString' >  /etc/hitch/cert.pem
                - "touch /tmp/.nossl"
        configure_common:
          commands:
            01_createsymlink:
              command: "ln -s /etc/varnish/cfn-scripts/manage_vha_nodes.sh /etc/rc0.d/S01manage_vha_nodes"
            02_mount_efs:
              command: !Sub >
                mount -t nfs4 -o nfsvers=4.1 ${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ /${MountPoint}

            03_permissions:
              command: !Sub "chown ubuntu:ubuntu /${MountPoint}"
            04_create_vha_nodes:
              command: "/etc/varnish/cfn-scripts/manage_vha_nodes.sh"
            05_create_crontab:
              command: "crontab /etc/varnish/cfn-scripts/crontab"
            06_run_copy_once:
              command: !Sub "cp /${MountPoint}/nodes.conf /etc/varnish/nodes.conf"
            07_configure_varnish:
              command: !Sub "/etc/varnish/cfn-scripts/configure_varnish.sh ${VarnishBackendAddress} ${VarnishBackendProtocol} ${VHAToken}"
        configure_ssl:
          commands:
            01_modify_hitch_config_file:
              command: !If
                - UserProvidedSSL
                - "sed -i 's,/etc/hitch/testcert.pem,/etc/hitch/cert.pem,g' /etc/hitch/hitch.conf"
                - "touch /tmp/.nossl"
            02_restart_hitch_service:
              command: !If
                - UserProvidedSSL
                - "systemctl restart hitch"
                - "touch /tmp/.nossl"
        cleanup: {}
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref AWS::Region
        - UBUNTUVE6
      InstanceMonitoring: true
      IamInstanceProfile: !Ref SetupRoleProfile
      InstanceType: !Ref WorkloadInstanceType
      SecurityGroups:
        - !Ref WorkloadSecurityGroup
  WorkloadScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WorkloadAutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: 1
  WorkloadScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WorkloadAutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: -1
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 60% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 60
      AlarmActions:
        - !Ref WorkloadScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WorkloadAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 40% for 30 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 30
      Threshold: 40
      AlarmActions:
        - !Ref WorkloadScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WorkloadAutoScalingGroup
      ComparisonOperator: LessThanThreshold
  NetworkInAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if Network In > 500000000 bytes for 5 minutes
      MetricName: NetworkIn
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 500000000
      AlarmActions:
        - !Ref WorkloadScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WorkloadAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
  NetworkInAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if Network In < 300000000 bytes for 30 minutes
      MetricName: NetworkIn
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 30
      Threshold: 300000000
      AlarmActions:
        - !Ref WorkloadScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WorkloadAutoScalingGroup
      ComparisonOperator: LessThanThreshold
  WorkloadAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - MountTargetPublicSubnet1
      - MountTargetPublicSubnet2
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1ID
        - !Ref PublicSubnet2ID
      Cooldown: '600'
      DesiredCapacity: !Ref WorkloadNodesDesiredCapacity
      HealthCheckGracePeriod: 600
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref WorkloadASLaunchConfig
      TargetGroupARNs:
        - !Ref PublicNLBTargetGroup80
        - !Ref PublicNLBTargetGroup443
      MaxSize: !Ref WorkloadNodesMaxSize
      MinSize: !Ref WorkloadNodesMinSize
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
            - "GroupPendingInstances"
            - "GroupTotalInstances"
            - "GroupStandbyInstances"
            - "GroupDesiredCapacity"
            - "GroupTerminatingInstances"
            - "GroupInServiceInstances"
      NotificationConfiguration:
        TopicARN: !Ref NotificationTopic
        NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
          - autoscaling:TEST_NOTIFICATION
      Tags:
        - Key: Name
          Value: CF-Varnish-Enterprise-6-node
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref WorkloadNodesDesiredCapacity
        Timeout: PT2H
#
# Display some outputs on CloudFormation tab
#
Outputs:
  NLBDNSName:
    Description: NLB DNS Name
    Value: !GetAtt
      - PublicNLB
      - DNSName
  FileSystemID:
    Description: EFS File system ID
    Value: !Ref FileSystem
  MountTargetPublicSubnet1ID:
    Description: EFS Mount target ID
    Value: !Ref MountTargetPublicSubnet1
  MountTargetPublicSubnet2ID:
    Description: EFS Mount target ID
    Value: !Ref MountTargetPublicSubnet2

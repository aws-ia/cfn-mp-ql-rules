{"AWSTemplateFormatVersion": "2010-09-09", "Description": "This template creates a SASGrid infrastructure in a single AZ. It will deploy a Security Group, 2 EC2 instances, 1 AutoScaling Group and Launch Configuration for SASGrid in a private subnet. **WARNING** This template creates Amazon EC2 RHEL instances and dependent resources. You will be billed for the AWS resources used if you create a stack from this template. (qs-1nh8kis2k)", "Metadata": {"AWS::CloudFormation::Interface": {"ParameterGroups": [{"Label": {"default": "Network Configuration"}, "Parameters": ["VPCID", "VPCCIDR", "PrivateSubnet1ID"]}, {"Label": {"default": "SASGrid EC2 Configuration"}, "Parameters": ["NoOfSASGridInstances", "SASGridInstanceType", "SASGridKeyPairName"]}, {"Label": {"default": "AWS Quick Start Configuration"}, "Parameters": ["DomainDNSName"]}, {"Label": {"default": "AWS Quick Start Configuration"}, "Parameters": ["QSS3BucketName", "QSS3KeyPrefix"]}, {"Label": {"default": "SAS Software Depot location and name"}, "Parameters": ["SASSoftwareDepot", "SASSoftwareDepotName"]}], "ParameterLabels": {"DomainDNSName": {"default": "Domain DNS Name"}, "SASGridKeyPairName": {"default": "SASGrid KeyPair Name"}, "PrivateSubnet1ID": {"default": "SASGrid Subnet ID"}, "VPCID": {"default": "VPC ID"}, "VPCCIDR": {"default": "VPC CIDR Block of the VPC"}, "QSS3BucketName": {"default": "Quick Start S3 Bucket Name"}, "QSS3KeyPrefix": {"default": "Quick Start S3 Key Prefix"}, "SASSoftwareDepot": {"default": "SAS Software Depot tar file S3 folder location"}, "SASSoftwareDepotName": {"default": "SAS Software Depot Name minus .tar"}, "SASGridInstanceType": {"default": "Instance Type for SASGrid Instances"}, "NoOfSASGridInstances": {"default": "Required No of SASGrid Instances"}}}}, "Parameters": {"PrivateSubnet1ID": {"Description": "ID of the public subnet 1 that you want to provision the first Remote Desktop Gateway into (e.g., subnet-a0246dcd)", "Type": "AWS::EC2::Subnet::Id"}, "SASGridKeyPairName": {"Description": "Public/private key pairs allow you to securely connect to your instance after it launches", "Type": "AWS::EC2::KeyPair::KeyName"}, "SASGridInstanceType": {"Type": "String", "Default": "i3.8xlarge", "AllowedValues": ["i3.8xlarge"]}, "NoOfSASGridInstances": {"Description": "Provide the number of SASGrid instances are required", "Type": "Number", "MinValue": "2", "MaxValue": "20", "Default": "2"}, "VPCID": {"Description": "ID of the VPC (e.g., vpc-0343606e)", "Type": "AWS::EC2::VPC::Id"}, "DomainDNSName": {"AllowedPattern": "[a-zA-Z0-9]+\\..+", "Default": "example.com", "Description": "Fully qualified domain name (FQDN) of the forest root domain e.g. example.com", "MaxLength": "25", "MinLength": "3", "Type": "String"}, "VPCCIDR": {"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$", "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28", "Default": "10.0.0.0/16", "Description": "CIDR Block for the VPC", "Type": "String"}, "QSS3BucketName": {"AllowedPattern": "^[0-9a-zA-Z-/]*$", "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).", "Default": "aws-quickstart", "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).", "Type": "String"}, "QSS3KeyPrefix": {"AllowedPattern": "^[0-9a-zA-Z-/]*$", "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).", "Default": "quickstart-sas-grid/", "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).", "Type": "String"}, "SASSoftwareDepot": {"AllowedPattern": "^([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$", "ConstraintDescription": "must be a tar file in a valid S3 location, e.g. mysasbucket/sasorders", "Description": "S3 folder location of the Software Depot tar file", "Type": "String"}, "SASSoftwareDepotName": {"AllowedPattern": "^[0-9a-zA-Z-_/]*$", "ConstraintDescription": "Name of SAS Software Depot minus .tar, e.g. SASSoftwareDepot_Final", "Description": "Name of the Software Depot tar file minus .tar", "Type": "String"}, "SASPlanFiles": {"AllowedPattern": "^([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$", "ConstraintDescription": "must be a folder of planfiles in S3 location, e.g. mysasbucket/sasplanfiles/", "Description": "S3 location of the folder with the SAS Plan files", "Type": "String"}, "SASLicenseMeta": {"AllowedPattern": "^([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$", "ConstraintDescription": "must be file name containing the SAS Metadata license such as SAS94_9C1TDT_70243248_LINUX_X86-64.txt", "Description": "Name of SAS Metadata License file", "Type": "String"}, "SASLicenseApp": {"AllowedPattern": "^([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$", "ConstraintDescription": "must be file name containing the SAS Application Server license such as SAS94_9C1TDT_70243248_LINUX_X86-64.txt", "Description": "Name of SAS Application Server License file", "Type": "String"}, "GpfsMountPoint": {"Type": "String", "AllowedPattern": "(/[a-zA-Z0-9]+)/([a-zA-Z0-9]+)", "Description": "The mount point for the Spectrum Scale volume i.e /gpfs/fs1."}}, "Mappings": {"AWSAMIRegionMap": {"AMI": {"REDHAT": "Red Hat Enterprise Linux 7.5"}, "us-east-1": {"REDHAT": "ami-e7ae619a"}, "us-east-2": {"REDHAT": "ami-0ba7916e"}, "us-west-1": {"REDHAT": "ami-129e8a72"}, "us-west-2": {"REDHAT": "ami-1d2fbc65"}, "ap-northeast-1": {"REDHAT": "ami-d1095db7"}, "ap-northeast-2": {"REDHAT": "ami-6667cb08"}, "ap-south-1": {"REDHAT": "ami-e06c418f"}, "ap-southeast-1": {"REDHAT": "ami-05471479"}, "ap-southeast-2": {"REDHAT": "ami-03a56761"}, "ca-central-1": {"REDHAT": "ami-b336b1d7"}, "eu-central-1": {"REDHAT": "ami-f6dc8a1d"}, "eu-west-1": {"REDHAT": "ami-ce3d76b7"}, "eu-west-2": {"REDHAT": "ami-8dba5cea"}, "sa-east-1": {"REDHAT": "ami-e185d08d"}}, "InfraSizeMap": {"InstanceTypes": {"SASGridMetaInstanceType": "r4.2xlarge", "SASGridMidTierInstanceType": "r4.2xlarge", "NoOfSASGridMetadataInstances": "1", "NoOfSASGridMidtierInstances": "1"}}}, "Resources": {"SASGridInstanceProfileRole": {"Type": "AWS::IAM::Role", "Properties": {"Policies": [{"PolicyName": "AnsibleKeySSMPolicy", "PolicyDocument": {"Statement": [{"Action": ["ssm:GetParameter", "ssm:DescribeParameters", "autoscaling:DescribeAutoScalingInstances", "autoscaling:DescribeAutoScalingGroups", "ec2:DescribeInstances", "ec2:DescribeSecurityGroups", "ec2:AuthorizeSecurityGroupIngress", "ec2:CreateTags"], "Resource": "*", "Effect": "Allow"}]}}, {"PolicyName": "CloudformationPolicy", "PolicyDocument": {"Statement": [{"Action": ["cloudformation:DescribeStacks", "cloudformation:DescribeStackEvents", "cloudformation:DescribeStackResource", "cloudformation:DescribeStackResources"], "Resource": "arn:aws:cloudformation:*:*:stack/*/*", "Effect": "Allow"}]}}, {"PolicyName": "mercury_s3_policy", "PolicyDocument": {"Statement": [{"Sid": "VisualEditor0", "Effect": "Allow", "Action": ["s3:GetObject", "s3:ListBucket"], "Resource": [{"Fn::Sub": "arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}/*"}, {"Fn::Sub": "arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}"}, {"Fn::Sub": ["arn:aws:s3:::${target_bucket_name}/*", {"target_bucket_name": {"Fn::Select": [0, {"Fn::Split": ["/", {"Fn::Sub": "${SASSoftwareDepot}"}]}]}}]}, {"Fn::Sub": ["arn:aws:s3:::${target_bucket_name}", {"target_bucket_name": {"Fn::Select": [0, {"Fn::Split": ["/", {"Fn::Sub": "${SASSoftwareDepot}"}]}]}}]}]}]}}], "Path": "/", "AssumeRolePolicyDocument": {"Statement": [{"Action": ["sts:AssumeRole"], "Principal": {"Service": ["ec2.amazonaws.com"]}, "Effect": "Allow"}], "Version": "2012-10-17"}}}, "SASGridInstanceProfile": {"Type": "AWS::IAM::InstanceProfile", "Properties": {"Roles": [{"Ref": "SASGridInstanceProfileRole"}], "Path": "/"}}, "WaitHandle": {"Type": "AWS::CloudFormation::WaitConditionHandle"}, "WaitCondition": {"Type": "AWS::CloudFormation::WaitCondition", "DependsOn": "SASGridEC2Instances", "Properties": {"Handle": {"Ref": "WaitHandle"}, "Timeout": "3600", "Count": {"Ref": "NoOfSASGridInstances"}}}, "SASGridSG": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"VpcId": {"Ref": "VPCID"}, "GroupDescription": "This SG Created for SAS Grid Nodes", "Tags": [{"Key": "Name", "Value": "SASGrid_Nodes_SG"}, {"Key": "Create By", "Value": "CoreCompete"}, {"Key": "Project", "Value": "AWS Quick Start - SAS Grid with Lustre"}], "SecurityGroupIngress": [{"IpProtocol": "-1", "CidrIp": {"Ref": "VPCCIDR"}}]}}, "SASGridMidTier": {"Type": "AWS::EC2::Instance", "Properties": {"InstanceType": {"Fn::FindInMap": ["InfraSizeMap", "InstanceTypes", "SASGridMidTierInstanceType"]}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "REDHAT"]}, "KeyName": {"Ref": "SASGridKeyPairName"}, "SubnetId": {"Ref": "PrivateSubnet1ID"}, "IamInstanceProfile": {"Ref": "SASGridInstanceProfile"}, "SecurityGroupIds": [{"Ref": "SASGridSG"}], "Tags": [{"Key": "Name", "Value": "SASGrid MidTier"}, {"Key": "Created By", "Value": "CoreCompete-AWS_Quick_Start"}], "BlockDeviceMappings": [{"DeviceName": "/dev/sda1", "Ebs": {"VolumeType": "gp2", "VolumeSize": "50"}}]}, "CreationPolicy": {"ResourceSignal": {"Timeout": "PT20M"}}}, "SASGridMetadata": {"Type": "AWS::EC2::Instance", "Properties": {"InstanceType": {"Fn::FindInMap": ["InfraSizeMap", "InstanceTypes", "SASGridMetaInstanceType"]}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "REDHAT"]}, "KeyName": {"Ref": "SASGridKeyPairName"}, "SubnetId": {"Ref": "PrivateSubnet1ID"}, "IamInstanceProfile": {"Ref": "SASGridInstanceProfile"}, "SecurityGroupIds": [{"Ref": "SASGridSG"}], "Tags": [{"Key": "Name", "Value": "SASGrid Metadata"}, {"Key": "Created By", "Value": "CoreCompete-AWS_Quick_Start"}], "BlockDeviceMappings": [{"DeviceName": "/dev/sda1", "Ebs": {"VolumeType": "gp2", "VolumeSize": "50"}}]}, "DependsOn": [], "CreationPolicy": {"ResourceSignal": {"Timeout": "PT60M"}}}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"]}]}, "Path": "/", "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"], "Policies": [{"PolicyName": "EC2Policy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["ec2:RunInstances", "ec2:DescribeInstances", "ec2:DescribeInstanceStatus", "ec2:TerminateInstances", "iam:PassRole", "iam:ListAttachedRolePolicies", "iam:AttachRolePolicy"], "Resource": ["*"]}]}}]}}, "EC2InstancesFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.handler", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}, "Code": {"ZipFile": {"Fn::Join": ["", ["var response = require('cfn-response');\nvar iaminstanceprofile = {};\niaminstanceprofile['Name'] = '", {"Ref": "SASGridInstanceProfile"}, "';\nconsole.log(iaminstanceprofile);\nvar AWS = require('aws-sdk');\nexports.handler = function(event, context) {\n  var physicalId = event.PhysicalResourceId || 'none';\n  function success(data) {\n    return response.send(event, context, response.SUCCESS, data, physicalId);\n  }\n  function failed(e) {\n    return response.send(event, context, response.FAILED, e, physicalId);\n  }\n  var ec2 = new AWS.EC2();\n  var instances;\n  if (event.RequestType == 'Create') {\n    var launchParams = event.ResourceProperties;\n    launchParams['IamInstanceProfile'] = iaminstanceprofile;\n    delete launchParams.ServiceToken;\n    ec2.runInstances(launchParams).promise().then((data)=> {\n      instances = data.Instances.map((data)=> data.InstanceId);\n      physicalId = instances.join(':');\n      return ec2.waitFor('instanceRunning', {InstanceIds: instances}).promise();\n    }).then((data)=> success({Instances: instances})\n    ).catch((e)=> failed(e));\n  } else if (event.RequestType == 'Delete') {\n    if (physicalId == 'none') {return success({});}\n    var deleteParams = {InstanceIds: physicalId.split(':')};\n    ec2.terminateInstances(deleteParams).promise().then((data)=>\n      ec2.waitFor('instanceTerminated', deleteParams).promise()\n    ).then((data)=>success({})\n    ).catch((e)=>failed(e));\n  } else {\n    return failed({Error: \"In-place updates not supported.\"});\n  }\n};\n"]]}}, "Runtime": "nodejs8.10", "Timeout": 300}}, "SASGridEC2Instances": {"Type": "Custom::EC2Instances", "Properties": {"ServiceToken": {"Fn::GetAtt": ["EC2InstancesFunction", "Arn"]}, "MinCount": {"Ref": "NoOfSASGridInstances"}, "MaxCount": {"Ref": "NoOfSASGridInstances"}, "SubnetId": {"Ref": "PrivateSubnet1ID"}, "IamInstanceProfile": {"Ref": "SASGridInstanceProfile"}, "SecurityGroupIds": [{"Ref": "SASGridSG"}], "InstanceType": {"Ref": "SASGridInstanceType"}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "REDHAT"]}, "KeyName": {"Ref": "SASGridKeyPairName"}, "BlockDeviceMappings": [{"DeviceName": "/dev/sda1", "Ebs": {"VolumeType": "gp2", "VolumeSize": "50"}}]}}, "SASMidTierRecovery": {"Type": "AWS::CloudWatch::Alarm", "Properties": {"AlarmDescription": "Trigger a recovery when instance status check fails for 15 consecutive minutes.", "Namespace": "AWS/EC2", "MetricName": "StatusCheckFailed_System", "Statistic": "Minimum", "Period": "60", "EvaluationPeriods": "15", "ComparisonOperator": "GreaterThanThreshold", "Threshold": "0", "AlarmActions": [{"Fn::Join": ["", ["arn:aws:automate:", {"Ref": "AWS::Region"}, ":ec2:recover"]]}], "Dimensions": [{"Name": "InstanceId", "Value": {"Ref": "SASGridMidTier"}}]}, "DependsOn": ["SASGridMidTier"]}, "SASMetadataRecovery": {"Type": "AWS::CloudWatch::Alarm", "Properties": {"AlarmDescription": "Trigger a recovery when instance status check fails for 15 consecutive minutes.", "Namespace": "AWS/EC2", "MetricName": "StatusCheckFailed_System", "Statistic": "Minimum", "Period": "60", "EvaluationPeriods": "15", "ComparisonOperator": "GreaterThanThreshold", "Threshold": "0", "AlarmActions": [{"Fn::Join": ["", ["arn:aws:automate:", {"Ref": "AWS::Region"}, ":ec2:recover"]]}], "Dimensions": [{"Name": "InstanceId", "Value": {"Ref": "SASGridMetadata"}}]}, "DependsOn": ["SASGridMetadata"]}}, "Outputs": {}}

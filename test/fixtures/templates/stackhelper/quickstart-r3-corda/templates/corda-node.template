AWSTemplateFormatVersion: 2010-09-09
Description: 'Corda Infrastructure - Corda Node, License: Apache 2.0 (Please do not remove) Aug,15,2018 (qs-1odje6ci1)'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - VPCCIDR
          - PublicSubnet1ID
          - PublicSubnet2ID
          - PrivateSubnet1ID
          - PrivateSubnet2ID
      - Label:
          default: Corda Configuration
        Parameters:
          - Location
          - CountryCode
          - OneTimeKey
          - TestnetEndpoint
          - KeyPairName
          - RemoteAccessCIDR
          - CordaAccessCIDR
          - CordaRPCAccessCIDR
          - InstanceType
      - Label:
          default: Corda Database Configuration
        Parameters:
          - DBMasterUsername
          - DBMasterUserPassword
          - RDSEndPoint
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      Location:
        default: City
      CountryCode:
        default: Country code
      OneTimeKey:
        default: One-time key
      TestnetEndpoint:
        default: Corda Testnet endpoint
      KeyPairName:
        default: Key pair name
      PublicSubnet1ID:
        default: Public Subnet 1 ID
      PublicSubnet2ID:
        default: Public Subnet 2 ID
      RDSEndPoint:
        default: Database endpoint
      DBMasterUsername:
        default: Database master username
      DBMasterUserPassword:
        default: Database master password
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      RemoteAccessCIDR:
        default: Allowed SSH access CIDR
      CordaAccessCIDR:
        default: Allowed Corda access CIDR
      CordaRPCAccessCIDR:
        default: Allowed Corda RPC access CIDR
      VPCID:
        default: VPC ID
      VPCCIDR:
        default: VPC CIDR
Parameters:
  CountryCode:
    Description: The ISO 3166-1 alpha-2 code of the country to which the node is associated. This does not need to be where the node is physically located.
    Type: String
  Location:
    Description: The city or location to which the node is associated. This does not need to be where the node is physically located.
    Type: String
  RDSEndPoint:
    Description: Database endpoint
    Type: String
  DBMasterUserPassword:
    Description: Database master password
    Type: String
  DBMasterUsername:
    Description: Database master username
    Type: String
  OneTimeKey:
    Description: The one-time key that you received when you created a new node on Corda Testnet (code valid for 1 hour).
    Type: String
  TestnetEndpoint:
    Description: The base URL of Corda Testnet
    Default: https://onboarder.prod.ws.r3.com
    Type: String
  InstanceType:
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t3.small
      - t3.medium
      - t3.large
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
    Default: t3.large
    Description: Amazon EC2 instance type for the Corda instances
    Type: String
  KeyPairName:
    Description: Enter a public/private key pair. If you do not have one in this region, please create it before continuing
    Type: AWS::EC2::KeyPair::KeyName
  PrivateSubnet1ID:
    Description: ID of the private Subnet in Availability Zone 1
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: ID of the private Subnet in Availability Zone 2
    Type: AWS::EC2::Subnet::Id
  PublicSubnet1ID:
    Description: ID of the public Subnet in Availability Zone 1
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Description: ID of the public Subnet in Availability Zone 2
    Type: AWS::EC2::Subnet::Id
  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-ia
    Description: >-
      S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-r3-corda/
    Description: >-
      S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
    Type: String
  RemoteAccessCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for external SSH access
    Type: String
  CordaAccessCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for Corda access
    Type: String
  CordaRPCAccessCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for Corda RPC access
    Type: String
  VPCID:
    Description: 'ID of the VPC (e.g., vpc-0343606e)'
    Type: 'AWS::EC2::VPC::Id'
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
    Description: The CIDR IP range of VPC
    Type: String
Mappings:
  AWSAMIRegionMap:
    AMI:
      CORDA: 945595563132/corda-enterprise-v3-20180719
    ap-northeast-1:
      CORDA: ami-056999ebc7da7e968
    ap-northeast-2:
      CORDA: ami-0f3eefe827826aa1f
    ap-south-1:
      CORDA: ami-07c50c25dd47edc8e
    ap-southeast-1:
      CORDA: ami-0c22e74caa4fa38b7
    ap-southeast-2:
      CORDA: ami-04be3a675e79291b6
    ca-central-1:
      CORDA: ami-01a81adcaa0a7984a
    eu-central-1:
      CORDA: ami-06cd225c44ddfe278
    eu-west-1:
      CORDA: ami-00ef622bfffab8437
    eu-west-2:
      CORDA: ami-0333318bf381350f3
    sa-east-1:
      CORDA: ami-084f6ac751413f599
    us-east-1:
      CORDA: ami-0c8f772682b612d23
    us-east-2:
      CORDA: ami-0f82a65db65e630f2
    us-west-1:
      CORDA: ami-0c3a43ce7009e77c4
    us-west-2:
      CORDA: ami-03bfb534bf11f4351
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert:
          'Fn::EachMemberIn':
            - 'Fn::ValueOfAll':
                - 'AWS::EC2::Subnet::Id'
                - VpcId
            - 'Fn::RefAll': 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must exist in the VPC
Conditions:
  GovCloudCondition: !Equals
    - !Ref AWS::Region
    - us-gov-west-1
Resources:
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - 'CordaEFS'
  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: !Ref VPCCIDR
  MountTargetS1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref 'PrivateSubnet1ID'
      SecurityGroups:
        - Ref: MountTargetSecurityGroup
  MountTargetS2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref 'PrivateSubnet2ID'
      SecurityGroups:
        - Ref: MountTargetSecurityGroup
  CordaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - 'Corda1-Logs'
  ColdCordaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - 'Corda2-Logs'
  CordaInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:ListMetrics'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                Resource: '*'
  CordaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enables P2P, RPC and SSH access
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref RemoteAccessCIDR
        - IpProtocol: tcp
          FromPort: 10002
          ToPort: 10002
          CidrIp: !Ref CordaAccessCIDR
        - IpProtocol: tcp
          FromPort: 10003
          ToPort: 10003
          CidrIp: !Ref CordaRPCAccessCIDR
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref RemoteAccessCIDR
  P2PLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1ID
        - !Ref PublicSubnet2ID
      Listeners:
        - LoadBalancerPort: '10002'
          InstancePort: '10002'
          Protocol: TCP
          InstanceProtocol: TCP
      HealthCheck:
        Target: TCP:10002
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      SecurityGroups:
        - !Ref CordaSecurityGroup
  RPCLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1ID
        - !Ref PublicSubnet2ID
      Listeners:
        - LoadBalancerPort: '10003'
          InstancePort: '10003'
          Protocol: TCP
          InstanceProtocol: TCP
      HealthCheck:
        Target: TCP:10003
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      SecurityGroups:
        - !Ref CordaSecurityGroup
  CordaInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - Ref: 'CordaInstanceRole'
  AuthenticatedS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AuthenticatedS3GetObjects
      Roles:
        - !Ref CordaInstanceRole
      PolicyDocument:
        Statement:
          - Sid: BucketAccess
            Effect: Allow
            Action:
              - 's3:GetObject'
            Resource: !Sub arn:aws:s3:::${QSS3BucketName}/*
  CordaInstance:
    Type: AWS::EC2::Instance
    DependsOn:
      - FileSystem
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          buckets:
            - !Sub ${QSS3BucketName}
          roleName:
            Ref: CordaInstanceRole
      AWS::CloudFormation::Init:
        configSets:
          corda_install:
            - mount-sharedfs
            - corda-jar
            - run-install
            - systemd-config-corda
            - run-service-corda
            - run-corda-log-collection
        mount-sharedfs:
          packages:
            apt:
              nfs-common: []
          commands:
            01_createdir:
              command: "mkdir -p /opt/corda/sharedfs"
            02_mountfs:
              command: !Sub "mount -t nfs4 -o nfsvers=4.1 ${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ /opt/corda/sharedfs"
            03_fstab:
              command: !Sub "echo '${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ /opt/corda/sharedfs nfs4 nfsvers=4.1 0 2' >>/etc/fstab"
            03_create_artemis_on_sharedfs:
              command: "mkdir -p /opt/corda/sharedfs/artemis"
            04_create_cordapps_on_sharedfs:
              command: "mkdir -p /opt/corda/sharedfs/cordapps"
            05_create_drivers_on_sharedfs:
              command: "mkdir -p /opt/corda/sharedfs/drivers"
            06_create_plugins_on_sharedfs:
              command: "mkdir -p /opt/corda/sharedfs/plugins"
            07_link_artemis_on_sharedfs:
              command: "ln -s /opt/corda/sharedfs/artemis /opt/corda/artemis"
            08_link_cordapps_on_sharedfs:
              command: "ln -s /opt/corda/sharedfs/cordapps /opt/corda/cordapps"
            09_link_drivers_on_sharedfs:
              command: "ln -s /opt/corda/sharedfs/drivers /opt/corda/drivers"
            10_link_plugins_on_sharedfs:
              command: "ln -s /opt/corda/sharedfs/drivers /opt/corda/plugins"
        systemd-config-corda:
          files:
            /etc/systemd/system/corda.service:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/corda.service
                - QSS3BucketName: !Ref QSS3BucketName
                  S3Region: !If [GovCloudCondition, s3-us-gov-west-1, s3]
                  QSS3KeyPrefix: !Ref QSS3KeyPrefix
              mode: '000755'
              owner: root
              group: root
              authentication: S3AccessCreds
        corda-jar:
          packages:
            apt:
              openjdk-8-jdk: []
              wget: []
          files:
            /home/ubuntu/install-node.sh:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/install-node.sh
                - QSS3BucketName: !Ref QSS3BucketName
                  S3Region: !If [GovCloudCondition, s3-us-gov-west-1, s3]
                  QSS3KeyPrefix: !Ref QSS3KeyPrefix
              mode: '000755'
              owner: root
              group: root
              authentication: S3AccessCreds
        run-install:
          commands:
            start_install:
              command: !Sub
                - >-
                  bash /home/ubuntu/install-node.sh \

                    "${P2PAddress}" \
                    "${CountryCode}" \
                    "${Location}" \
                    "${RDSEndPoint}" \
                    "${DBMasterUsername}" \
                    "${DBMasterUserPassword}" \
                    "${OneTimeKey}" \
                    "${RPCAddress}" \
                    "${P2PELB}" \
                    "${RPCELB}" \
                    "${Region}" \
                    "${TestnetEndpoint}"
                - P2PAddress: !GetAtt
                    - P2PLoadBalancer
                    - DNSName
                  CountryCode: !Ref CountryCode
                  Location: !Ref Location
                  RDSEndPoint: !Ref RDSEndPoint
                  DBMasterUsername: !Ref DBMasterUsername
                  DBMasterUserPassword: !Ref DBMasterUserPassword
                  OneTimeKey: !Ref OneTimeKey
                  RPCAddress: !Ref CordaRPCAccessCIDR
                  P2PELB: !Ref P2PLoadBalancer
                  RPCELB: !Ref RPCLoadBalancer
                  Region: !Ref 'AWS::Region'
                  TestnetEndpoint: !Ref TestnetEndpoint
        run-service-corda:
          commands:
            start_corda:
              command: systemctl start corda.service
        run-corda-log-collection:
          files:
            /home/ubuntu/node-logs.sh:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/node-logs.sh
                - QSS3BucketName: !Ref QSS3BucketName
                  S3Region: !If [GovCloudCondition, s3-us-gov-west-1, s3]
                  QSS3KeyPrefix: !Ref QSS3KeyPrefix
              mode: '000755'
              owner: root
              group: root
              authentication: S3AccessCreds
          commands:
            setup-cw-logs:
              command: bash /home/ubuntu/node-logs.sh
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - CORDA
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 100
      SecurityGroupIds:
        - !Ref CordaSecurityGroup
      SubnetId: !Ref PublicSubnet1ID
      IamInstanceProfile: !Ref CordaInstanceProfile
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - 'CordaNode'
  CordaColdInstance:
    Type: AWS::EC2::Instance
    DependsOn: CordaInstance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          buckets:
            - !Sub ${QSS3BucketName}
          roleName:
            Ref: CordaInstanceRole
      AWS::CloudFormation::Init:
        configSets:
          corda_install:
            - mount-sharedfs
            - corda-jar
            - run-install
            - systemd-config-corda
            - run-service-corda
            - run-corda-log-collection
        mount-sharedfs:
          packages:
            apt:
              nfs-common: []
          commands:
            01_createdir:
              command: "mkdir -p /opt/corda/sharedfs"
            02_mountfs:
              command: !Sub "mount -t nfs4 -o nfsvers=4.1 ${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ /opt/corda/sharedfs"
            03_fstab:
              command: !Sub "echo '${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ /opt/corda/sharedfs nfs4 nfsvers=4.1 0 2' >>/etc/fstab"
            03_link_artemis_on_sharedfs:
              command: "ln -s /opt/corda/sharedfs/artemis /opt/corda/artemis"
            04_link_cordapps_on_sharedfs:
              command: "ln -s /opt/corda/sharedfs/cordapps /opt/corda/cordapps"
            05_link_drivers_on_sharedfs:
              command: "ln -s /opt/corda/sharedfs/drivers /opt/corda/drivers"
            06_link_plugins_on_sharedfs:
              command: "ln -s /opt/corda/sharedfs/drivers /opt/corda/plugins"
        systemd-config-corda:
          files:
            /etc/systemd/system/corda.service:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/corda.service
                - QSS3BucketName: !Ref QSS3BucketName
                  S3Region: !If [GovCloudCondition, s3-us-gov-west-1, s3]
                  QSS3KeyPrefix: !Ref QSS3KeyPrefix
              mode: '000755'
              owner: root
              group: root
              authentication: S3AccessCreds
        corda-jar:
          packages:
            apt:
              openjdk-8-jdk: []
              wget: []
          files:
            /home/ubuntu/install-node-cold-node.sh:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/install-cold-node.sh
                - QSS3BucketName: !Ref QSS3BucketName
                  S3Region: !If [GovCloudCondition, s3-us-gov-west-1, s3]
                  QSS3KeyPrefix: !Ref QSS3KeyPrefix
              mode: '000755'
              owner: root
              group: root
              authentication: S3AccessCreds
        run-install:
          commands:
            start_install:
              command: !Sub
                - >-
                  bash /home/ubuntu/install-node-cold-node.sh \

                    "${P2PAddress}" \
                    "${CountryCode}" \
                    "${Location}" \
                    "${RDSEndPoint}" \
                    "${DBMasterUsername}" \
                    "${DBMasterUserPassword}" \
                    "${OneTimeKey}" \
                    "${RPCAddress}" \
                    "${P2PELB}" \
                    "${RPCELB}" \
                    "${Region}" \
                    "${TestnetEndpoint}"
                - P2PAddress: !GetAtt
                    - P2PLoadBalancer
                    - DNSName
                  CountryCode: !Ref CountryCode
                  Location: !Ref Location
                  RDSEndPoint: !Ref RDSEndPoint
                  DBMasterUsername: !Ref DBMasterUsername
                  DBMasterUserPassword: !Ref DBMasterUserPassword
                  OneTimeKey: !Ref OneTimeKey
                  RPCAddress: !Ref CordaRPCAccessCIDR
                  P2PELB: !Ref P2PLoadBalancer
                  RPCELB: !Ref RPCLoadBalancer
                  Region: !Ref 'AWS::Region'
                  TestnetEndpoint: !Ref TestnetEndpoint
        run-service-corda:
          commands:
            start_corda:
              command: systemctl start corda.service
        run-corda-log-collection:
          files:
            /home/ubuntu/node-logs.sh:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/node-logs.sh
                - QSS3BucketName: !Ref QSS3BucketName
                  S3Region: !If [GovCloudCondition, s3-us-gov-west-1, s3]
                  QSS3KeyPrefix: !Ref QSS3KeyPrefix
              mode: '000755'
              owner: root
              group: root
              authentication: S3AccessCreds
          commands:
            setup-cw-logs:
              command: bash /home/ubuntu/node-logs.sh
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - CORDA
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 100
      SecurityGroupIds:
        - !Ref CordaSecurityGroup
      SubnetId: !Ref PublicSubnet2ID
      IamInstanceProfile: !Ref CordaInstanceProfile
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - 'CordaNode'
Outputs:
  CordaInstancePublicDnsName:
    Value: !GetAtt
      - CordaInstance
      - PublicDnsName
    Description: Public DNS name for the Corda instance
  CordaColdInstancePublicDnsName:
    Value: !GetAtt
      - CordaColdInstance
      - PublicDnsName
    Description: Public DNS name for the cold Corda instance
  P2PDnsName:
    Value: !GetAtt
      - P2PLoadBalancer
      - DNSName
    Description: Public DNS name for the P2P load balancer
  RPCDnsName:
    Value: !GetAtt
      - RPCLoadBalancer
      - DNSName
    Description: Public DNS name for the RPC load balancer
  CordaInstancePublicIPAddress:
    Value: !Sub 'ubuntu@${CordaInstance.PublicIp}'
    Description: Public IP address for the Corda instance
  CordaColdInstancePublicIPAddress:
    Value: !Sub 'ubuntu@${CordaColdInstance.PublicIp}'
    Description: Public IP address for the cold Corda instance

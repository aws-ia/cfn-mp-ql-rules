AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This CF template creates a VPC infrastructure for a multi-AZ, multi-tier deployment of TIBCO Data Science 6.4 on AWS. It deploys a VPC with bastions. **WARNING** This template creates EC2 instances and related resources. You will be billed for the AWS resources used if you create a stack from this template. (qs-1p2ma2up5)
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - VPCID
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PublicSubnet1ID
          - PublicSubnet2ID
          - AdminConsoleAccessCIDR
      - Label:
          default: Bastion configuration
        Parameters:
          - BastionSecurityGroupID
      - Label:
          default: TIBCO Data Science configuration
        Parameters:
          - KeyPairName
          - TSDSowner
          - TSDSInstanceName
          - TSDSInstanceType
          - TSDSInstancePassword
      - Label:
          default: Amazon RDS configuration
        Parameters:
          - RDSPassword
          - DBMultiAZ
      - Label:
          default: Amazon EMR configuration
        Parameters:
          - EMRMasterInstanceType
          - EMRCoreInstanceType
          - EMRClusterName
          - EMRCoreNodes
          - EMRLogBucket
      - Label:
          default: TIBCO Data Science Site Domain configuration (Optional)
        Parameters:
          - TSDSSiteDomain
          - ALBSSLCertificateARN
          - Route53HostedZoneId
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      RDSPassword:
        default: RDS database password
      DBMultiAZ:
        default: Multi-AZ database
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      EMRClusterName:
        default: EMR cluster name
      EMRCoreInstanceType:
        default: EMR core instance type
      EMRCoreNodes:
        default: EMR core nodes
      EMRLogBucket:
        default: EMR logs bucket name
      EMRMasterInstanceType:
        default: EMR master instance type
      AdminConsoleAccessCIDR:
        default: Allowed external access CIDR
      BastionSecurityGroupID:
        default: Bastion Security Group ID
      KeyPairName:
        default: Key pair name
      TSDSowner:
        default: TDS instance owner
      TSDSInstanceName:
        default: TDS instance name
      TSDSInstanceType:
        default: TDS instance type
      TSDSInstancePassword:
        default: TDS siteadmin password
      PrivateSubnet1ID:
        default: Private subnet 1 ID
      PrivateSubnet2ID:
        default: Private subnet 2 ID
      PublicSubnet1ID:
        default: Public subnet 1 ID
      PublicSubnet2ID:
        default: Public subnet 2 ID
      VPCID:
        default: VPC ID
      TSDSSiteDomain:
        default: TDS Site domain
      ALBSSLCertificateARN:
        default: ALB SSL certificate ARN
      Route53HostedZoneId:
        default: Route 53 hosted zone ID
Parameters:
  ALBSSLCertificateARN:
    Default: ''
    Description: '(Optional) The ARN of the SSL certificate to be used for the Application Load Balancer.'
    Type: String
  Route53HostedZoneId:
    Description: '(Optional) The Route53 hosted zone ID where the DNS record for the TIBCO Data Science site domain will be added.'
    Type: String
    Default: ''
  TSDSSiteDomain:
    Description: '(Optional) The domain name of the TIBCO Data Science site; e.g, example.com. A valid Fully Qualified Domain Name is required when using SSL.'
    AllowedPattern: (?!-)[a-zA-Z0-9-.]*(?<!-)
    ConstraintDescription: Must be a valid fully-qualified domain name.
    Type: String
    Default: ''
  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-ia
    Description: >-
      Do not change: S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-][0-9a-zA-Z-/]*/$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-tibco-data-science/
    Description: >-
      S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
    Type: String
  EMRClusterName:
    Description: The name for your EMR cluster.
    Type: String
  EMRCoreInstanceType:
    AllowedValues:
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
    Default: m4.xlarge
    Description: The instance type for the EMR core nodes.
    Type: String
  EMRCoreNodes:
    Description: The number of core nodes. The minimum is 1; the maximum is 500.
    Default: '1'
    MaxValue: '500'
    MinValue: '1'
    Type: Number
  EMRLogBucket:
    Description: (Optional) The name of the pre-existing S3 bucket for the EMR logs.
    Default: ''
    Type: String
  EMRMasterInstanceType:
    AllowedValues:
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
    Default: m4.xlarge
    Description: The instance type for the EMR master node.
    Type: String
  RDSPassword:
    AllowedPattern: >-
      (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    ConstraintDescription: >-
      Must be 8 characters or more containing at least one uppercase letter, one lowercase letter, and one number.
    Description: >-
      DB Password for RDS, Redshift and Portal access. Must be 8 characters or more containing at least one uppercase letter, one lowercase letter and one number. It can use any printable ASCII characters (ASCII code 33 to 126) except ' (single quote), " (double quote) , \, /, @, or space.
    MaxLength: '16'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DBMultiAZ:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Specifies that the database instance is a multiple Availability Zone deployment.
    Type: String
  AdminConsoleAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the TIBCO Data Science web console via the Application Load Balancer. We recommend that you set this value to a trusted IP range.
    Type: String
  BastionSecurityGroupID:
    Description: ID of the bastion host security group to enable SSH connections (e.g., sg-7f16e910).
    Type: AWS::EC2::SecurityGroup::Id
  TSDSInstancePassword:
    AllowedPattern: >-
      (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    ConstraintDescription: >-
      Must be 8 characters or more containing at least one uppercase letter, one lowercase letter, and one number.
    Description: >-
      The password for the siteadmin user to access the TIBCO Data Science web console. Must be 8 characters or more containing at least one uppercase letter, one lowercase letter and one number. It can use any printable ASCII characters (ASCII code 33 to 126) except ' (single quote), " (double quote) , \, /, @, or space.
    MaxLength: '16'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  TSDSInstanceName:
    Description: Name for the TIBCO Data Science instance that is deployed to EC2.
    Type: String
    Default: TIBCO-DS
  TSDSInstanceType:
    AllowedValues:
      - m5.2xlarge
      - m5.4xlarge
    ConstraintDescription: Must contain valid instance type
    Default: m5.2xlarge
    Description: Type of EC2 instance for TIBCO Data Science 6.4 AMI.
    Type: String
  KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  TSDSowner:
    Description: The Owner tag for the TIBCO Data Science instance.
    Default: tibco-ds-owner
    Type: String
  PrivateSubnet1ID:
    Description: The ID of the private subnet in Availability Zone 1 for the TIBCO Data Science instances (e.g., subnet-a0246dcd).
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: The ID of the private subnet in Availability Zone 2 for the TIBCO Data Science instances (e.g., subnet-b1f432cd).
    Type: AWS::EC2::Subnet::Id
  PublicSubnet1ID:
    Description: The ID of the public subnet in Availability Zone 1 for the Application Load Balancer (e.g., subnet-9bc642ac).
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Description: The ID of the private subnet in Availability Zone 2 for the Application Load Balancer. (e.g., subnet-e3246d8e).
    Type: AWS::EC2::Subnet::Id
  VPCID:
    Description: The ID of your existing VPC (e.g., vpc-0343606e).
    Type: AWS::EC2::VPC::Id
Conditions:
  UseALBSSL: !Not [!Equals [!Ref 'ALBSSLCertificateARN', '']]
  CreateReadReplica: !Equals [!Ref 'DBMultiAZ', 'true']
  EMRBucketProvided: !Not [!Equals [!Ref EMRLogBucket, '']]
  TSDSSiteDomainRoute53Condition: !And [!Not [!Equals [!Ref 'TSDSSiteDomain', '']], !Not [!Equals [!Ref 'Route53HostedZoneId', '']]]
Rules:
  EFSSupportedRegionRule:
    Assertions:
      - Assert:
          Fn::Contains:
            - - us-east-1
              - us-east-2
              - us-west-2
              - us-west-1
              - eu-west-1
              - ap-southeast-2
              - ap-southeast-1
              - ap-northeast-1
              - ap-northeast-2
              - eu-central-1
            - !Ref AWS::Region
        AssertDescription: This Quick Start utilizes Amazon EFS which is only available in the us-east-1 (N. Virginia), us-east-2 (Ohio), us-west-1 (N. California), us-west-2 (Oregon), eu-west-1 (Ireland), eu-central-1 (Frankfurt), ap-northeast-1 (Tokyo), ap-northeast-2 (Seoul), and ap-southeast-2 (Sydney) regions. Please launch the stack in one of these regions
Mappings:
  AWSAMIRegionMap:
    ap-northeast-1:
      '64': ami-0acfdf39f8d75de29
    ap-northeast-2:
      '64': ami-0bb5b7a7ed7bda5ca
    ap-southeast-1:
      '64': ami-0058d1ea261bfa52c
    ap-southeast-2:
      '64': ami-0cb130a737e27cb02
    eu-central-1:
      '64': ami-0c535eed96ece2a9a
    eu-west-1:
      '64': ami-036393a25956cf62c
    us-east-1:
      '64': ami-004695b33872a3f14
    us-east-2:
      '64': ami-036b7ad1ac71b23cb
    us-west-1:
      '64': ami-03a2b7072cb3490ff
    us-west-2:
      '64': ami-06ce838d113940171
Resources:
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
  InstanceRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: ReportHealthPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: autoscaling:SetInstanceHealth
            Resource:
              Fn::Sub: arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${AutoScalingGroup}
      Roles:
        - !Ref InstanceRole
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
  DatabaseSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: CloudFormation managed DB subnet group.
      SubnetIds:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
  TSDSDBCluster:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      Engine: aurora-postgresql
      DBClusterParameterGroupName: default.aurora-postgresql10
      DatabaseName: chorus
      MasterUsername: postgres_chorus
      MasterUserPassword: !Ref RDSPassword
      Port: 8543
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
  TSDSDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: aurora-postgresql
      DBClusterIdentifier: !Ref TSDSDBCluster
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      DBInstanceClass: db.r4.large
      Tags:
        - Key: Name
          Value: TDS-Aurora-PrimaryDB
  TSDSDBSecondary:
    Type: 'AWS::RDS::DBInstance'
    Condition: CreateReadReplica
    Properties:
      Engine: aurora-postgresql
      DBClusterIdentifier: !Ref TSDSDBCluster
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      DBInstanceClass: db.r4.large
      Tags:
        - Key: Name
          Value: TDS-Aurora-SecondaryDB
  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Enable DB port 8543
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8543'
          ToPort: '8543'
          SourceSecurityGroupId: !Ref TSDSSecurityGroup
  TSDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Enable TIBCO Data Science UI access via port 8080 through ALB and port 22 through Bastion
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          SourceSecurityGroupId: !Ref TSDSELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
  TCPFromEMRSlaveSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: EMRClusterStack
    Properties:
      GroupId: !Ref TSDSSecurityGroup
      FromPort: '0'
      ToPort: '65535'
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt EMRClusterStack.Outputs.EmrSlavePrivateSecurityGroup
  TCPFromEMRMasterSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: EMRClusterStack
    Properties:
      GroupId: !Ref TSDSSecurityGroup
      FromPort: '0'
      ToPort: '65535'
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt EMRClusterStack.Outputs.EmrMasterPrivateSecurityGroup
  TSDSELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Enable access via port 8080 for HTTP or port 443 for HTTPS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !If [UseALBSSL, 443, 8080]
          ToPort: !If [UseALBSSL, 443, 8080]
          CidrIp: !Ref AdminConsoleAccessCIDR
  MountTargetSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          SourceSecurityGroupId: !Ref TSDSSecurityGroup
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    DependsOn:
      - TSDSFileSystem
    Properties:
      ImageId:
        Fn::FindInMap:
          - AWSAMIRegionMap
          - !Ref AWS::Region
          - '64'
      InstanceType: !Ref TSDSInstanceType
      KeyName: !Ref KeyPairName
      EbsOptimized: true
      SecurityGroups:
        - !Ref TSDSSecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
  TSDSInstanceWaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
    Properties: {}
  TSDSInitWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    Properties:
      Handle: !Ref TSDSInstanceWaitHandle
      Timeout: '7200'
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn:
      - MountTarget1
      - MountTarget2
      - ApplicationLoadBalancer
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
      TargetGroupARNs:
        - !Ref ALBTargetGroupTSDSUI
      HealthCheckType: EC2
      HealthCheckGracePeriod: 90
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: '1'
      Tags:
        - Key: Name
          Value: !Ref TSDSInstanceName
          PropagateAtLaunch: 'true'
        - Key: Owner
          Value: !Ref TSDSowner
          PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '0'
        MaxBatchSize: '1'
  TSDSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      FileSystemTags:
        - Key: Name
          Value: TSDSFileSystem
  MountTarget1:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref TSDSFileSystem
      SubnetId: !Ref PrivateSubnet1ID
      SecurityGroups:
        - !Ref MountTargetSecurityGroup
  MountTarget2:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref TSDSFileSystem
      SubnetId: !Ref PrivateSubnet2ID
      SecurityGroups:
        - !Ref MountTargetSecurityGroup
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1ID
        - !Ref PublicSubnet2ID
      SecurityGroups:
        - Ref: TSDSELBSecurityGroup
  ALBTargetGroupTSDSUI:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref 'VPCID'
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '30'
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'ALBTargetGroupTSDSUI'
      LoadBalancerArn: !Ref 'ApplicationLoadBalancer'
      Port: !If [UseALBSSL, 443, 8080]
      Protocol: !If [UseALBSSL, HTTPS, HTTP]
      Certificates:
        - !If [UseALBSSL, {CertificateArn: !Ref 'ALBSSLCertificateARN'}, !Ref 'AWS::NoValue']
  TSDSSiteDomainRoute53Record:
    Type: AWS::Route53::RecordSet
    Condition: TSDSSiteDomainRoute53Condition
    Properties:
      Name: !Ref 'TSDSSiteDomain'
      Type: A
      HostedZoneId: !Ref 'Route53HostedZoneId'
      AliasTarget:
        DNSName: !GetAtt 'ApplicationLoadBalancer.DNSName'
        EvaluateTargetHealth: 'True'
        HostedZoneId: !GetAtt 'ApplicationLoadBalancer.CanonicalHostedZoneID'
  EMRClusterStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub >-
        https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/emr-cluster.yaml
      Parameters:
        EMRCoreInstanceType: !Ref EMRCoreInstanceType
        EMRLogBucket: !Ref EMRLogBucket
        AdminConsoleAccessCIDR: !Ref AdminConsoleAccessCIDR
        EMRClusterName: !Ref EMRClusterName
        VPCID: !Ref VPCID
        TSDSSecurityGroupId: !Ref TSDSSecurityGroup
        InstanceProfile: !Ref InstanceProfile
        EMRCoreNodes: !Ref EMRCoreNodes
        PrivateSubnet1ID: !Ref PrivateSubnet1ID
        EMRMasterInstanceType: !Ref EMRMasterInstanceType
        KeyPairName: !Ref KeyPairName
Outputs:
  TDSWebConsoleURL:
    Description: URL to connect to TDS Web Console
    Value: !Sub
      - '${AppScheme}://${AppDomain}:${AppPort}'
      - {AppScheme: !If [UseALBSSL, https, http], AppDomain: !If [TSDSSiteDomainRoute53Condition, !Ref 'TSDSSiteDomain', !GetAtt 'ApplicationLoadBalancer.DNSName'], AppPort: !If [UseALBSSL, 443, 8080]}
  TDSConfigurationLogs:
    Description: TDS Configuration Log Location
    Value: /tmp/cf.log
  EMRPublicDNS:
    Description: EMR Resource Manager
    Value: !GetAtt EMRClusterStack.Outputs.EMRPublicDNS
  EMRHiveURL:
    Description: EMR Hive thrift URL
    Value: !GetAtt EMRClusterStack.Outputs.EMRHiveURL

{"AWSTemplateFormatVersion": "2010-09-09", "Description": "Informatica Data Lake Solution for AWS S3 Data Lake. This template creates Amazon EMR, S3, Redshift, EC2 instances, Elastic IPs and related resources and installs Informatica EIC and BDM. You will be billed for the AWS resources used if you create a stack from this template. (qs-1o45mujk3)", "Parameters": {"DBPassword": {"Description": "Password for the database instance associated with Informatica domain and services (such as Model Repository Service, Data Integration Service, Content Management Service)", "MaxLength": "18", "MinLength": "8", "NoEcho": "True", "Type": "String"}, "DBSubnetIDs": {"Description": "IDs of two private subnets in the selected VPC. These must be in different Availability Zones in the selected VPC", "Type": "List<AWS::EC2::Subnet::Id>"}, "DBUser": {"Default": "awsquickstart", "Description": "Username for the database instance associated with Informatica domain and services (such as Model Repository Service, Data Integration Service, Content Management Service)", "MaxLength": "18", "MinLength": "8", "Type": "String"}, "EMRClusterName": {"Description": "Enter a name for your EMR cluster", "Type": "String"}, "EMRCoreInstanceType": {"AllowedValues": ["m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge"], "Default": "m4.xlarge", "Description": "Enter the instance type for the EMR core nodes. Default is m4.xlarge", "Type": "String"}, "EMRCoreNodes": {"Description": "Enter the number of Core Nodes. Minimum is 1.", "MaxValue": "500", "MinValue": "1", "Type": "Number"}, "EMRLogBucket": {"Description": "Enter the S3 bucket for the EMR logs", "Type": "String"}, "EMRMasterInstanceType": {"AllowedValues": ["m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge"], "Default": "m4.xlarge", "Description": "Enter the instance type for the EMR master node. Default is m4.xlarge", "Type": "String"}, "ICSClusterSize": {"AllowedValues": ["Small", "Medium", "Large"], "Default": "Small", "Description": "The cluster size (i.) Small (c4.8xlarge, single node) (ii.) Medium (c4.8xlarge, three nodes) (iii.)  Large (c4.8xlarge, six nodes)", "Type": "String"}, "IPAddressRange": {"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})", "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.", "Description": "The CIDR IP range that is permitted to access the Informatica domain and the Informatica embedded cluster", "MaxLength": "18", "MinLength": "9", "Type": "String"}, "ImportSampleData": {"AllowedValues": ["Yes", "No"], "Default": "No", "Description": "Select Yes to import the sample catalog data. You can use the sample data to get started with the product", "Type": "String"}, "InformaticaAdminPassword": {"Description": "Password to access Informatica Administrator", "NoEcho": "True", "Type": "String"}, "InformaticaAdminUsername": {"Description": "Username to access Informatica Administrator", "Type": "String"}, "InformaticaKeyName": {"Description": "The Informatica license key name. For example, <license key name> or <bucket sub folder/license key name>", "Type": "String"}, "InformaticaKeyS3Bucket": {"Description": "Name of the Amazon S3 bucket in your account that contains Informatica Key", "Type": "String"}, "InformaticaServerInstanceType": {"AllowedValues": ["c4.4xlarge", "c4.8xlarge"], "Default": "c4.4xlarge", "Description": "The EC2 instance type for the instance that hosts the Informatica domain. Default is c4.4xlarge", "Type": "String"}, "InformaticaServerSubnetID": {"Description": "Select a publicly accessible subnet ID for the Informatica domain", "Type": "AWS::EC2::Subnet::Id"}, "KeyName": {"Description": "Name of an existing Amazon EC2 keypair. You must specify this option to enable SSH access to Informatica domain and cluster instances", "Type": "AWS::EC2::KeyPair::KeyName"}, "QSS3BucketName": {"AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$", "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).", "Default": "aws-quickstart", "Description": "Do not change: S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).", "Type": "String"}, "QSS3KeyPrefix": {"AllowedPattern": "^[0-9a-zA-Z-][0-9a-zA-Z-/]*/$", "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).", "Default": "quickstart-datalake-informatica/", "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).", "Type": "String"}, "RedshiftClusterType": {"AllowedValues": ["single-node", "multi-node"], "Default": "single-node", "Description": "The type of cluster. Default is single-node", "Type": "String"}, "RedshiftDatabaseName": {"AllowedPattern": "([a-z]|[0-9])+", "Default": "dev", "Description": "The name of the first database to be created when the cluster is created", "Type": "String"}, "RedshiftDatabasePort": {"Default": "5439", "Description": "The port number on which the cluster accepts incoming connections. Default is 5439", "Type": "Number"}, "RedshiftNodeType": {"AllowedValues": ["ds2.xlarge", "ds2.8xlarge", "dc1.large", "dc1.8xlarge"], "Default": "ds2.xlarge", "Description": "Specifies the compute, memory, storage, and I/O capacity of the cluster's nodes. Default is ds2.xlarge", "Type": "String"}, "RedshiftNumberOfNodes": {"Default": "1", "Description": "The number of compute nodes in the cluster. For multi-node clusters, this parameter must be greater than 1", "Type": "Number"}, "RedshiftPassword": {"AllowedPattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d!#$%&\\(\\)*+,-.;<=>?\\[\\]^_`{|}~]{8,64}$", "Description": "The password that is associated with the master user account for the cluster that is being created. Must be 8 to 64 characters in length and contain at least one uppercase letter, one lowercase letter, and one number", "MaxLength": "64", "MinLength": "8", "NoEcho": "true", "Type": "String"}, "RedshiftUsername": {"AllowedPattern": "([a-z])([a-z]|[0-9])*", "Default": "defaultuser", "Description": "The user name that is associated with the master user account for the cluster that is being created", "Type": "String"}, "VPCID": {"Description": "ID of your existing VPC where you want to deploy Informatica Services", "Type": "AWS::EC2::VPC::Id"}}, "Conditions": {"CreateLargeClusterCnd": {"Fn::Equals": [{"Ref": "ICSClusterSize"}, "Large"]}, "CreateMediumClusterCnd": {"Fn::Equals": [{"Ref": "ICSClusterSize"}, "Medium"]}, "ImportSampleCnd": {"Fn::Equals": [{"Ref": "ImportSampleData"}, "Yes"]}, "IsMultiNodeCluster": {"Fn::Not": [{"Fn::Equals": [{"Ref": "EMRCoreNodes"}, "1"]}]}, "IsMultiNodeRedShiftCluster": {"Fn::Equals": [{"Ref": "RedshiftClusterType"}, "multi-node"]}, "MultipleNodeCnd": {"Fn::Or": [{"Condition": "CreateMediumClusterCnd"}, {"Condition": "CreateLargeClusterCnd"}]}, "NoEMRLogBucketCondition": {"Fn::Equals": ["", {"Ref": "EMRLogBucket"}]}, "SingleNodeCnd": {"Fn::Equals": [{"Ref": "ICSClusterSize"}, "Small"]}}, "Metadata": {"AWS::CloudFormation::Interface": {"ParameterGroups": [{"Label": {"default": "Network Configuration"}, "Parameters": ["VPCID", "InformaticaServerSubnetID", "DBSubnetIDs", "IPAddressRange"]}, {"Label": {"default": "Amazon EC2 Configuration"}, "Parameters": ["KeyName", "InformaticaServerInstanceType", "ICSClusterSize"]}, {"Label": {"default": "Amazon EMR Configuration"}, "Parameters": ["EMRMasterInstanceType", "EMRCoreInstanceType", "EMRClusterName", "EMRCoreNodes", "EMRLogBucket"]}, {"Label": {"default": "Amazon RDS Configuration"}, "Parameters": ["DBUser", "DBPassword"]}, {"Label": {"default": "Amazon Redshift Configuration"}, "Parameters": ["RedshiftDatabaseName", "RedshiftClusterType", "RedshiftNumberOfNodes", "RedshiftNodeType", "RedshiftUsername", "RedshiftPassword", "RedshiftDatabasePort"]}, {"Label": {"default": "Informatica Enterprise Catalog and BDM Configuration"}, "Parameters": ["InformaticaAdminUsername", "InformaticaAdminPassword", "InformaticaKeyS3Bucket", "InformaticaKeyName", "ImportSampleData"]}, {"Label": {"default": "AWS Quick Start Configuration"}, "Parameters": ["QSS3BucketName", "QSS3KeyPrefix"]}], "ParameterLabels": {"DBPassword": {"default": "Informatica Database Instance Password"}, "DBSubnetIDs": {"default": "Informatica Database Subnets"}, "DBUser": {"default": "Informatica Database Instance Username"}, "EMRClusterName": {"default": "EMR Cluster Name"}, "EMRCoreInstanceType": {"default": "EMR Core Instance Type"}, "EMRCoreNodes": {"default": "EMR Core Nodes"}, "EMRLogBucket": {"default": "EMR Logs Bucket Name"}, "EMRMasterInstanceType": {"default": "EMR Master Instance Type"}, "ICSClusterSize": {"default": "Informatica Embedded Cluster Size"}, "IPAddressRange": {"default": "IP Address Range"}, "ImportSampleData": {"default": "Import Sample Content"}, "InformaticaAdminPassword": {"default": "Informatica Administrator Password"}, "InformaticaAdminUsername": {"default": "Informatica Administrator Username"}, "InformaticaKeyName": {"default": "License Key Name"}, "InformaticaKeyS3Bucket": {"default": "License Key Location"}, "InformaticaServerInstanceType": {"default": "Informatica Domain Instance Type"}, "InformaticaServerSubnetID": {"default": "Informatica Domain Subnet"}, "KeyName": {"default": "Key Pair Name"}, "QSS3BucketName": {"default": "Quick Start S3 Bucket Name"}, "QSS3KeyPrefix": {"default": "Quick Start S3 Key Prefix"}, "RedshiftClusterType": {"default": "Redshift Cluster Type"}, "RedshiftDatabaseName": {"default": "Redshift Database Name"}, "RedshiftDatabasePort": {"default": "Redshift Database Port"}, "RedshiftNodeType": {"default": "Redshift Node Type"}, "RedshiftNumberOfNodes": {"default": "Redshift Number of Nodes"}, "RedshiftPassword": {"default": "Redshift Password"}, "RedshiftUsername": {"default": "Redshift Username"}, "VPCID": {"default": "VPC"}}}}, "Mappings": {"S3ConnectionMap": {"ap-northeast-1": {"REGION": "Asia Pacific(Tokyo)"}, "ap-northeast-2": {"REGION": "Asia Pacific(Seoul)"}, "ap-south-1": {"REGION": "Asia Pacific(Mumbai)"}, "ap-southeast-1": {"REGION": "Asia Pacific(Singapore)"}, "ap-southeast-2": {"REGION": "Asia Pacific(Sydney)"}, "ca-central-1": {"REGION": "Canada(Central)"}, "eu-central-1": {"REGION": "EU(Frankfurt)"}, "eu-west-1": {"REGION": "EU(Ireland)"}, "eu-west-2": {"REGION": "EU(London)"}, "sa-east-1": {"REGION": "South America(Sao Paulo)"}, "us-east-1": {"REGION": "US East(N. Virginia)"}, "us-east-2": {"REGION": "US East(Ohio)"}, "us-west-1": {"REGION": "US West(N. California)"}, "us-west-2": {"REGION": "US West(Oregon)"}}, "AWSAMIRegionMap": {"AMI": {"INFAADMINHVM": "Administrator-Server Image Data Lake on AWS", "INFAEICCLUSTERHVM": "Informatica Hadoop-Cluster Image for ICS", "INFADBHVM": "RDS DB-Snapshot Identifier"}, "ap-northeast-1": {"INFAADMINHVM": "ami-6dd5620b", "INFAEICCLUSTERHVM": "ami-53b40335", "INFADBHVM": "arn:aws:rds:ap-northeast-1:516473838419:snapshot:infa1020oracle"}, "ap-northeast-2": {"INFAADMINHVM": "ami-6de74003", "INFAEICCLUSTERHVM": "ami-d8e740b6", "INFADBHVM": "arn:aws:rds:ap-northeast-2:516473838419:snapshot:infa1020oracle"}, "ap-south-1": {"INFAADMINHVM": "ami-b0f3bfdf", "INFAEICCLUSTERHVM": "ami-82044bed", "INFADBHVM": "arn:aws:rds:ap-south-1:516473838419:snapshot:infa1020oracle"}, "ap-southeast-1": {"INFAADMINHVM": "ami-11eca772", "INFAEICCLUSTERHVM": "ami-89f5beea", "INFADBHVM": "arn:aws:rds:ap-southeast-1:516473838419:snapshot:infa1020oracle"}, "ap-southeast-2": {"INFAADMINHVM": "ami-9626cef4", "INFAEICCLUSTERHVM": "ami-9f3dd5fd", "INFADBHVM": "arn:aws:rds:ap-southeast-2:516473838419:snapshot:infa1020oracle"}, "ca-central-1": {"INFAADMINHVM": "ami-12da6176", "INFAEICCLUSTERHVM": "ami-77da6113", "INFADBHVM": "arn:aws:rds:ca-central-1:516473838419:snapshot:infa1020oracle"}, "eu-central-1": {"INFAADMINHVM": "ami-1559d87a", "INFAEICCLUSTERHVM": "ami-1c61e073", "INFADBHVM": "arn:aws:rds:eu-central-1:516473838419:snapshot:infa1020oracle"}, "eu-west-1": {"INFAADMINHVM": "ami-5575dc2c", "INFAEICCLUSTERHVM": "ami-884de4f1", "INFADBHVM": "arn:aws:rds:eu-west-1:516473838419:snapshot:infa1020oracle"}, "eu-west-2": {"INFAADMINHVM": "ami-080fd34b12081427b", "INFAEICCLUSTERHVM": "ami-4f534c2b", "INFADBHVM": "arn:aws:rds:eu-west-2:516473838419:snapshot:infa1020oracle"}, "sa-east-1": {"INFAADMINHVM": "ami-acb2c8c0", "INFAEICCLUSTERHVM": "ami-97b4cefb", "INFADBHVM": "arn:aws:rds:sa-east-1:516473838419:snapshot:infa1020oracle"}, "us-east-1": {"INFAADMINHVM": "ami-3e1ea344", "INFAEICCLUSTERHVM": "ami-0377c879", "INFADBHVM": "arn:aws:rds:us-east-1:516473838419:snapshot:infa1020oracle"}, "us-east-2": {"INFAADMINHVM": "ami-56644a33", "INFAEICCLUSTERHVM": "ami-0a7f516f", "INFADBHVM": "arn:aws:rds:us-east-2:516473838419:snapshot:infa1020oracle"}, "us-west-1": {"INFAADMINHVM": "ami-4e566f2e", "INFAEICCLUSTERHVM": "ami-a14a73c1", "INFADBHVM": "arn:aws:rds:us-west-1:516473838419:snapshot:infa1020oracle"}, "us-west-2": {"INFAADMINHVM": "ami-b6b263ce", "INFAEICCLUSTERHVM": "ami-d1ad7ca9", "INFADBHVM": "arn:aws:rds:us-west-2:516473838419:snapshot:infa1020oracle"}}, "ClusterSizeMapping": {"Small": {"InstanceType": "c4.8xlarge", "NumberOfInstances": "1", "loadtype": "low"}, "Medium": {"InstanceType": "c4.8xlarge", "NumberOfInstances": "3", "loadtype": "medium"}, "Large": {"InstanceType": "c4.8xlarge", "NumberOfInstances": "6", "loadtype": "high"}}}, "Resources": {"ElasticIPNode1": {"Type": "AWS::EC2::EIP", "Properties": {"Domain": "vpc"}}, "ElasticIPNode2": {"Type": "AWS::EC2::EIP", "Condition": "MultipleNodeCnd", "Properties": {"Domain": "vpc"}}, "ElasticIPNode3": {"Type": "AWS::EC2::EIP", "Condition": "MultipleNodeCnd", "Properties": {"Domain": "vpc"}}, "ElasticIPNode4": {"Type": "AWS::EC2::EIP", "Condition": "CreateLargeClusterCnd", "Properties": {"Domain": "vpc"}}, "ElasticIPNode5": {"Type": "AWS::EC2::EIP", "Condition": "CreateLargeClusterCnd", "Properties": {"Domain": "vpc"}}, "ElasticIPNode6": {"Type": "AWS::EC2::EIP", "Condition": "CreateLargeClusterCnd", "Properties": {"Domain": "vpc"}}, "Node1NetInterface": {"Type": "AWS::EC2::NetworkInterface", "Properties": {"Description": "Interface for Node 1 traffic", "SubnetId": {"Ref": "InformaticaServerSubnetID"}, "GroupSet": [{"Ref": "AdditionalICSSecurityGroup"}, {"Ref": "InternalAdditionalICSSecurityGroup"}], "SourceDestCheck": "true", "Tags": [{"Key": "Name", "Value": "Informatica Node 1 Network Interface"}]}}, "Node2NetInterface": {"Type": "AWS::EC2::NetworkInterface", "Condition": "MultipleNodeCnd", "Properties": {"Description": "Interface for Node 2 traffic", "SubnetId": {"Ref": "InformaticaServerSubnetID"}, "GroupSet": [{"Ref": "AdditionalICSSecurityGroup"}, {"Ref": "InternalAdditionalICSSecurityGroup"}], "SourceDestCheck": "true", "Tags": [{"Key": "Name", "Value": "Informatica Node 2 Network Interface"}]}}, "Node3NetInterface": {"Type": "AWS::EC2::NetworkInterface", "Condition": "MultipleNodeCnd", "Properties": {"Description": "Interface for Node 3 traffic", "SubnetId": {"Ref": "InformaticaServerSubnetID"}, "GroupSet": [{"Ref": "AdditionalICSSecurityGroup"}, {"Ref": "InternalAdditionalICSSecurityGroup"}], "SourceDestCheck": "true", "Tags": [{"Key": "Name", "Value": "Informatica Node 3 Network Interface"}]}}, "Node4NetInterface": {"Type": "AWS::EC2::NetworkInterface", "Condition": "CreateLargeClusterCnd", "Properties": {"Description": "Interface for Node 4 traffic", "SubnetId": {"Ref": "InformaticaServerSubnetID"}, "GroupSet": [{"Ref": "AdditionalICSSecurityGroup"}, {"Ref": "InternalAdditionalICSSecurityGroup"}], "SourceDestCheck": "true", "Tags": [{"Key": "Name", "Value": "Informatica Node 4 Network Interface"}]}}, "Node5NetInterface": {"Type": "AWS::EC2::NetworkInterface", "Condition": "CreateLargeClusterCnd", "Properties": {"Description": "Interface for Node 5 traffic", "SubnetId": {"Ref": "InformaticaServerSubnetID"}, "GroupSet": [{"Ref": "AdditionalICSSecurityGroup"}, {"Ref": "InternalAdditionalICSSecurityGroup"}], "SourceDestCheck": "true", "Tags": [{"Key": "Name", "Value": "Informatica Node 5 Network Interface"}]}}, "Node6NetInterface": {"Type": "AWS::EC2::NetworkInterface", "Condition": "CreateLargeClusterCnd", "Properties": {"Description": "Interface for Node 6 traffic", "SubnetId": {"Ref": "InformaticaServerSubnetID"}, "GroupSet": [{"Ref": "AdditionalICSSecurityGroup"}, {"Ref": "InternalAdditionalICSSecurityGroup"}], "SourceDestCheck": "true", "Tags": [{"Key": "Name", "Value": "Informatica Node 6 Network Interface"}]}}, "Node1IPAssoc": {"Type": "AWS::EC2::EIPAssociation", "Properties": {"AllocationId": {"Fn::GetAtt": ["ElasticIPNode1", "AllocationId"]}, "NetworkInterfaceId": {"Ref": "Node1NetInterface"}}}, "Node2IPAssoc": {"Type": "AWS::EC2::EIPAssociation", "Condition": "MultipleNodeCnd", "Properties": {"AllocationId": {"Fn::GetAtt": ["ElasticIPNode2", "AllocationId"]}, "NetworkInterfaceId": {"Ref": "Node2NetInterface"}}}, "Node3IPAssoc": {"Type": "AWS::EC2::EIPAssociation", "Condition": "MultipleNodeCnd", "Properties": {"AllocationId": {"Fn::GetAtt": ["ElasticIPNode3", "AllocationId"]}, "NetworkInterfaceId": {"Ref": "Node3NetInterface"}}}, "Node4IPAssoc": {"Type": "AWS::EC2::EIPAssociation", "Condition": "CreateLargeClusterCnd", "Properties": {"AllocationId": {"Fn::GetAtt": ["ElasticIPNode4", "AllocationId"]}, "NetworkInterfaceId": {"Ref": "Node4NetInterface"}}}, "Node5IPAssoc": {"Type": "AWS::EC2::EIPAssociation", "Condition": "CreateLargeClusterCnd", "Properties": {"AllocationId": {"Fn::GetAtt": ["ElasticIPNode5", "AllocationId"]}, "NetworkInterfaceId": {"Ref": "Node5NetInterface"}}}, "Node6IPAssoc": {"Type": "AWS::EC2::EIPAssociation", "Condition": "CreateLargeClusterCnd", "Properties": {"AllocationId": {"Fn::GetAtt": ["ElasticIPNode6", "AllocationId"]}, "NetworkInterfaceId": {"Ref": "Node6NetInterface"}}}, "HadoopGateway": {"Type": "AWS::EC2::Instance", "Condition": "SingleNodeCnd", "DependsOn": "Node1IPAssoc", "Properties": {"IamInstanceProfile": {"Ref": "InformaticaInstanceProfile"}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "INFAEICCLUSTERHVM"]}, "InstanceType": {"Fn::FindInMap": ["ClusterSizeMapping", {"Ref": "ICSClusterSize"}, "InstanceType"]}, "KeyName": {"Ref": "KeyName"}, "InstanceInitiatedShutdownBehavior": "stop", "NetworkInterfaces": [{"NetworkInterfaceId": {"Ref": "Node1NetInterface"}, "DeviceIndex": "0"}], "Tags": [{"Key": "Name", "Value": "HadoopGateway-HadoopNode-1"}]}}, "MultiNodeHadoopGateway": {"Type": "AWS::EC2::Instance", "Condition": "MultipleNodeCnd", "DependsOn": "Node1IPAssoc", "Properties": {"IamInstanceProfile": {"Ref": "InformaticaInstanceProfile"}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "INFAEICCLUSTERHVM"]}, "InstanceType": {"Fn::FindInMap": ["ClusterSizeMapping", {"Ref": "ICSClusterSize"}, "InstanceType"]}, "KeyName": {"Ref": "KeyName"}, "InstanceInitiatedShutdownBehavior": "stop", "NetworkInterfaces": [{"NetworkInterfaceId": {"Ref": "Node1NetInterface"}, "DeviceIndex": "0"}], "Tags": [{"Key": "Name", "Value": "HadoopGateway-HadoopNode-1"}]}}, "MultiNodeHadoopNode2": {"Type": "AWS::EC2::Instance", "Condition": "MultipleNodeCnd", "DependsOn": "Node2IPAssoc", "Properties": {"IamInstanceProfile": {"Ref": "InformaticaInstanceProfile"}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "INFAEICCLUSTERHVM"]}, "InstanceType": {"Fn::FindInMap": ["ClusterSizeMapping", {"Ref": "ICSClusterSize"}, "InstanceType"]}, "KeyName": {"Ref": "KeyName"}, "InstanceInitiatedShutdownBehavior": "stop", "NetworkInterfaces": [{"NetworkInterfaceId": {"Ref": "Node2NetInterface"}, "DeviceIndex": "0"}], "Tags": [{"Key": "Name", "Value": "HadoopNode-2"}]}}, "MultiNodeHadoopNode3": {"Type": "AWS::EC2::Instance", "Condition": "MultipleNodeCnd", "DependsOn": "Node3IPAssoc", "Properties": {"IamInstanceProfile": {"Ref": "InformaticaInstanceProfile"}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "INFAEICCLUSTERHVM"]}, "InstanceType": {"Fn::FindInMap": ["ClusterSizeMapping", {"Ref": "ICSClusterSize"}, "InstanceType"]}, "KeyName": {"Ref": "KeyName"}, "InstanceInitiatedShutdownBehavior": "stop", "NetworkInterfaces": [{"NetworkInterfaceId": {"Ref": "Node3NetInterface"}, "DeviceIndex": "0"}], "Tags": [{"Key": "Name", "Value": "HadoopNode-3"}]}}, "MultiNodeHadoopNode4": {"Type": "AWS::EC2::Instance", "Condition": "CreateLargeClusterCnd", "DependsOn": "Node4IPAssoc", "Properties": {"IamInstanceProfile": {"Ref": "InformaticaInstanceProfile"}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "INFAEICCLUSTERHVM"]}, "InstanceType": {"Fn::FindInMap": ["ClusterSizeMapping", {"Ref": "ICSClusterSize"}, "InstanceType"]}, "KeyName": {"Ref": "KeyName"}, "InstanceInitiatedShutdownBehavior": "stop", "NetworkInterfaces": [{"NetworkInterfaceId": {"Ref": "Node4NetInterface"}, "DeviceIndex": "0"}], "Tags": [{"Key": "Name", "Value": "HadoopNode-4"}]}}, "MultiNodeHadoopNode5": {"Type": "AWS::EC2::Instance", "Condition": "CreateLargeClusterCnd", "DependsOn": "Node5IPAssoc", "Properties": {"IamInstanceProfile": {"Ref": "InformaticaInstanceProfile"}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "INFAEICCLUSTERHVM"]}, "InstanceType": {"Fn::FindInMap": ["ClusterSizeMapping", {"Ref": "ICSClusterSize"}, "InstanceType"]}, "KeyName": {"Ref": "KeyName"}, "InstanceInitiatedShutdownBehavior": "stop", "NetworkInterfaces": [{"NetworkInterfaceId": {"Ref": "Node5NetInterface"}, "DeviceIndex": "0"}], "Tags": [{"Key": "Name", "Value": "HadoopNode-5"}]}}, "MultiNodeHadoopNode6": {"Type": "AWS::EC2::Instance", "Condition": "CreateLargeClusterCnd", "DependsOn": "Node6IPAssoc", "Properties": {"IamInstanceProfile": {"Ref": "InformaticaInstanceProfile"}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "INFAEICCLUSTERHVM"]}, "InstanceType": {"Fn::FindInMap": ["ClusterSizeMapping", {"Ref": "ICSClusterSize"}, "InstanceType"]}, "KeyName": {"Ref": "KeyName"}, "InstanceInitiatedShutdownBehavior": "stop", "NetworkInterfaces": [{"NetworkInterfaceId": {"Ref": "Node6NetInterface"}, "DeviceIndex": "0"}], "Tags": [{"Key": "Name", "Value": "HadoopNode-6"}]}}, "EMRCluster": {"Type": "AWS::EMR::Cluster", "Properties": {"Instances": {"MasterInstanceGroup": {"Configurations": [{"Classification": "yarn-site", "ConfigurationProperties": {"yarn.scheduler.minimum-allocation-mb": "256", "yarn.nodemanager.resource.memory-mb": "17000", "yarn.nodemanager.resource.cpu-vcores": "16", "yarn.scheduler.maximum-allocation-mb": "8192", "yarn.nodemanager.vmem-check-enabled": "false"}}, {"Classification": "core-site", "ConfigurationProperties": {"hadoop.proxyuser.ec2-user.hosts": "*", "hadoop.proxyuser.ec2-user.groups": "*"}}], "EbsConfiguration": {"EbsBlockDeviceConfigs": [{"VolumeSpecification": {"SizeInGB": "200", "VolumeType": "standard"}}]}, "InstanceCount": 1, "InstanceType": {"Ref": "EMRMasterInstanceType"}, "Market": "ON_DEMAND", "Name": "Master"}, "CoreInstanceGroup": {"Configurations": [{"Classification": "yarn-site", "ConfigurationProperties": {"yarn.scheduler.minimum-allocation-mb": "256", "yarn.nodemanager.resource.memory-mb": "17000", "yarn.nodemanager.resource.cpu-vcores": "16", "yarn.scheduler.maximum-allocation-mb": "8192", "yarn.nodemanager.vmem-check-enabled": "false"}}, {"Classification": "core-site", "ConfigurationProperties": {"hadoop.proxyuser.ec2-user.hosts": "*", "hadoop.proxyuser.ec2-user.groups": "*"}}], "EbsConfiguration": {"EbsBlockDeviceConfigs": [{"VolumeSpecification": {"SizeInGB": 200, "VolumeType": "standard"}}]}, "InstanceCount": {"Ref": "EMRCoreNodes"}, "InstanceType": {"Ref": "EMRCoreInstanceType"}, "Market": "ON_DEMAND", "Name": "Core"}, "TerminationProtected": "false", "Ec2KeyName": {"Ref": "KeyName"}, "Ec2SubnetId": {"Ref": "InformaticaServerSubnetID"}, "EmrManagedMasterSecurityGroup": {"Ref": "EmrMasterPrivateSecurityGroup"}, "EmrManagedSlaveSecurityGroup": {"Ref": "EmrSlavePrivateSecurityGroup"}, "AdditionalMasterSecurityGroups": [{"Ref": "InfaDomainEMRSecurityGroup"}], "AdditionalSlaveSecurityGroups": [{"Ref": "InfaDomainEMRSecurityGroup"}]}, "Name": {"Ref": "EMRClusterName"}, "JobFlowRole": {"Ref": "InformaticaInstanceProfile"}, "ReleaseLabel": "emr-5.4.0", "ServiceRole": "EMR_DefaultRole", "LogUri": {"Fn::If": ["NoEMRLogBucketCondition", {"Ref": "AWS::NoValue"}, {"Fn::Join": ["", ["s3://", {"Ref": "EMRLogBucket"}]]}]}, "Applications": [{"Name": "Hive"}, {"Name": "Hadoop"}], "Tags": [{"Key": "prod", "Value": {"Fn::Join": ["", ["EMR-", {"Ref": "EMRClusterName"}]]}}], "VisibleToAllUsers": true}}, "TCPFromSlaveSecurityGroupIngress": {"Type": "AWS::EC2::SecurityGroupIngress", "Properties": {"FromPort": "0", "GroupId": {"Fn::GetAtt": ["EmrMasterPrivateSecurityGroup", "GroupId"]}, "IpProtocol": "tcp", "SourceSecurityGroupId": {"Fn::GetAtt": ["EmrSlavePrivateSecurityGroup", "GroupId"]}, "ToPort": "65535"}}, "TCPFromMasterSecurityGroupIngress": {"Type": "AWS::EC2::SecurityGroupIngress", "Properties": {"FromPort": "0", "GroupId": {"Fn::GetAtt": ["EmrMasterPrivateSecurityGroup", "GroupId"]}, "IpProtocol": "tcp", "SourceSecurityGroupId": {"Fn::GetAtt": ["EmrMasterPrivateSecurityGroup", "GroupId"]}, "ToPort": "65535"}}, "ICMPFromSlaveSecurityGroupIngress": {"Type": "AWS::EC2::SecurityGroupIngress", "Properties": {"FromPort": "-1", "GroupId": {"Fn::GetAtt": ["EmrMasterPrivateSecurityGroup", "GroupId"]}, "IpProtocol": "icmp", "SourceSecurityGroupId": {"Fn::GetAtt": ["EmrSlavePrivateSecurityGroup", "GroupId"]}, "ToPort": "-1"}}, "ICMPFromMasterSecurityGroupIngress": {"Type": "AWS::EC2::SecurityGroupIngress", "Properties": {"FromPort": "-1", "GroupId": {"Fn::GetAtt": ["EmrMasterPrivateSecurityGroup", "GroupId"]}, "IpProtocol": "icmp", "SourceSecurityGroupId": {"Fn::GetAtt": ["EmrMasterPrivateSecurityGroup", "GroupId"]}, "ToPort": "-1"}}, "UDPFromSlaveSecurityGroupIngress": {"Type": "AWS::EC2::SecurityGroupIngress", "Properties": {"FromPort": "0", "GroupId": {"Fn::GetAtt": ["EmrMasterPrivateSecurityGroup", "GroupId"]}, "IpProtocol": "udp", "SourceSecurityGroupId": {"Fn::GetAtt": ["EmrSlavePrivateSecurityGroup", "GroupId"]}, "ToPort": "65535"}}, "UDPFromMasterSecurityGroupIngress": {"Type": "AWS::EC2::SecurityGroupIngress", "Properties": {"FromPort": "0", "GroupId": {"Fn::GetAtt": ["EmrMasterPrivateSecurityGroup", "GroupId"]}, "IpProtocol": "udp", "SourceSecurityGroupId": {"Fn::GetAtt": ["EmrMasterPrivateSecurityGroup", "GroupId"]}, "ToPort": "65535"}}, "TCPFromSlaveIngress": {"Type": "AWS::EC2::SecurityGroupIngress", "Properties": {"FromPort": "0", "GroupId": {"Fn::GetAtt": ["EmrSlavePrivateSecurityGroup", "GroupId"]}, "IpProtocol": "tcp", "SourceSecurityGroupId": {"Fn::GetAtt": ["EmrSlavePrivateSecurityGroup", "GroupId"]}, "ToPort": "65535"}}, "TCPFromMasterIngress": {"Type": "AWS::EC2::SecurityGroupIngress", "Properties": {"FromPort": "0", "GroupId": {"Fn::GetAtt": ["EmrSlavePrivateSecurityGroup", "GroupId"]}, "IpProtocol": "tcp", "SourceSecurityGroupId": {"Fn::GetAtt": ["EmrMasterPrivateSecurityGroup", "GroupId"]}, "ToPort": "65535"}}, "ICMPFromSlaveIngress": {"Type": "AWS::EC2::SecurityGroupIngress", "Properties": {"FromPort": "-1", "GroupId": {"Fn::GetAtt": ["EmrSlavePrivateSecurityGroup", "GroupId"]}, "IpProtocol": "icmp", "SourceSecurityGroupId": {"Fn::GetAtt": ["EmrSlavePrivateSecurityGroup", "GroupId"]}, "ToPort": "-1"}}, "ICMPFromMasterIngress": {"Type": "AWS::EC2::SecurityGroupIngress", "Properties": {"FromPort": "-1", "GroupId": {"Fn::GetAtt": ["EmrSlavePrivateSecurityGroup", "GroupId"]}, "IpProtocol": "icmp", "SourceSecurityGroupId": {"Fn::GetAtt": ["EmrMasterPrivateSecurityGroup", "GroupId"]}, "ToPort": "-1"}}, "UDPFromSlaveIngress": {"Type": "AWS::EC2::SecurityGroupIngress", "Properties": {"FromPort": "0", "GroupId": {"Fn::GetAtt": ["EmrSlavePrivateSecurityGroup", "GroupId"]}, "IpProtocol": "udp", "SourceSecurityGroupId": {"Fn::GetAtt": ["EmrSlavePrivateSecurityGroup", "GroupId"]}, "ToPort": "65535"}}, "UDPFromMasterIngress": {"Type": "AWS::EC2::SecurityGroupIngress", "Properties": {"FromPort": "0", "GroupId": {"Fn::GetAtt": ["EmrSlavePrivateSecurityGroup", "GroupId"]}, "IpProtocol": "udp", "SourceSecurityGroupId": {"Fn::GetAtt": ["EmrMasterPrivateSecurityGroup", "GroupId"]}, "ToPort": "65535"}}, "TCPMasterEgress": {"Type": "AWS::EC2::SecurityGroupEgress", "Properties": {"FromPort": "8443", "GroupId": {"Fn::GetAtt": ["EmrServiceAccessSecurityGroup", "GroupId"]}, "IpProtocol": "tcp", "DestinationSecurityGroupId": {"Fn::GetAtt": ["EmrMasterPrivateSecurityGroup", "GroupId"]}, "ToPort": "8443"}}, "TCPSlaveEgress": {"Type": "AWS::EC2::SecurityGroupEgress", "Properties": {"FromPort": "8443", "GroupId": {"Fn::GetAtt": ["EmrServiceAccessSecurityGroup", "GroupId"]}, "IpProtocol": "tcp", "DestinationSecurityGroupId": {"Fn::GetAtt": ["EmrSlavePrivateSecurityGroup", "GroupId"]}, "ToPort": "8443"}}, "CloudWatchPolicies": {"Type": "AWS::IAM::ManagedPolicy", "Properties": {"PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Action": ["logs:*"], "Effect": "Allow", "Resource": "*"}]}, "Roles": [{"Ref": "InformaticaInstanceRole"}]}}, "EmrMasterPrivateSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"GroupDescription": "EMR Master Instance security group", "VpcId": {"Ref": "VPCID"}}}, "EmrSlavePrivateSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"GroupDescription": "EMR Slave Instance security group", "VpcId": {"Ref": "VPCID"}}}, "EmrServiceAccessSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"GroupDescription": "EMR Service Access security group", "VpcId": {"Ref": "VPCID"}}}, "RedshiftCluster": {"Type": "AWS::Redshift::Cluster", "Properties": {"ClusterType": {"Ref": "RedshiftClusterType"}, "NumberOfNodes": {"Fn::If": ["IsMultiNodeRedShiftCluster", {"Ref": "RedshiftNumberOfNodes"}, {"Ref": "AWS::NoValue"}]}, "NodeType": {"Ref": "RedshiftNodeType"}, "DBName": {"Ref": "RedshiftDatabaseName"}, "MasterUsername": {"Ref": "RedshiftUsername"}, "MasterUserPassword": {"Ref": "RedshiftPassword"}, "ClusterParameterGroupName": {"Ref": "RedshiftClusterParameterGroup"}, "VpcSecurityGroupIds": [{"Ref": "RedShiftSecurityGroup"}], "ClusterSubnetGroupName": {"Ref": "RedshiftClusterSubnetGroup"}, "IamRoles": [{"Fn::GetAtt": ["InstanceRoleRedShift", "Arn"]}], "PubliclyAccessible": "false", "Port": {"Ref": "RedshiftDatabasePort"}, "Tags": [{"Key": "Name", "Value": "Amazon Redshift Cluster"}]}}, "RedshiftClusterSubnetGroup": {"Type": "AWS::Redshift::ClusterSubnetGroup", "Properties": {"Description": "Cluster subnet group", "SubnetIds": [{"Ref": "InformaticaServerSubnetID"}]}}, "InfaDomainEMRSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"GroupDescription": "Enable Informatica Domain Access in EMR", "VpcId": {"Ref": "VPCID"}, "SecurityGroupIngress": [{"IpProtocol": "tcp", "FromPort": "8020", "ToPort": "8020", "SourceSecurityGroupId": {"Ref": "InfaDomainSecurityGroup"}}, {"IpProtocol": "tcp", "FromPort": "8032", "ToPort": "8032", "SourceSecurityGroupId": {"Ref": "InfaDomainSecurityGroup"}}, {"IpProtocol": "tcp", "FromPort": "9083", "ToPort": "9083", "SourceSecurityGroupId": {"Ref": "InfaDomainSecurityGroup"}}, {"IpProtocol": "tcp", "FromPort": "10000", "ToPort": "10000", "SourceSecurityGroupId": {"Ref": "InfaDomainSecurityGroup"}}, {"IpProtocol": "tcp", "FromPort": "12300", "ToPort": "12600", "SourceSecurityGroupId": {"Ref": "InfaDomainSecurityGroup"}}, {"IpProtocol": "tcp", "FromPort": "8300", "ToPort": "8300", "SourceSecurityGroupId": {"Ref": "InfaDomainSecurityGroup"}}, {"IpProtocol": "tcp", "FromPort": "50010", "ToPort": "50010", "SourceSecurityGroupId": {"Ref": "InfaDomainSecurityGroup"}}, {"IpProtocol": "tcp", "FromPort": "9090", "ToPort": "9090", "SourceSecurityGroupId": {"Ref": "InfaDomainSecurityGroup"}}, {"IpProtocol": "tcp", "FromPort": "10020", "ToPort": "10020", "SourceSecurityGroupId": {"Ref": "InfaDomainSecurityGroup"}}, {"IpProtocol": "tcp", "FromPort": "9080", "ToPort": "9080", "SourceSecurityGroupId": {"Ref": "InfaDomainSecurityGroup"}}, {"IpProtocol": "tcp", "FromPort": "10000", "ToPort": "10000", "CidrIp": {"Ref": "IPAddressRange"}}]}}, "InfaDomainSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"GroupDescription": "Enable Informatica Domain Server Access", "VpcId": {"Ref": "VPCID"}, "SecurityGroupIngress": [{"IpProtocol": "tcp", "FromPort": "6006", "ToPort": "6006", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "6008", "ToPort": "6008", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "6014", "ToPort": "6114", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "8095", "ToPort": "8095", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "8785", "ToPort": "8785", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "8085", "ToPort": "8085", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "9085", "ToPort": "9085", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "8089", "ToPort": "8089", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "udp", "FromPort": "1521", "ToPort": "1521", "CidrIp": {"Ref": "IPAddressRange"}}]}}, "RedshiftClusterParameterGroup": {"Type": "AWS::Redshift::ClusterParameterGroup", "Properties": {"Description": "Cluster parameter group", "ParameterGroupFamily": "redshift-1.0", "Parameters": [{"ParameterName": "enable_user_activity_logging", "ParameterValue": "true"}]}}, "RedShiftSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"GroupDescription": "Security group", "SecurityGroupIngress": [{"CidrIp": {"Ref": "IPAddressRange"}, "FromPort": {"Ref": "RedshiftDatabasePort"}, "ToPort": {"Ref": "RedshiftDatabasePort"}, "IpProtocol": "tcp"}, {"IpProtocol": "tcp", "FromPort": {"Ref": "RedshiftDatabasePort"}, "ToPort": {"Ref": "RedshiftDatabasePort"}, "SourceSecurityGroupId": {"Ref": "InfaDomainEMRSecurityGroup"}}, {"IpProtocol": "tcp", "FromPort": {"Ref": "RedshiftDatabasePort"}, "ToPort": {"Ref": "RedshiftDatabasePort"}, "SourceSecurityGroupId": {"Ref": "InfaDomainSecurityGroup"}}, {"IpProtocol": "tcp", "FromPort": {"Ref": "RedshiftDatabasePort"}, "ToPort": {"Ref": "RedshiftDatabasePort"}, "SourceSecurityGroupId": {"Ref": "AdditionalICSSecurityGroup"}}], "VpcId": {"Ref": "VPCID"}}}, "WaitForClusterInstancesHandle": {"Type": "AWS::CloudFormation::WaitConditionHandle", "Properties": {}}, "WaitForClusterInstancesCondition": {"Type": "AWS::CloudFormation::WaitCondition", "Properties": {"Count": {"Fn::FindInMap": ["ClusterSizeMapping", {"Ref": "ICSClusterSize"}, "NumberOfInstances"]}, "Handle": {"Ref": "WaitForClusterInstancesHandle"}, "Timeout": "3600"}}, "AdditionalICSSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"GroupDescription": "Allowing all ports for all IPs incoming and outgoing", "VpcId": {"Ref": "VPCID"}, "SecurityGroupIngress": [{"IpProtocol": "tcp", "FromPort": "8080", "ToPort": "8080", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "8088", "ToPort": "8088", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "50070", "ToPort": "50070", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "19888", "ToPort": "19888", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535", "SourceSecurityGroupId": {"Fn::GetAtt": ["InternalAdditionalICSSecurityGroup", "GroupId"]}}, {"IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535", "SourceSecurityGroupId": {"Ref": "InfaDomainSecurityGroup"}}]}}, "InternalAdditionalICSSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"GroupDescription": "To enable all ports between hadoop machines only.", "VpcId": {"Ref": "VPCID"}}}, "InfaDB": {"Type": "AWS::RDS::DBInstance", "Properties": {"AllocatedStorage": "200", "MultiAZ": "true", "StorageType": "gp2", "LicenseModel": "license-included", "DBInstanceClass": "db.m4.2xlarge", "DBSnapshotIdentifier": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "INFADBHVM"]}, "DBSubnetGroupName": {"Ref": "InfaDBSubnetGroup"}, "VPCSecurityGroups": [{"Ref": "InfaDBSecurityGroup"}], "Engine": "oracle-se2", "PubliclyAccessible": "true", "MasterUserPassword": {"Ref": "DBPassword"}, "MasterUsername": {"Ref": "DBUser"}}}, "InfaDBSubnetGroup": {"Type": "AWS::RDS::DBSubnetGroup", "Properties": {"DBSubnetGroupDescription": "Subnets available for the RDS DB Instance", "SubnetIds": {"Ref": "DBSubnetIDs"}}}, "InfaDBSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"GroupDescription": "Informatica domain access to RDS DB", "VpcId": {"Ref": "VPCID"}, "SecurityGroupIngress": [{"IpProtocol": "tcp", "FromPort": "1521", "ToPort": "1521", "SourceSecurityGroupId": {"Ref": "InfaDomainSecurityGroup"}}, {"IpProtocol": "tcp", "FromPort": "1521", "ToPort": "1521", "SourceSecurityGroupId": {"Ref": "InfaDomainEMRSecurityGroup"}}, {"IpProtocol": "tcp", "FromPort": "1521", "ToPort": "1521", "SourceSecurityGroupId": {"Ref": "AdditionalICSSecurityGroup"}}]}}, "InstanceRoleRedShift": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Statement": [{"Effect": "Allow", "Principal": {"Service": ["redshift.amazonaws.com"]}, "Action": ["sts:AssumeRole"]}]}, "ManagedPolicyArns": ["arn:aws:iam::aws:policy/AmazonS3FullAccess", "arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess"], "Path": "/"}}, "InformaticaInstanceRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Statement": [{"Effect": "Allow", "Principal": {"Service": ["ec2.amazonaws.com"]}, "Action": ["sts:AssumeRole"]}]}, "ManagedPolicyArns": ["arn:aws:iam::aws:policy/IAMFullAccess", "arn:aws:iam::aws:policy/AmazonS3FullAccess", "arn:aws:iam::aws:policy/AmazonRedshiftFullAccess", "arn:aws:iam::aws:policy/AmazonEC2FullAccess", "arn:aws:iam::aws:policy/AmazonElasticMapReduceFullAccess"], "Path": "/"}}, "InformaticaS3User": {"Type": "AWS::IAM::User", "Properties": {"Policies": [{"PolicyName": "S3DatalakeAccessPolicy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Action": ["s3:*"], "Resource": [{"Fn::Sub": "arn:aws:s3:::${S3BucketName}/*"}], "Effect": "Allow"}]}}]}}, "InformaticaS3UserAccessKey": {"Type": "AWS::IAM::AccessKey", "Properties": {"UserName": {"Ref": "InformaticaS3User"}}}, "S3BucketName": {"Type": "AWS::S3::Bucket", "Properties": {"Tags": [{"Key": "Name", "Value": "Amazon S3"}]}, "DeletionPolicy": "Retain"}, "RolePolicies": {"Type": "AWS::IAM::Policy", "Properties": {"PolicyName": "S3Download", "PolicyDocument": {"Statement": [{"Action": ["s3:Get*", "s3:GetObject", "s3:List*"], "Effect": "Allow", "Resource": [{"Fn::Sub": "arn:aws:s3:::${InformaticaKeyS3Bucket}/${InformaticaKeyName}"}]}, {"Action": ["s3:Get*", "s3:List*", "s3:Put*"], "Effect": "Allow", "Resource": [{"Fn::Sub": "arn:aws:s3:::${S3BucketName}"}]}]}, "Roles": [{"Ref": "InformaticaInstanceRole"}]}}, "InformaticaInstanceProfile": {"Type": "AWS::IAM::InstanceProfile", "Properties": {"Path": "/", "Roles": [{"Ref": "InformaticaInstanceRole"}]}}, "AdministrationServerEIP": {"Type": "AWS::EC2::EIP", "Properties": {"Domain": "vpc"}}, "AdministrationServerNetInterface": {"Type": "AWS::EC2::NetworkInterface", "Properties": {"Description": "Interface for Administrator Server traffic", "SubnetId": {"Ref": "InformaticaServerSubnetID"}, "GroupSet": [{"Ref": "InfaDomainSecurityGroup"}], "SourceDestCheck": "true", "Tags": [{"Key": "Name", "Value": "Informatica Network Interface"}]}}, "AdministrationServerAssoc": {"Type": "AWS::EC2::EIPAssociation", "Properties": {"AllocationId": {"Fn::GetAtt": ["AdministrationServerEIP", "AllocationId"]}, "NetworkInterfaceId": {"Ref": "AdministrationServerNetInterface"}}}, "AdministrationServer": {"Type": "AWS::EC2::Instance", "Metadata": {"AWS::CloudFormation::Authentication": {"S3AccessCreds": {"type": "S3", "roleName": {"Ref": "InformaticaInstanceRole"}, "buckets": [{"Ref": "InformaticaKeyS3Bucket"}]}}, "AWS::CloudFormation::Init": {"configSets": {"InstallAndRun": ["Install", "Configure1", "Configure2"]}, "Install": {"files": {"/etc/cfn/cfn-hup.conf": {"content": {"Fn::Join": ["", ["[main]\n", "stack=", {"Ref": "AWS::StackName"}, "\n", "interval=1\n", "region=", {"Ref": "AWS::Region"}, "\n"]]}, "mode": "000400", "owner": "ec2-user", "group": "ec2-user"}, "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {"content": {"Fn::Join": ["", ["[cfn-auto-reloader-hook]\n", "triggers=post.update\n", "path=Resources.AdministrationServer.Metadata.AWS::CloudFormation::Init\n", "action=/opt/aws/bin/cfn-init -s ", {"Ref": "AWS::StackId"}, " -r AdministrationServer ", " --region ", {"Ref": "AWS::Region"}, "\n", "runas=root\n"]]}, "mode": "000400", "owner": "ec2-user", "group": "ec2-user"}, "/home/ec2-user/Mercury_Setup/scanner1.sh": {"content": {"Fn::Join": ["", ["curl -u Administrator:Administrator -H \"Content-Type: application/json\" -X POST -d '{\"resourceIdentifier\":{\"resourceName\":\"'$1'\",\"description\":\" \",\"resourceTypeId\":\"amazons3\",\"resourceTypeName\":\"Amazon S3\",\"resourceTypeVersion\":\"\"},\"scannerConfigurations\":[{\"scanner\":{\"scannerId\":\"AmazonS3Scanner\",\"providerTypeId\":\"CORE\",\"providerTypeName\":\"Source Metadata\"},\"enabled\":true,\"configOptions\":[{\"optionId\":\"URI\",\"optionValues\":[\"'$1'.s3.amazonaws.com\"]},{\"optionId\":\"SourceDirectory\",\"optionValues\":[\"/\"]},{\"optionId\":\"Bucket\",\"optionValues\":[\"'$1'\"]},{\"optionId\":\"FileType\",\"optionValues\":[\"All\"]},{\"optionId\":\"IncludeUnsupportedTypes\",\"optionValues\":[false]},{\"optionId\":\"IncludeSubdirectory\",\"optionValues\":[false]},{\"optionId\":\"Memory\",\"optionValues\":[\"Low\"]},{\"optionId\":\"AWSSecretAccessKey\",\"optionValues\":[\"'$9'\"]},{\"optionId\":\"AWSAccessKeyID\",\"optionValues\":[\"'${10}'\"]}]},{\"scanner\":{\"scannerId\":\"CompositeDomainScanner\",\"providerTypeId\":\"CompositeDomainDiscovery\",\"providerTypeName\":\"Composite Domain Discovery\"},\"enabled\":false,\"configOptions\":[{\"optionId\":\"SelectCompositeDataDomains\",\"optionValues\":[\"AllCompositeDataDomains\"]}]},{\"scanner\":{\"scannerId\":\"ProfileScanner\",\"providerTypeId\":\"Profiling\",\"providerTypeName\":\"Data Discovery\"},\"enabled\":false,\"configOptions\":[{\"optionId\":\"ProfilingRunOptions\",\"optionValues\":[\"ColumnProfiling\"]},{\"optionId\":\"SamplingOptions\",\"optionValues\":[\"NoSampling\"]},{\"optionId\":\"runOnHadoop\",\"optionValues\":[\"Native\"]},{\"optionId\":\"SimilarityProfilingRunOptions\",\"optionValues\":[]},{\"optionId\":\"securityDomain\",\"optionValues\":[\"Native\"]},{\"optionId\":\"Priority\",\"optionValues\":[\"low\"]},{\"optionId\":\"ExcludeViews\",\"optionValues\":[false]},{\"optionId\":\"Incremental\",\"optionValues\":[false]},{\"optionId\":\"SelectDataDomains\",\"optionValues\":[]},{\"optionId\":\"DataDomainConformanceOption\",\"optionValues\":[\"DataDomain\"]},{\"optionId\":\"SamplingOptions1\",\"optionValues\":[]},{\"optionId\":\"SimilarityDISConnectionOption\",\"optionValues\":[\"SameAsProfileConfiguration\"]}]}]}' http://$8:8085/access/1/catalog/resources \n", "\n", "curl -u Administrator:Administrator -H \"Content-Type: application/json\" -X POST -d '{\"resourceIdentifier\":{\"resourceName\":\"'$2'\",\"description\":\" \",\"resourceTypeId\":\"REDSHIFT\",\"resourceTypeName\":\"Amazon Redshift\",\"resourceTypeVersion\":\"\"},\"scannerConfigurations\":[{\"scanner\":{\"scannerId\":\"RedShiftScanner\",\"providerTypeId\":\"CORE\",\"providerTypeName\":\"Source Metadata\"},\"enabled\":true,\"configOptions\":[{\"optionId\":\"Host\",\"optionValues\":[\"'$3'\"]},{\"optionId\":\"Port\",\"optionValues\":['$4']},{\"optionId\":\"Database\",\"optionValues\":[\"'$5'\"]},{\"optionId\":\"User\",\"optionValues\":[\"'$6'\"]},{\"optionId\":\"Import system objects\",\"optionValues\":[false]},{\"optionId\":\"S3BucketName\",\"optionValues\":[\"'$1'\"]},{\"optionId\":\"Memory\",\"optionValues\":[\"Medium\"]},{\"optionId\":\"Password\",\"optionValues\":[\"'$7'\"]}]},{\"scanner\":{\"scannerId\":\"CompositeDomainScanner\",\"providerTypeId\":\"CompositeDomainDiscovery\",\"providerTypeName\":\"Composite Domain Discovery\"},\"enabled\":true,\"configOptions\":[{\"optionId\":\"SelectCompositeDataDomains\",\"optionValues\":[\"AllCompositeDataDomains\"]}]},{\"scanner\":{\"scannerId\":\"ProfileScanner\",\"providerTypeId\":\"Profiling\",\"providerTypeName\":\"Data Discovery\"},\"enabled\":false,\"configOptions\":[{\"optionId\":\"ProfilingRunOptions\",\"optionValues\":[]},{\"optionId\":\"SamplingOptions\",\"optionValues\":[]},{\"optionId\":\"SelectDataDomains\",\"optionValues\":[]},{\"optionId\":\"DataDomainConformanceOption\",\"optionValues\":[\"DataDomain\"]},{\"optionId\":\"runOnHadoop\",\"optionValues\":[\"Native\"]},{\"optionId\":\"SimilarityProfilingRunOptions\",\"optionValues\":[]},{\"optionId\":\"SamplingOptions1\",\"optionValues\":[]},{\"optionId\":\"SimilarityDISConnectionOption\",\"optionValues\":[\"SameAsProfileConfiguration\"]},{\"optionId\":\"securityDomain\",\"optionValues\":[\"Native\"]},{\"optionId\":\"Priority\",\"optionValues\":[\"low\"]},{\"optionId\":\"ExcludeViews\",\"optionValues\":[false]},{\"optionId\":\"Incremental\",\"optionValues\":[false]}]}]}' http://$8:8085/access/1/catalog/resources \n"]]}, "mode": "000770", "owner": "ec2-user", "group": "ec2-user"}, "/home/ec2-user/Mercury_Setup/replaceHostname.sh": {"content": {"Fn::Join": ["", ["#!/bin/bash\n", "sudo chmod -R 777 /var/log/ \n", "sudo chown -R root /opt/informatica \n", "sudo chgrp -R root /opt/informatica \n", "privateIp=$(curl http://169.254.169.254/latest/meta-data/local-ipv4) \n", "Adminpublicip=$(curl http://169.254.169.254/latest/meta-data/public-hostname) \n", "sudo su -c \"sed -i '$ a $privateIp $Adminpublicip  infadomain.infa.com  infadomain' /etc/hosts \" \n", "oracleaddress=", {"Fn::GetAtt": ["InfaDB", "Endpoint.Address"]}, "\n", "oracleip=$(ping -c 1 $oracleaddress | grep 'bytes' | cut -d '(' -f2 | cut -d ')' -f1) \n", "sudo su -c \"sed -i '$ a $oracleip $oracleaddress domaindb' /etc/hosts \" \n", "cluster_id=", {"Ref": "EMRCluster"}, "\n", "region=", {"Ref": "AWS::Region"}, "\n", "masterip=`aws emr list-instances --cluster-id $cluster_id --instance-group-types \"MASTER\" --query 'Instances[*].{ID:PrivateIpAddress}' --region $region | grep ID | cut -d \":\" -f2 | sed 's/[ ,\"]//g'` \n", "masteraddr=`aws emr list-instances --cluster-id $cluster_id --instance-group-types \"MASTER\" --query 'Instances[*].{ID:PrivateDnsName}' --region $region | grep ID | cut -d \":\" -f2 | sed 's/[ ,\"]//g'` \n", "master_short=`echo $masteraddr | grep . | cut -d \".\" -f1 | sed 's/[ ,\"]//g'` \n", "coreip=`aws emr list-instances --cluster-id $cluster_id --instance-group-types \"CORE\" --query 'Instances[*].{ID:PrivateIpAddress}' --region $region | grep ID | cut -d \":\" -f2 | sed 's/[ ,\"]//g'` \n", "coreaddr=`aws emr list-instances --cluster-id $cluster_id --instance-group-types \"CORE\" --query 'Instances[*].{ID:PrivateDnsName}' --region $region | grep ID | cut -d \":\" -f2 | sed 's/[ ,\"]//g'` \n", "sudo su -c \"sed -i '$ a $masterip $masteraddr $master_short' /etc/hosts \" \n", "declare -a list=( $coreaddr ) \n", "count=0; \n", "for i in ${coreip[@]} \n", "do  \n", "count=$((count+1)) \n", "master_short=`echo ${list[count-1]} | grep . | cut -d \".\" -f1 | sed 's/[ ,\"]//g'` \n", "sudo su -c \"sed -i '$ a  $i ${list[count-1]} $master_short' /etc/hosts \" \n ", "done \n", "etcHostsConfigOfCluster=\"", {"Fn::If": ["SingleNodeCnd", {"Fn::Join": [" ", [{"Fn::GetAtt": ["HadoopGateway", "PrivateIp"]}, {"Fn::GetAtt": ["HadoopGateway", "PublicDnsName"]}, {"Fn::GetAtt": ["HadoopGateway", "PublicDnsName"]}, {"Fn::GetAtt": ["HadoopGateway", "PrivateDnsName"]}]]}, {"Fn::If": ["CreateLargeClusterCnd", {"Fn::Join": ["\\\\\\n", [{"Fn::Join": [" ", [{"Fn::GetAtt": ["MultiNodeHadoopGateway", "PrivateIp"]}, {"Fn::GetAtt": ["MultiNodeHadoopGateway", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopGateway", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopGateway", "PrivateDnsName"]}]]}, {"Fn::Join": [" ", [{"Fn::GetAtt": ["MultiNodeHadoopNode2", "PrivateIp"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode2", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode2", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode2", "PrivateDnsName"]}]]}, {"Fn::Join": [" ", [{"Fn::GetAtt": ["MultiNodeHadoopNode3", "PrivateIp"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode3", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode3", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode3", "PrivateDnsName"]}]]}, {"Fn::Join": [" ", [{"Fn::GetAtt": ["MultiNodeHadoopNode4", "PrivateIp"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode4", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode4", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode4", "PrivateDnsName"]}]]}, {"Fn::Join": [" ", [{"Fn::GetAtt": ["MultiNodeHadoopNode5", "PrivateIp"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode5", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode5", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode5", "PrivateDnsName"]}]]}, {"Fn::Join": [" ", [{"Fn::GetAtt": ["MultiNodeHadoopNode6", "PrivateIp"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode6", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode6", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode6", "PrivateDnsName"]}]]}]]}, {"Fn::Join": ["\\\\\\n", [{"Fn::Join": [" ", [{"Fn::GetAtt": ["MultiNodeHadoopGateway", "PrivateIp"]}, {"Fn::GetAtt": ["MultiNodeHadoopGateway", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopGateway", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopGateway", "PrivateDnsName"]}]]}, {"Fn::Join": [" ", [{"Fn::GetAtt": ["MultiNodeHadoopNode2", "PrivateIp"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode2", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode2", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode2", "PrivateDnsName"]}]]}, {"Fn::Join": [" ", [{"Fn::GetAtt": ["MultiNodeHadoopNode3", "PrivateIp"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode3", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode3", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode3", "PrivateDnsName"]}]]}]]}]}]}, "\"\n", "publicdns=", {"Fn::GetAtt": ["EMRCluster", "MasterPublicDNS"]}, "\n", "privatedns=`aws ec2 describe-instances  --filters Name=dns-name,Values=$publicdns --query 'Reservations[*].Instances[*].{ID:PrivateDnsName}' --region $region | grep ID | cut -d \":\" -f2 | sed 's/[ ,\"]//g'` \n", "\n", "", "sudo su -c \"echo -e $etcHostsConfigOfCluster >> /etc/hosts \"  \n", {"Fn::If": ["SingleNodeCnd", {"Fn::Join": ["", ["sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["HadoopGateway", "PublicDnsName"]}, " \"sudo su -c 'echo -e $etcHostsConfigOfCluster >> /etc/hosts'\" \n"]]}, {"Fn::If": ["CreateLargeClusterCnd", {"Fn::Join": ["", ["sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["MultiNodeHadoopGateway", "PublicDnsName"]}, " \"sudo su -c 'echo -e $etcHostsConfigOfCluster >> /etc/hosts'\" \n", "sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["MultiNodeHadoopNode2", "PublicDnsName"]}, " \"sudo su -c  'echo -e $etcHostsConfigOfCluster >> /etc/hosts'\" \n", "sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["MultiNodeHadoopNode3", "PublicDnsName"]}, " \"sudo su -c  'echo -e $etcHostsConfigOfCluster >>  /etc/hosts'\" \n", "sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["MultiNodeHadoopNode4", "PublicDnsName"]}, " \"sudo su -c  'echo -e $etcHostsConfigOfCluster >> /etc/hosts'\" \n", "sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["MultiNodeHadoopNode5", "PublicDnsName"]}, " \"sudo su -c  'echo -e $etcHostsConfigOfCluster >> /etc/hosts'\" \n", "sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["MultiNodeHadoopNode6", "PublicDnsName"]}, " \"sudo su -c  'echo -e $etcHostsConfigOfCluster >> /etc/hosts'\" \n"]]}, {"Fn::Join": ["", ["sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["MultiNodeHadoopGateway", "PublicDnsName"]}, " \"sudo su -c 'echo -e $etcHostsConfigOfCluster >> /etc/hosts'\" \n", "sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["MultiNodeHadoopNode2", "PublicDnsName"]}, " \"sudo su -c  'echo -e $etcHostsConfigOfCluster >> /etc/hosts'\" \n", "sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["MultiNodeHadoopNode3", "PublicDnsName"]}, " \"sudo su -c  'echo -e $etcHostsConfigOfCluster >>  /etc/hosts'\" \n"]]}]}]}, "\n", "privateipemr=`aws ec2 describe-instances  --filters Name=dns-name,Values=$publicdns --query 'Reservations[*].Instances[*].{ID:PrivateIpAddress}' --region $region | grep ID | cut -d \":\" -f2 | sed 's/[ ,\"]//g'` \n", "sed -i -e 's/ip-172-31-20-85.us-west-2.compute.internal/'$privatedns'/g' /home/ec2-user/hadoop/core-site.xml\n", "sed -i -e 's/ip-172-31-20-85.us-west-2.compute.internal/'$privatedns'/g' /home/ec2-user/hadoop/yarn-site.xml\n", "sed -i -e 's/172.31.20.85/'$privateipemr'/g' /home/ec2-user/hadoop/yarn-site.xml\n", "sed -i -e 's/ip-172-31-20-85.us-west-2.compute.internal/'$privatedns'/g' /home/ec2-user/hadoop/mapred-site.xml\n", "sed -i -e 's/ip-172-31-20-85.us-west-2.compute.internal/'$privatedns'/g' /home/ec2-user/hadoop/hive-site.xml\n", "sed -i -e 's/ip-172-31-20-85.us-west-2.compute.internal/'$privatedns'/g' /home/ec2-user/hadoop/hdfs-site.xml\n", "sed -i -e 's/ip-172-31-20-85.us-west-2.compute.internal/'$privatedns'/g' /home/ec2-user/hadoop/hbase-site.xml\n", "sudo rm -rf /home/ec2-user/hadoop.zip \n", "zip -r /home/ec2-user/hadoop.zip /home/ec2-user/hadoop  \n", "sudo yum -y install ntp \n", "sudo service ntpd start \n", "sudo service ntpd status \n"]]}, "mode": "000770", "owner": "ec2-user", "group": "ec2-user"}, "/home/ec2-user/Mercury_Setup/infastartservice.sh": {"content": {"Fn::Join": ["", ["#!/bin/bash\n", "INFA_HOME=/opt/informatica \n", "export ORACLE_BASE=/usr/lib/oracle/12.2/client64 \n", "export ORACLE_HOME=/usr/lib/oracle/12.2/client64 \n", "export ODBCHOME=/opt/informatica/ODBC7.1 \n", "export ODBCINI=/opt/informatica/ODBC7.1/odbc.ini \n", "export ORACLE_INVENTORY=/opt/oracle/oraInventory \n", "export LANG=C \n", "export LC_ALL=C \n", "export TNS_ADMIN=/usr/lib/oracle/12.2/client64/ \n", "export ORACLE_INVENTORY=/opt/oracle/oraInventory \n", "export JAVA_HOME=/opt/informatica/java \n", "export JRE_HOME=/opt/informatica/java/jre \n", "export INFA_JDK_HOME=/opt/informatica/java \n", "export INFA_HOME=/opt/informatica \n", "export PM_HOME=/opt/informatica/server/bin \n", "export INFA_RESOURSES=/opt/informatica/services/shared/bin \n", "export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/usr/lib/oracle/12.2/client64/bin:/usr/sbin:/opt/informatica/ODBC7.1:/opt/informatica/ODBC7.1/odbc.ini:/opt/informatica/java/lib:/opt/informatica/java/jre/lib:/opt/informatica/services/shared/bin:/opt/informatica/server/bin:/opt/informatica/java/bin:~/.local/bin \n", "export LD_LIBRARY_PATH=/usr/lib/oracle/12.2/client64/lib:/lib:/usr/lib:/usr/lib/oracle/12.2/client64/bin:/usr/lib/oracle/12.2/client64/lib:/opt/informatica/ODBC7.1/lib:/opt/informatica/java/lib:/opt/informatica/java/jre/lib:/opt/informatica/services/shared/bin:/opt/informatica/server/bin \n", "export HOME=/root \n", "export LANG=en_US.UTF-8 \n", "export USER=root \n", "export SHELL=/bin/bash \n", "export HOSTNAME=infadomain.infa.com \n", "cd $INFA_HOME/isp/bin \n", "LICENSE_NAME=EICLicense.key", "\n", "administratorName=", {"Ref": "InformaticaAdminUsername"}, "\n", "administratorPassword=", {"Ref": "InformaticaAdminPassword"}, "\n", "echo \"Changing the Doamin Hostname\" \n", "Adminpublicip=$(curl http://169.254.169.254/latest/meta-data/public-hostname) \n", "/opt/informatica/isp/bin/infasetup.sh  updateGatewayNode -na $Adminpublicip:6005 -rst \n", "sleep 30  \n", "/sbin/service infaservice start  \n", "sleep 180  \n", "echo \"Creating Infa user\"  \n", "if [ $administratorName == \"Administrator\" ] \n", "then\n", "/opt/informatica/isp/bin/infacmd.sh  resetPassword -dn Domain -un Administrator -pd Administrator -ru Administrator -rp $administratorPassword \n", "else \n", "/opt/informatica/isp/bin/infacmd.sh createUser -dn Domain -un Administrator -pd Administrator -nu $administratorName -np $administratorPassword -nf $administratorName  \n", "echo \"Creating roles and gropus to user\"  \n", "/opt/informatica/isp/bin/infacmd.sh assignRoleTouser -dn Domain -un Administrator -pd Administrator -eu $administratorName -rn Administrator -sn Domain  \n", "/opt/informatica/isp/bin/infacmd.sh addUserToGroup -dn Domain -un Administrator -pd Administrator -eu $administratorName -gn Administrator  \n", "fi \n", "echo \"Disabling all the services MRS, DIS and CMS\"  \n", "/opt/informatica/isp/bin/infacmd.sh disableService -dn Domain -un Administrator -pd Administrator -sn MRS -mo ABORT  \n", "/opt/informatica/isp/bin/infacmd.sh disableService -dn Domain -un Administrator -pd Administrator -sn DIS -mo ABORT  \n", "/opt/informatica/isp/bin/infacmd.sh disableService -dn Domain -un Administrator -pd Administrator -sn CMS -mo ABORT  \n", "echo \"Unassigning the licenses\"  \n", "/opt/informatica/isp/bin/infacmd.sh unassignLicense -dn Domain -un Administrator -pd Administrator -sn MRS -ln 10.2.0_License_infadomain.infa.com_9193  \n", "/opt/informatica/isp/bin/infacmd.sh unassignLicense -dn Domain -un Administrator -pd Administrator -sn DIS -ln 10.2.0_License_infadomain.infa.com_9193  \n", "/opt/informatica/isp/bin/infacmd.sh unassignLicense -dn Domain -un Administrator -pd Administrator -sn CMS -ln 10.2.0_License_infadomain.infa.com_9193  \n", "echo \"Removing the licenses\"  \n", "/opt/informatica/isp/bin/infacmd.sh removeLicense -dn Domain -un Administrator -pd Administrator -ln 10.2.0_License_infadomain.infa.com_9193  \n", "echo \"Adding the New licenses\"  \n", "/opt/informatica/isp/bin/infacmd.sh addLicense -dn Domain -un Administrator -pd Administrator -ln ${LICENSE_NAME} -lf /mnt1/EICLicense.key  \n", "echo \"Assigning the New licenses to MRS , DIS and CMS \"  \n", "/opt/informatica/isp/bin/infacmd.sh assignLicense -dn Domain -un Administrator -pd Administrator -sn MRS -ln ${LICENSE_NAME}  \n", "/opt/informatica/isp/bin/infacmd.sh assignLicense -dn Domain -un Administrator -pd Administrator -sn DIS -ln ${LICENSE_NAME}  \n", "/opt/informatica/isp/bin/infacmd.sh assignLicense -dn Domain -un Administrator -pd Administrator -sn CMS -ln ${LICENSE_NAME}  \n", "echo \"Enabling the to MRS , DIS and CMS \"  \n", "/opt/informatica/isp/bin/infacmd.sh enableService -dn Domain -un Administrator -pd Administrator -sn _AdminConsole  \n", "/opt/informatica/isp/bin/infacmd.sh enableservice -dn Domain -un Administrator -pd Administrator -sn MRS  \n", "/opt/informatica/isp/bin/infacmd.sh enableservice -dn Domain -un Administrator -pd Administrator -sn DIS  \n", "/opt/informatica/isp/bin/infacmd.sh enableservice -dn Domain -un Administrator -pd Administrator -sn CMS  \n", "sampledata=", {"Ref": "ImportSampleData"}, "\n", "if [[ $sampledata == \"Yes\" ]] \n", "then \n", "/opt/informatica/isp/bin/infacmd.sh mrs deleteContents -dn Domain -un Administrator -pd Administrator -sn MRS  \n", "sleep 30 \n", "/opt/informatica/isp/bin/infacmd.sh mrs restoreContents -dn Domain -un Administrator -pd Administrator -sn MRS -if /home/ec2-user/Mercury_Setup/MRSBackup.mrep \n", "sleep 30 \n", "fi \n"]]}, "mode": "000770", "owner": "ec2-user", "group": "ec2-user"}, "/home/ec2-user/Mercury_Setup/createConnections.sh": {"content": {"Fn::Join": ["", ["echo \"Creating the CCO Object for EMR and Connection for s3 and Redshift \"  \n", "/opt/informatica/isp/bin/infacmd.sh cluster createConfiguration -dn Domain -un Administrator -pd Administrator -re 30 -cn CCOEMR -dt EMR -path /home/ec2-user/hadoop.zip \n", "publicdns=", {"Fn::GetAtt": ["EMRCluster", "MasterPublicDNS"]}, "\n", "region=", {"Ref": "AWS::Region"}, "\n", "privatedns=`aws ec2 describe-instances  --filters Name=dns-name,Values=$publicdns --query 'Reservations[*].Instances[*].{ID:PrivateDnsName}' --region $region | grep ID | cut -d \":\" -f2 | sed 's/[ ,\"]//g'` \n", "/opt/informatica/isp/bin/infacmd.sh createConnection -dn Domain -un Administrator -pd Administrator -ct HADOOP -cn HADOOP -o clusterConfigId=CCOEMR \n", "/opt/informatica/isp/bin/infacmd.sh  createConnection -dn Domain -un Administrator -pd Administrator -cn HIVE -cid HIVE -ct HIVE -o connectString=jdbc:hive2://$privatedns:10000/default enableQuotes=false metadataConnString=jdbc:hive2://$privatedns:10000/default bypassHiveJDBCServer=false pushDownMode=true relationalSourceAndTarget=true databaseName=default hiveWarehouseDirectoryOnHDFS='/user/hive/warehouse' UserName='hive' clusterConfigId=CCOEMR \n", "/opt/informatica/isp/bin/infacmd.sh createConnection -dn Domain -un Administrator -pd Administrator -cn HDFS -cid HDFS -ct \"HadoopFileSystem\" -cun root -o NAMENODEURL=hdfs://$privatedns:8020/ clusterConfigId=CCOEMR \n", "/opt/informatica/isp/bin/infacmd.sh createConnection -dn Domain -un Administrator -pd Administrator -ct HBASE -cn HBASE -o clusterConfigId=CCOEMR \n", "/opt/informatica/isp/bin/infacmd.sh isp createConnection -dn Domain -un Administrator -pd Administrator -cn RedShift -ct AMAZONREDSHIFT -o username=", {"Ref": "RedshiftUsername"}, " password=", {"Ref": "RedshiftPassword"}, "  CLUSTERNODETYPE=dc1.large NUMBEROFNODESINCLUSTER=1 JDBCURL=jdbc:redshift://", {"Fn::GetAtt": ["RedshiftCluster", "Endpoint.Address"]}, ":", {"Fn::GetAtt": ["RedshiftCluster", "Endpoint.Port"]}, "/", {"Ref": "RedshiftDatabaseName"}, "\n", "/opt/informatica/isp/bin/infacmd.sh isp createConnection -dn Domain -un Administrator -pd Administrator -cn S3 -ct AMAZONS3 -o \"regionName='", {"Fn::FindInMap": ["S3ConnectionMap", {"Ref": "AWS::Region"}, "REGION"]}, "'", " FolderPath=", {"Ref": "S3BucketName"}, "\" \n"]]}, "mode": "000770", "owner": "ec2-user", "group": "ec2-user"}, "/home/ec2-user/Mercury_Setup/ldmstartup.sh": {"content": {"Fn::Join": ["", ["LICENSE_NAME=EICLicense.key", "\n", "administratorName=", {"Ref": "InformaticaAdminUsername"}, "\n", "administratorPassword=", {"Ref": "InformaticaAdminPassword"}, "\n", "IHSHOSTNAME=", {"Fn::If": ["SingleNodeCnd", {"Fn::GetAtt": ["HadoopGateway", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopGateway", "PublicDnsName"]}]}, "\n", "IHSNODES=", {"Fn::If": ["SingleNodeCnd", {"Fn::GetAtt": ["HadoopGateway", "PublicDnsName"]}, {"Fn::If": ["CreateLargeClusterCnd", {"Fn::Join": [",", [{"Fn::GetAtt": ["MultiNodeHadoopGateway", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode2", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode3", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode4", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode5", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode6", "PublicDnsName"]}]]}, {"Fn::Join": [",", [{"Fn::GetAtt": ["MultiNodeHadoopGateway", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode2", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode3", "PublicDnsName"]}]]}]}]}, "\n", "echo \"Creating the IHS \"  \n", "/opt/informatica/isp/bin/infacmd.sh ihs createService -dn Domain -nn node01 -un Administrator -pd Administrator -sn IHS -p 9085 -hgh $IHSHOSTNAME -hgp 8080 -hn $IHSNODES -gu root  \n", "/opt/informatica/isp/bin/infacmd.sh ISP assignLicense -dn Domain -un Administrator -pd Administrator -ln ${LICENSE_NAME} -sn IHS  \n", "/opt/informatica/isp/bin/infacmd.sh ihs updateServiceOptions -dn Domain -un Administrator -pd Administrator -sn IHS -o IcsCustomOptions.ihs.enable.memcheck=false  \n", "/opt/informatica/isp/bin/infacmd.sh ihs updateServiceOptions -dn Domain -un Administrator -pd Administrator -sn IHS -o IcsCustomOptions.ihs.enable.cpucheck=false  \n", "/opt/informatica/isp/bin/infacmd.sh ihs updateServiceOptions -dn Domain -un Administrator -pd Administrator -sn IHS -o IcsCustomOptions.ihs.enable.diskcheck=false  \n", "/opt/informatica/isp/bin/infacmd.sh ihs updateServiceOptions -dn Domain -un Administrator -pd Administrator -sn IHS -o IcsCustomOptions.ihs.ambari.testing=true  \n", "echo \"Creating the LDM \"  \n", "/opt/informatica/isp/bin/infacmd.sh ldm createService -dn Domain  -nn node01 -un Administrator -pd Administrator -sn LDM -mrs MRS -mrsun Administrator -mrspd Administrator -dis DIS -cms CMS -p 8085 -tls false -ise false -ihsn IHS -isc false -cssl false  \n", "/opt/informatica/isp/bin/infacmd.sh assignlicense -dn Domain -un Administrator -pd Administrator -sn LDM -ln ${LICENSE_NAME}  \n", "/opt/informatica/isp/bin/infacmd.sh ldm updateServiceOptions -dn Domain -un Administrator -pd Administrator -sn LDM -o LdmCustomOptions.ldm.repo.content.create.timeout.millis=1200000  \n", "loadType=", {"Fn::FindInMap": ["ClusterSizeMapping", {"Ref": "ICSClusterSize"}, "loadtype"]}, "\n", "/opt/informatica/isp/bin/infacmd.sh ldm updateServiceOptions -dn Domain -un Administrator -pd Administrator -sn LDM -o LdmCustomOptions.loadType=$loadType  \n", "echo \"Creating the AS \"  \n", "/opt/informatica/isp/bin/infacmd.sh as createService -dn Domain -nn node01 -sn AS -un Administrator -pd Administrator -rs MRS -ds DIS -ffl /tmp -cs LDM -csau Administrator -csap Administrator -au Administrator -ap Administrator -bgefd /tmp -HttpPort 8089 >> /installation.log \n", "/opt/informatica/isp/bin/infacmd.sh assignLicense -dn Domain -un Administrator -pd Administrator -ln $LICENSE_NAME -sn AS >> /installation.log \n", "/opt/informatica/isp/bin/infacmd.sh as updateServiceOptions -dn Domain -sn AS -un Administrator -pd Administrator  -o BGExport.BGPermanentAttachmentFileLocation=/tmp  \n", "sampledata=", {"Ref": "ImportSampleData"}, "\n", "echo \"Enabling the IHS , LDM and AS \"  \n", "/opt/informatica/isp/bin/infacmd.sh ISP enableService -dn Domain -un Administrator -pd Administrator -sn IHS  \n", " if [[ $sampledata == \"Yes\" ]] \n", " then \n", "/opt/informatica/isp/bin/infacmd.sh ldm restoreContents -dn Domain -un Administrator -pd Administrator -sn LDM -if /home/ec2-user/Mercury_Setup/CatalogBackup.zip \n", "sleep 30 \n", "fi \n", "/opt/informatica/isp/bin/infacmd.sh enableservice -dn Domain -un Administrator -pd Administrator -sn LDM \n", "sleep 10m", "\n", "/opt/informatica/isp/bin/infacmd.sh enableService -dn Domain -un Administrator -pd Administrator -sn AS \n"]]}, "mode": "000770", "owner": "ec2-user", "group": "ec2-user"}, "/home/ec2-user/Mercury_Setup/scanner_creation.sh": {"content": {"Fn::Join": ["", ["#!/bin/bash\n", "LICENSE_NAME=", {"Ref": "InformaticaKeyName"}, "\n", "administratorName=", {"Ref": "InformaticaAdminUsername"}, "\n", "administratorPassword=", {"Ref": "InformaticaAdminPassword"}, "\n", "status=\"$(/opt/informatica/isp/bin/infacmd.sh isp getServiceStatus -dn Domain -un Administrator -pd Administrator -sn LDM)\"", "\n", "echo $status", "\n", "if [ -z \"${status##*Enabled*}\" ]", "\n", "then", "\n", "echo \"connected to LDM.Starting scanner creation\"", "\n", "else", "\n", "echo \"Waiting for LDM to come up\"", "\n", "sleep 20m", "\n", "/opt/informatica/isp/bin/infacmd.sh enableService -dn Domain -un Administrator -pd Administrator -sn AS", "\n", "fi", "\n", "sh /home/ec2-user/Mercury_Setup/scanner1.sh ", {"Ref": "S3BucketName"}, " ", {"Ref": "RedshiftDatabaseName"}, " ", {"Fn::GetAtt": ["RedshiftCluster", "Endpoint.Address"]}, " ", {"Fn::GetAtt": ["RedshiftCluster", "Endpoint.Port"]}, " ", {"Ref": "RedshiftDatabaseName"}, " ", {"Ref": "RedshiftUsername"}, " ", {"Ref": "RedshiftPassword"}, " ", "infadomain.infa.com", " ", {"Fn::GetAtt": ["InformaticaS3UserAccessKey", "SecretAccessKey"]}, " ", {"Ref": "InformaticaS3UserAccessKey"}]]}, "mode": "000770", "owner": "ec2-user", "group": "ec2-user"}, "/home/ec2-user/Mercury_Setup/cleanupScripts.sh": {"content": {"Fn::Join": ["", ["#!/bin/bash\n", "rm -f /home/ec2-user/Mercury_Setup/infastartservice.sh \n", "rm -f /home/ec2-user/Mercury_Setup/replaceHostname.sh \n", "rm -f /home/ec2-user/Mercury_Setup/config_template.xml \n", "rm -f /home/ec2-user/Mercury_Setup/mercury_setup.jar \n", "rm -f /home/ec2-user/Mercury_Setup/scanner1.sh \n", "rm -f /home/ec2-user/Mercury_Setup/ldmstartup.sh \n", "rm -f /home/ec2-user/Mercury_Setup/createConnections.sh \n", "rm -f /home/ec2-user/Mercury_Setup/mercury_setup.jar \n", "rm -f /home/ec2-user/Mercury_Setup/scanner.sh \n", "rm -f /home/ec2-user/Mercury_Setup/CatalogBackup.zip \n", "rm -f /home/ec2-user/Mercury_Setup/MRSBackup.mrep \n", "rm -rf /home/ec2-user/hadoop \n", "rm -f /home/ec2-user/hadoop.zip"]]}, "mode": "000770", "owner": "ec2-user", "group": "ec2-user"}, "/mnt1/EICLicense.key": {"source": {"Fn::Join": ["", ["https://", {"Ref": "InformaticaKeyS3Bucket"}, ".s3.amazonaws.com/", {"Ref": "InformaticaKeyName"}]]}, "mode": "000400", "owner": "ec2-user", "group": "ec2-user", "authentication": "S3AccessCreds"}}}, "Configure1": {"commands": {"01_ReplaceHostname": {"command": " /home/ec2-user/Mercury_Setup/replaceHostname.sh"}}, "services": {"sysvinit": {"infaservice": {"enabled": "true", "ensureRunning": "true"}, "cfn-hup": {"enabled": "true", "ensureRunning": "true", "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}}}}, "Configure2": {"commands": {"02_MercurySetup": {"command": " /home/ec2-user/Mercury_Setup/infastartservice.sh"}, "03_Connections": {"command": " /home/ec2-user/Mercury_Setup/createConnections.sh"}, "04_LDMSetup": {"command": " /home/ec2-user/Mercury_Setup/ldmstartup.sh", "ignoreErrors": "true"}, "05_LDMScanner": {"command": " /home/ec2-user/Mercury_Setup/scanner_creation.sh", "ignoreErrors": "true"}, "06_cleanupScripts": {"command": " /home/ec2-user/Mercury_Setup/cleanupScripts.sh"}}}}}, "Properties": {"IamInstanceProfile": {"Ref": "InformaticaInstanceProfile"}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "INFAADMINHVM"]}, "InstanceType": {"Ref": "InformaticaServerInstanceType"}, "KeyName": {"Ref": "KeyName"}, "InstanceInitiatedShutdownBehavior": "stop", "NetworkInterfaces": [{"NetworkInterfaceId": {"Ref": "AdministrationServerNetInterface"}, "DeviceIndex": "0"}], "Tags": [{"Key": "Name", "Value": {"Fn::Join": ["", ["InformaticaDomain-", {"Ref": "AWS::StackName"}]]}}]}, "CreationPolicy": {"ResourceSignal": {"Timeout": "PT5H"}}, "DependsOn": ["InfaDB", "AdministrationServerNetInterface", "WaitForClusterInstancesCondition", "EMRCluster", "RedshiftCluster"]}}, "Outputs": {"InstanceID": {"Description": "Informatica Domain Host Name", "Value": {"Ref": "AdministrationServer"}}, "InformaticaAdminConsoleURL": {"Description": "Informatica Administrator Console", "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["AdministrationServer", "PublicDnsName"]}, ":6008"]]}}, "EICAdminURL": {"Description": "EIC Administrator URL", "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["AdministrationServer", "PublicDnsName"]}, ":8085", "/ldmadmin"]]}}, "EICCatalogURL": {"Description": "Informatica EIC User Console", "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["AdministrationServer", "PublicDnsName"]}, ":8085", "/ldmcatalog"]]}}, "EtcHostFileEntry": {"Description": "Etc host file entry that are to be added to /etc/hosts file for accessing the domain using hostname of the Adminstrative Server", "Value": {"Fn::Join": [" ", [{"Fn::GetAtt": ["AdministrationServer", "PublicIp"]}, "infadomain.infa.com infadomain"]]}}, "InformaticaHadoopClusterURL": {"Description": "IHS Hadoop Gateway node", "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["HadoopGateway", "PublicDnsName"]}, ":8080"]]}, "Condition": "SingleNodeCnd"}, "IHSMultiNodeClusterURL": {"Description": "IHS Hadoop Gateway node", "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["MultiNodeHadoopGateway", "PublicDnsName"]}, ":8080"]]}, "Condition": "MultipleNodeCnd"}, "EMRResourceManagerURL": {"Description": "EMR Resource Manager", "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["EMRCluster", "MasterPublicDNS"]}, ":8088"]]}}, "S3DatalakeBucketName": {"Description": "S3 Bucket used for Datalake", "Value": {"Ref": "S3BucketName"}}, "InformaticaDomainDatabaseEndPoint": {"Description": "Informatica Domain Database Endpoint", "Value": {"Fn::Join": ["", [{"Fn::GetAtt": ["InfaDB", "Endpoint.Address"]}, ":", {"Fn::GetAtt": ["InfaDB", "Endpoint.Port"]}]]}}, "RedShiftClusterEndpoint": {"Description": "Redshift Cluster endpoint", "Value": {"Fn::Join": [":", [{"Fn::GetAtt": ["RedshiftCluster", "Endpoint.Address"]}, {"Fn::GetAtt": ["RedshiftCluster", "Endpoint.Port"]}]]}}, "RedShiftIamRole": {"Description": "RedShift IAM Role ARN", "Value": {"Fn::GetAtt": ["InstanceRoleRedShift", "Arn"]}}, "InformaticaAdminConsoleServerLogs": {"Description": "Informatica Domain Installation Log Location", "Value": "/installation.log"}, "InstanceSetupLogs": {"Description": "Informatica Domain EC2 Instance setup Log Location", "Value": "/var/log/cfn-init-cmd.log"}, "CloudFormationLogs": {"Description": "Cloud Formation Installation Log Location", "Value": "/var/log/cfn-init-cmd.log"}, "InformaticaHadoopInstallLogs": {"Description": "Master Node Hadoop Installation Log Location", "Value": "/mnt/var/log/bootstrap-actions"}, "InformaticaBDMDeveloperClient": {"Description": "Informatica Developer Tool Download Location", "Value": "https://s3-us-west-2.amazonaws.com/bdm-awsmarketplace/1020_Client_Installer_winem-64t.zip"}}}

{"AWSTemplateFormatVersion": "2010-09-09", "Description": "Informatica Secure@Source. This template creates Amazon EC2 instances, Elastic IPs and related resources. You will be billed for the AWS resources used if you create a stack from this template. (qs-1npd92p13)", "Metadata": {"AWS::CloudFormation::Interface": {"ParameterGroups": [{"Label": {"default": "Network Configuration"}, "Parameters": ["VPCID", "InformaticaServerSubnetID", "DBSubnetIDs", "IPAddressRange"]}, {"Label": {"default": "Amazon EC2 Configuration"}, "Parameters": ["KeyName", "InformaticaServerInstanceType", "ICSClusterSize"]}, {"Label": {"default": "Amazon RDS Configuration"}, "Parameters": ["DBUser", "DBPassword"]}, {"Label": {"default": "Informatica Secure@Source Configuration"}, "Parameters": ["InformaticaAdminUsername", "InformaticaAdminPassword", "InformaticaSATSKeyS3Bucket", "InformaticaSATSKeyName", "ImportSampleData"]}, {"Label": {"default": "AWS Quick Start Configuration"}, "Parameters": ["QSS3BucketName", "QSS3KeyPrefix"]}], "ParameterLabels": {"DBPassword": {"default": "Informatica Database Instance Password"}, "DBSubnetIDs": {"default": "Informatica Database Subnets"}, "DBUser": {"default": "Informatica Database Instance Username"}, "ICSClusterSize": {"default": "Informatica Embedded Cluster Size"}, "IPAddressRange": {"default": "IP Address Range"}, "ImportSampleData": {"default": "Import Sample Content"}, "InformaticaAdminPassword": {"default": "Informatica Administrator Password"}, "InformaticaAdminUsername": {"default": "Informatica Administrator Username"}, "InformaticaSATSKeyName": {"default": "Secure@Source License Key Name"}, "InformaticaSATSKeyS3Bucket": {"default": "Secure@Source License Key Location"}, "InformaticaServerInstanceType": {"default": "Informatica Domain Instance Type"}, "InformaticaServerSubnetID": {"default": "Informatica Domain Subnet"}, "KeyName": {"default": "Key Pair Name"}, "QSS3BucketName": {"default": "Quick Start S3 Bucket Name"}, "QSS3KeyPrefix": {"default": "Quick Start S3 Key Prefix"}, "VPCID": {"default": "VPC"}}}}, "Parameters": {"DBPassword": {"Description": "Password for the database instance associated with Informatica domain and services (such as Model Repository Service, Data Integration Service, Content Management Service)", "MaxLength": "18", "MinLength": "8", "NoEcho": "True", "Type": "String"}, "DBSubnetIDs": {"Description": "IDs of two private subnets in the selected VPC. These must be in different Availability Zones in the selected VPC", "Type": "List<AWS::EC2::Subnet::Id>"}, "DBUser": {"Description": "Username for the database instance associated with Informatica domain and services (such as Model Repository Service, Data Integration Service, Content Management Service)", "MaxLength": "18", "MinLength": "8", "Type": "String"}, "ICSClusterSize": {"AllowedValues": ["Small", "Medium", "Large"], "Default": "Small", "Description": "The cluster size (i.) Small (c4.8xlarge, single node) (ii.) Medium (c4.8xlarge, three nodes) (iii.)  Large (c4.8xlarge, six nodes)", "Type": "String"}, "IPAddressRange": {"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$", "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.", "Description": "The CIDR IP range that is permitted to access the Informatica domain and the Informatica embedded cluster", "MaxLength": "18", "MinLength": "9", "Type": "String"}, "ImportSampleData": {"AllowedValues": ["Yes", "No"], "Default": "Yes", "Description": "Select Yes to import the sample catalog data. You can use the sample data to get started with the product", "Type": "String"}, "InformaticaAdminPassword": {"Description": "Password to access Informatica Administrator", "NoEcho": "True", "Type": "String"}, "InformaticaAdminUsername": {"Description": "Username to access Informatica Administrator", "Type": "String"}, "InformaticaSATSKeyName": {"Description": "The Informatica Secure@Source license key name. For example, <license key name> or <bucket sub folder/license key name>", "Type": "String"}, "InformaticaSATSKeyS3Bucket": {"Description": "Name of the Amazon S3 bucket in your account that contains the Informatica Secure@Source Key", "Type": "String"}, "InformaticaServerInstanceType": {"AllowedValues": ["c4.4xlarge", "c4.8xlarge"], "Default": "c4.4xlarge", "Description": "The EC2 instance type for the instance that hosts the Informatica domain. Default is c4.4xlarge", "Type": "String"}, "InformaticaServerSubnetID": {"Description": "Select a publicly accessible subnet ID for the Informatica domain", "Type": "AWS::EC2::Subnet::Id"}, "KeyName": {"Description": "Name of an existing Amazon EC2 keypair. You must specify this option to enable SSH access to Informatica domain and cluster instances", "Type": "AWS::EC2::KeyPair::KeyName"}, "QSS3BucketName": {"AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$", "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).", "Default": "aws-quickstart", "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).", "Type": "String"}, "QSS3KeyPrefix": {"AllowedPattern": "^[0-9a-zA-Z-/]*$", "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).", "Default": "quickstart-informatica-secureatsource/", "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).", "Type": "String"}, "VPCID": {"Description": "ID of your existing VPC where you want to deploy Secure@Source", "Type": "AWS::EC2::VPC::Id"}}, "Mappings": {"AWSAMIRegionMap": {"AMI": {"INFASATSADMINHVM": "Informatica EIC & SecureAtSource Administration Image", "INFASATSCLUSTERHVM": "Informatica EIC & SecureAtSource Cluster Image"}, "ap-northeast-1": {"INFASATSADMINHVM": "ami-6ad1590c", "INFASATSCLUSTERHVM": "ami-47be1221"}, "ap-northeast-2": {"INFASATSADMINHVM": "ami-c5de7fab", "INFASATSCLUSTERHVM": "ami-10a5017e"}, "ap-south-1": {"INFASATSADMINHVM": "ami-02450f6d", "INFASATSCLUSTERHVM": "ami-2fa8ea40"}, "ap-southeast-1": {"INFASATSADMINHVM": "ami-32afc14e", "INFASATSCLUSTERHVM": "ami-2588c446"}, "ap-southeast-2": {"INFASATSADMINHVM": "ami-daa454b8", "INFASATSCLUSTERHVM": "ami-32668850"}, "eu-central-1": {"INFASATSADMINHVM": "ami-e7039788", "INFASATSCLUSTERHVM": "ami-5e35b131"}, "eu-west-1": {"INFASATSADMINHVM": "ami-20ed6159", "INFASATSCLUSTERHVM": "ami-eef95f97"}, "sa-east-1": {"INFASATSADMINHVM": "ami-29f2b345", "INFASATSCLUSTERHVM": "ami-6c057e00"}, "us-east-1": {"INFASATSADMINHVM": "ami-7b8ecb01", "INFASATSCLUSTERHVM": "ami-2dde7457"}, "us-east-2": {"INFASATSADMINHVM": "ami-c9af87ac", "INFASATSCLUSTERHVM": "ami-8b1e31ee"}, "us-west-1": {"INFASATSADMINHVM": "ami-8f4147ef", "INFASATSCLUSTERHVM": "ami-54ac9034"}, "us-west-2": {"INFASATSADMINHVM": "ami-e8c56990", "INFASATSCLUSTERHVM": "ami-c268a3ba"}}, "ClusterSizeMapping": {"Small": {"InstanceType": "c4.8xlarge", "NumberOfInstances": "1"}, "Medium": {"InstanceType": "c4.8xlarge", "NumberOfInstances": "3"}, "Large": {"InstanceType": "c4.8xlarge", "NumberOfInstances": "6"}}}, "Rules": {"SubnetsInVPC": {"Assertions": [{"Assert": {"Fn::EachMemberIn": [{"Fn::ValueOfAll": ["AWS::EC2::Subnet::Id", "VpcId"]}, {"Fn::RefAll": "AWS::EC2::VPC::Id"}]}, "AssertDescription": "All subnets must in the VPC"}]}}, "Conditions": {"SingleNodeCnd": {"Fn::Equals": [{"Ref": "ICSClusterSize"}, "Small"]}, "CreateMediumClusterCnd": {"Fn::Equals": [{"Ref": "ICSClusterSize"}, "Medium"]}, "CreateLargeClusterCnd": {"Fn::Equals": [{"Ref": "ICSClusterSize"}, "Large"]}, "MultipleNodeCnd": {"Fn::Or": [{"Condition": "CreateMediumClusterCnd"}, {"Condition": "CreateLargeClusterCnd"}]}, "ImportSampleCnd": {"Fn::Equals": [{"Ref": "ImportSampleData"}, "Yes"]}, "RDSSQLServerMultiAZSupportCnd": {"Fn::Not": [{"Condition": "NoRDSSQLServerMultiAZSupportCnd"}]}, "NoRDSSQLServerMultiAZSupportCnd": {"Fn::Or": [{"Fn::Equals": [{"Ref": "AWS::Region"}, "ap-southeast-1"]}, {"Fn::Equals": [{"Ref": "AWS::Region"}, "us-west-1"]}]}}, "Resources": {"ElasticIPNode1": {"Type": "AWS::EC2::EIP", "Properties": {"Domain": "vpc"}}, "ElasticIPNode2": {"Type": "AWS::EC2::EIP", "Condition": "MultipleNodeCnd", "Properties": {"Domain": "vpc"}}, "ElasticIPNode3": {"Type": "AWS::EC2::EIP", "Condition": "MultipleNodeCnd", "Properties": {"Domain": "vpc"}}, "ElasticIPNode4": {"Type": "AWS::EC2::EIP", "Condition": "CreateLargeClusterCnd", "Properties": {"Domain": "vpc"}}, "ElasticIPNode5": {"Type": "AWS::EC2::EIP", "Condition": "CreateLargeClusterCnd", "Properties": {"Domain": "vpc"}}, "ElasticIPNode6": {"Type": "AWS::EC2::EIP", "Condition": "CreateLargeClusterCnd", "Properties": {"Domain": "vpc"}}, "Node1NetInterface": {"Type": "AWS::EC2::NetworkInterface", "Properties": {"Description": "Interface for Node 1 traffic", "SubnetId": {"Ref": "InformaticaServerSubnetID"}, "GroupSet": [{"Ref": "AdditionalICSSecurityGroup"}, {"Ref": "InternalAdditionalICSSecurityGroup"}], "SourceDestCheck": "true", "Tags": [{"Key": "Name", "Value": "Informatica Node 1 Network Interface"}]}}, "Node2NetInterface": {"Type": "AWS::EC2::NetworkInterface", "Condition": "MultipleNodeCnd", "Properties": {"Description": "Interface for Node 2 traffic", "SubnetId": {"Ref": "InformaticaServerSubnetID"}, "GroupSet": [{"Ref": "AdditionalICSSecurityGroup"}, {"Ref": "InternalAdditionalICSSecurityGroup"}], "SourceDestCheck": "true", "Tags": [{"Key": "Name", "Value": "Informatica Node 2 Network Interface"}]}}, "Node3NetInterface": {"Type": "AWS::EC2::NetworkInterface", "Condition": "MultipleNodeCnd", "Properties": {"Description": "Interface for Node 3 traffic", "SubnetId": {"Ref": "InformaticaServerSubnetID"}, "GroupSet": [{"Ref": "AdditionalICSSecurityGroup"}, {"Ref": "InternalAdditionalICSSecurityGroup"}], "SourceDestCheck": "true", "Tags": [{"Key": "Name", "Value": "Informatica Node 3 Network Interface"}]}}, "Node4NetInterface": {"Type": "AWS::EC2::NetworkInterface", "Condition": "CreateLargeClusterCnd", "Properties": {"Description": "Interface for Node 4 traffic", "SubnetId": {"Ref": "InformaticaServerSubnetID"}, "GroupSet": [{"Ref": "AdditionalICSSecurityGroup"}, {"Ref": "InternalAdditionalICSSecurityGroup"}], "SourceDestCheck": "true", "Tags": [{"Key": "Name", "Value": "Informatica Node 4 Network Interface"}]}}, "Node5NetInterface": {"Type": "AWS::EC2::NetworkInterface", "Condition": "CreateLargeClusterCnd", "Properties": {"Description": "Interface for Node 5 traffic", "SubnetId": {"Ref": "InformaticaServerSubnetID"}, "GroupSet": [{"Ref": "AdditionalICSSecurityGroup"}, {"Ref": "InternalAdditionalICSSecurityGroup"}], "SourceDestCheck": "true", "Tags": [{"Key": "Name", "Value": "Informatica Node 5 Network Interface"}]}}, "Node6NetInterface": {"Type": "AWS::EC2::NetworkInterface", "Condition": "CreateLargeClusterCnd", "Properties": {"Description": "Interface for Node 6 traffic", "SubnetId": {"Ref": "InformaticaServerSubnetID"}, "GroupSet": [{"Ref": "AdditionalICSSecurityGroup"}, {"Ref": "InternalAdditionalICSSecurityGroup"}], "SourceDestCheck": "true", "Tags": [{"Key": "Name", "Value": "Informatica Node 6 Network Interface"}]}}, "Node1IPAssoc": {"Type": "AWS::EC2::EIPAssociation", "Properties": {"AllocationId": {"Fn::GetAtt": ["ElasticIPNode1", "AllocationId"]}, "NetworkInterfaceId": {"Ref": "Node1NetInterface"}}}, "Node2IPAssoc": {"Type": "AWS::EC2::EIPAssociation", "Condition": "MultipleNodeCnd", "Properties": {"AllocationId": {"Fn::GetAtt": ["ElasticIPNode2", "AllocationId"]}, "NetworkInterfaceId": {"Ref": "Node2NetInterface"}}}, "Node3IPAssoc": {"Type": "AWS::EC2::EIPAssociation", "Condition": "MultipleNodeCnd", "Properties": {"AllocationId": {"Fn::GetAtt": ["ElasticIPNode3", "AllocationId"]}, "NetworkInterfaceId": {"Ref": "Node3NetInterface"}}}, "Node4IPAssoc": {"Type": "AWS::EC2::EIPAssociation", "Condition": "CreateLargeClusterCnd", "Properties": {"AllocationId": {"Fn::GetAtt": ["ElasticIPNode4", "AllocationId"]}, "NetworkInterfaceId": {"Ref": "Node4NetInterface"}}}, "Node5IPAssoc": {"Type": "AWS::EC2::EIPAssociation", "Condition": "CreateLargeClusterCnd", "Properties": {"AllocationId": {"Fn::GetAtt": ["ElasticIPNode5", "AllocationId"]}, "NetworkInterfaceId": {"Ref": "Node5NetInterface"}}}, "Node6IPAssoc": {"Type": "AWS::EC2::EIPAssociation", "Condition": "CreateLargeClusterCnd", "Properties": {"AllocationId": {"Fn::GetAtt": ["ElasticIPNode6", "AllocationId"]}, "NetworkInterfaceId": {"Ref": "Node6NetInterface"}}}, "WaitForClusterInstancesHandle": {"Type": "AWS::CloudFormation::WaitConditionHandle", "Properties": {}}, "WaitForClusterInstancesCondition": {"Type": "AWS::CloudFormation::WaitCondition", "Properties": {"Count": {"Fn::FindInMap": ["ClusterSizeMapping", {"Ref": "ICSClusterSize"}, "NumberOfInstances"]}, "Handle": {"Ref": "WaitForClusterInstancesHandle"}, "Timeout": "3600"}}, "HadoopGateway": {"Type": "AWS::EC2::Instance", "Condition": "SingleNodeCnd", "DependsOn": "Node1IPAssoc", "Properties": {"IamInstanceProfile": {"Ref": "InstanceProfile"}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "INFASATSCLUSTERHVM"]}, "InstanceType": {"Fn::FindInMap": ["ClusterSizeMapping", {"Ref": "ICSClusterSize"}, "InstanceType"]}, "KeyName": {"Ref": "KeyName"}, "InstanceInitiatedShutdownBehavior": "stop", "NetworkInterfaces": [{"NetworkInterfaceId": {"Ref": "Node1NetInterface"}, "DeviceIndex": "0"}], "Tags": [{"Key": "Name", "Value": "HadoopGateway-HadoopNode-1"}]}}, "MultiNodeHadoopGateway": {"Type": "AWS::EC2::Instance", "Condition": "MultipleNodeCnd", "DependsOn": "Node1IPAssoc", "Properties": {"IamInstanceProfile": {"Ref": "InstanceProfile"}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "INFASATSCLUSTERHVM"]}, "InstanceType": {"Fn::FindInMap": ["ClusterSizeMapping", {"Ref": "ICSClusterSize"}, "InstanceType"]}, "KeyName": {"Ref": "KeyName"}, "InstanceInitiatedShutdownBehavior": "stop", "NetworkInterfaces": [{"NetworkInterfaceId": {"Ref": "Node1NetInterface"}, "DeviceIndex": "0"}], "Tags": [{"Key": "Name", "Value": "HadoopGateway-HadoopNode-1"}]}}, "MultiNodeHadoopNode2": {"Type": "AWS::EC2::Instance", "Condition": "MultipleNodeCnd", "DependsOn": "Node2IPAssoc", "Properties": {"IamInstanceProfile": {"Ref": "InstanceProfile"}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "INFASATSCLUSTERHVM"]}, "InstanceType": {"Fn::FindInMap": ["ClusterSizeMapping", {"Ref": "ICSClusterSize"}, "InstanceType"]}, "KeyName": {"Ref": "KeyName"}, "InstanceInitiatedShutdownBehavior": "stop", "NetworkInterfaces": [{"NetworkInterfaceId": {"Ref": "Node2NetInterface"}, "DeviceIndex": "0"}], "Tags": [{"Key": "NAME", "Value": {"Fn::Join": ["-", ["HadoopNode", "2"]]}}]}}, "MultiNodeHadoopNode3": {"Type": "AWS::EC2::Instance", "Condition": "MultipleNodeCnd", "DependsOn": "Node3IPAssoc", "Properties": {"IamInstanceProfile": {"Ref": "InstanceProfile"}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "INFASATSCLUSTERHVM"]}, "InstanceType": {"Fn::FindInMap": ["ClusterSizeMapping", {"Ref": "ICSClusterSize"}, "InstanceType"]}, "KeyName": {"Ref": "KeyName"}, "InstanceInitiatedShutdownBehavior": "stop", "NetworkInterfaces": [{"NetworkInterfaceId": {"Ref": "Node3NetInterface"}, "DeviceIndex": "0"}], "Tags": [{"Key": "NAME", "Value": {"Fn::Join": ["-", ["HadoopNode", "3"]]}}]}}, "MultiNodeHadoopNode4": {"Type": "AWS::EC2::Instance", "Condition": "CreateLargeClusterCnd", "DependsOn": "Node4IPAssoc", "Properties": {"IamInstanceProfile": {"Ref": "InstanceProfile"}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "INFASATSCLUSTERHVM"]}, "InstanceType": {"Fn::FindInMap": ["ClusterSizeMapping", {"Ref": "ICSClusterSize"}, "InstanceType"]}, "KeyName": {"Ref": "KeyName"}, "InstanceInitiatedShutdownBehavior": "stop", "NetworkInterfaces": [{"NetworkInterfaceId": {"Ref": "Node4NetInterface"}, "DeviceIndex": "0"}], "Tags": [{"Key": "NAME", "Value": {"Fn::Join": ["-", ["HadoopNode", "4"]]}}]}}, "MultiNodeHadoopNode5": {"Type": "AWS::EC2::Instance", "Condition": "CreateLargeClusterCnd", "DependsOn": "Node5IPAssoc", "Properties": {"IamInstanceProfile": {"Ref": "InstanceProfile"}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "INFASATSCLUSTERHVM"]}, "InstanceType": {"Fn::FindInMap": ["ClusterSizeMapping", {"Ref": "ICSClusterSize"}, "InstanceType"]}, "KeyName": {"Ref": "KeyName"}, "InstanceInitiatedShutdownBehavior": "stop", "NetworkInterfaces": [{"NetworkInterfaceId": {"Ref": "Node5NetInterface"}, "DeviceIndex": "0"}], "Tags": [{"Key": "NAME", "Value": {"Fn::Join": ["-", ["HadoopNode", "5"]]}}]}}, "MultiNodeHadoopNode6": {"Type": "AWS::EC2::Instance", "Condition": "CreateLargeClusterCnd", "DependsOn": "Node6IPAssoc", "Properties": {"IamInstanceProfile": {"Ref": "InstanceProfile"}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "INFASATSCLUSTERHVM"]}, "InstanceType": {"Fn::FindInMap": ["ClusterSizeMapping", {"Ref": "ICSClusterSize"}, "InstanceType"]}, "KeyName": {"Ref": "KeyName"}, "InstanceInitiatedShutdownBehavior": "stop", "NetworkInterfaces": [{"NetworkInterfaceId": {"Ref": "Node6NetInterface"}, "DeviceIndex": "0"}], "Tags": [{"Key": "NAME", "Value": {"Fn::Join": ["-", ["HadoopNode", "5"]]}}]}}, "AdditionalICSSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"GroupDescription": "Allowing all ports for all IPs incoming and outgoing", "VpcId": {"Ref": "VPCID"}, "SecurityGroupIngress": [{"IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535", "SourceSecurityGroupId": {"Fn::GetAtt": ["InternalAdditionalICSSecurityGroup", "GroupId"]}}, {"IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535", "SourceSecurityGroupId": {"Ref": "InfaDomainSecurityGroup"}}, {"IpProtocol": "udp", "FromPort": "0", "ToPort": "65535", "CidrIp": {"Ref": "IPAddressRange"}}]}}, "InternalAdditionalICSSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"GroupDescription": "To enable all ports between hadoop machines only.", "VpcId": {"Ref": "VPCID"}}}, "InfaDBSubnetGroup": {"Type": "AWS::RDS::DBSubnetGroup", "Properties": {"DBSubnetGroupDescription": "Subnets available for the RDS DB Instance", "SubnetIds": {"Ref": "DBSubnetIDs"}}}, "InfaDB": {"Type": "AWS::RDS::DBInstance", "Properties": {"AllocatedStorage": "500", "MultiAZ": {"Fn::If": ["RDSSQLServerMultiAZSupportCnd", "true", {"Ref": "AWS::NoValue"}]}, "StorageType": "gp2", "LicenseModel": "license-included", "DBInstanceClass": "db.m4.2xlarge", "DBSubnetGroupName": {"Ref": "InfaDBSubnetGroup"}, "VPCSecurityGroups": [{"Ref": "InfaDBSecurityGroup"}], "Engine": "sqlserver-se", "EngineVersion": "12.00.5000.0.v1", "MasterUsername": {"Ref": "DBUser"}, "MasterUserPassword": {"Ref": "DBPassword"}}}, "InfaDBSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"GroupDescription": "Informatica domain access to RDS DB", "VpcId": {"Ref": "VPCID"}, "SecurityGroupIngress": [{"IpProtocol": "tcp", "FromPort": "1433", "ToPort": "1433", "SourceSecurityGroupId": {"Ref": "InfaDomainSecurityGroup"}}]}}, "InfaDomainSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"GroupDescription": "Enable Informatica Domain Server Access", "VpcId": {"Ref": "VPCID"}, "SecurityGroupIngress": [{"IpProtocol": "tcp", "FromPort": "6005", "ToPort": "6005", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "6605", "ToPort": "6605", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "6006", "ToPort": "6006", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "6008", "ToPort": "6008", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "6014", "ToPort": "6114", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "8095", "ToPort": "8095", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "8785", "ToPort": "8785", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "8085", "ToPort": "8085", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "9085", "ToPort": "9085", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "8089", "ToPort": "8089", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "21000", "ToPort": "22000", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "udp", "FromPort": "1434", "ToPort": "1434", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "51000", "ToPort": "51000", "CidrIp": {"Ref": "IPAddressRange"}}, {"IpProtocol": "tcp", "FromPort": "6200", "ToPort": "6200", "CidrIp": {"Ref": "IPAddressRange"}}]}}, "InstanceRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Statement": [{"Effect": "Allow", "Principal": {"Service": ["ec2.amazonaws.com"]}, "Action": ["sts:AssumeRole"]}]}, "Path": "/"}}, "RolePolicies": {"Type": "AWS::IAM::Policy", "Properties": {"PolicyName": "S3Download", "PolicyDocument": {"Statement": [{"Action": ["s3:Get*", "s3:List*"], "Effect": "Allow", "Resource": [{"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "InformaticaSATSKeyS3Bucket"}, "/", {"Ref": "InformaticaSATSKeyName"}]]}]}]}, "Roles": [{"Ref": "InstanceRole"}]}}, "InstanceProfile": {"Type": "AWS::IAM::InstanceProfile", "Properties": {"Path": "/", "Roles": [{"Ref": "InstanceRole"}]}}, "AdministrationServerEIP": {"Type": "AWS::EC2::EIP", "Properties": {"Domain": "vpc"}}, "AdministrationServerNetInterface": {"Type": "AWS::EC2::NetworkInterface", "Properties": {"Description": "Interface for Administrator Server traffic", "SubnetId": {"Ref": "InformaticaServerSubnetID"}, "GroupSet": [{"Ref": "InfaDomainSecurityGroup"}], "SourceDestCheck": "true", "Tags": [{"Key": "Name", "Value": "Informatica Domain Network Interface"}]}}, "AdministrationServerAssoc": {"Type": "AWS::EC2::EIPAssociation", "Properties": {"AllocationId": {"Fn::GetAtt": ["AdministrationServerEIP", "AllocationId"]}, "NetworkInterfaceId": {"Ref": "AdministrationServerNetInterface"}}}, "AdministrationServer": {"Type": "AWS::EC2::Instance", "Metadata": {"AWS::CloudFormation::Authentication": {"S3AccessCreds": {"type": "S3", "roleName": {"Ref": "InstanceRole"}, "buckets": [{"Ref": "InformaticaSATSKeyS3Bucket"}]}}, "AWS::CloudFormation::Init": {"configSets": {"InstallAndRun": ["Install", "Configure"]}, "Install": {"files": {"/etc/cfn/cfn-hup.conf": {"content": {"Fn::Join": ["", ["[main]\n", "stack=", {"Ref": "AWS::StackName"}, "\n", "interval=1\n", "region=", {"Ref": "AWS::Region"}, "\n"]]}, "mode": "000400", "owner": "ec2-user", "group": "ec2-user"}, "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {"content": {"Fn::Join": ["", ["[cfn-auto-reloader-hook]\n", "triggers=post.update\n", "path=Resources.AdministrationServer.Metadata.AWS::CloudFormation::Init\n", "action=/opt/aws/bin/cfn-init -s ", {"Ref": "AWS::StackId"}, " -r AdministrationServer ", " --region ", {"Ref": "AWS::Region"}, "\n", "runas=root\n"]]}, "mode": "000400", "owner": "ec2-user", "group": "ec2-user"}, "/home/ec2-user/Mercury_Setup/replaceHostname.sh": {"content": {"Fn::Join": ["", ["#!/bin/bash\n", "chmod 600 /var/log/cfn-init.log \n", "chmod 600 /var/log/cfn-init-cmd.log \n", "privateIp=$(curl http://169.254.169.254/latest/meta-data/local-ipv4) \n", "publicDnsName=$(curl http://169.254.169.254/latest/meta-data/public-hostname) \n", "hostname $publicDnsName \n", "sudo su -c \"sed --in-place '1s/.*/$publicDnsName/' /etc/hostname\" \n", "sudo su -c \"sed -i '$ a $privateIp $publicDnsName' /etc/hosts\" \n", "sudo su -c \"echo HOSTNAME=$publicDnsName >> /etc/sysconfig/network\" \n", "sudo su -c \"sed -i '$ a preserve_hostname: true' /etc/cloud/cloud.cfg\" \n", "sudo su -c \"sed -i 's/# Check for sudo privileges for $HadoopUser/result_status_local=0;# Check for sudo privileges for $HadoopUser/g' /opt/informatica/sub/source/services/InfaHadoopService/Binaries/PreValidation.sh\" \n", "#sudo rpm -e sats_analytics > /tmp/uba.txt 2>&1; sudo rpm -ivh /tmp/sats_analytics-3.0-811.x86_64.rpm\n", "etcHostsConfigOfCluster=\"", {"Fn::If": ["SingleNodeCnd", {"Fn::Join": [" ", [{"Fn::GetAtt": ["HadoopGateway", "PrivateIp"]}, {"Fn::GetAtt": ["HadoopGateway", "PublicDnsName"]}]]}, {"Fn::If": ["CreateLargeClusterCnd", {"Fn::Join": ["\\\\\\n", [{"Fn::Join": [" ", [{"Fn::GetAtt": ["MultiNodeHadoopGateway", "PrivateIp"]}, {"Fn::GetAtt": ["MultiNodeHadoopGateway", "PublicDnsName"]}]]}, {"Fn::Join": [" ", [{"Fn::GetAtt": ["MultiNodeHadoopNode2", "PrivateIp"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode2", "PublicDnsName"]}]]}, {"Fn::Join": [" ", [{"Fn::GetAtt": ["MultiNodeHadoopNode3", "PrivateIp"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode3", "PublicDnsName"]}]]}, {"Fn::Join": [" ", [{"Fn::GetAtt": ["MultiNodeHadoopNode4", "PrivateIp"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode4", "PublicDnsName"]}]]}, {"Fn::Join": [" ", [{"Fn::GetAtt": ["MultiNodeHadoopNode5", "PrivateIp"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode5", "PublicDnsName"]}]]}, {"Fn::Join": [" ", [{"Fn::GetAtt": ["MultiNodeHadoopNode6", "PrivateIp"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode6", "PublicDnsName"]}]]}]]}, {"Fn::Join": ["\\\\\\n", [{"Fn::Join": [" ", [{"Fn::GetAtt": ["MultiNodeHadoopGateway", "PrivateIp"]}, {"Fn::GetAtt": ["MultiNodeHadoopGateway", "PublicDnsName"]}]]}, {"Fn::Join": [" ", [{"Fn::GetAtt": ["MultiNodeHadoopNode2", "PrivateIp"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode2", "PublicDnsName"]}]]}, {"Fn::Join": [" ", [{"Fn::GetAtt": ["MultiNodeHadoopNode3", "PrivateIp"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode3", "PublicDnsName"]}]]}]]}]}]}, "\"\n", "sudo su -c \"echo -e $etcHostsConfigOfCluster >> /etc/hosts\" \n", {"Fn::If": ["SingleNodeCnd", {"Fn::Join": ["", ["sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["HadoopGateway", "PublicDnsName"]}, " \"sudo su -c 'echo -e $etcHostsConfigOfCluster >> /etc/hosts'\" \n"]]}, {"Fn::If": ["CreateLargeClusterCnd", {"Fn::Join": ["", ["sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["MultiNodeHadoopGateway", "PublicDnsName"]}, " \"sudo su -c 'echo -e $etcHostsConfigOfCluster >> /etc/hosts'\" \n", "sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["MultiNodeHadoopNode2", "PublicDnsName"]}, " \"sudo su -c  'echo -e $etcHostsConfigOfCluster >> /etc/hosts'\" \n", "sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["MultiNodeHadoopNode3", "PublicDnsName"]}, " \"sudo su -c  'echo -e $etcHostsConfigOfCluster >>  /etc/hosts'\" \n", "sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["MultiNodeHadoopNode4", "PublicDnsName"]}, " \"sudo su -c  'echo -e $etcHostsConfigOfCluster >> /etc/hosts'\" \n", "sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["MultiNodeHadoopNode5", "PublicDnsName"]}, " \"sudo su -c  'echo -e $etcHostsConfigOfCluster >> /etc/hosts'\" \n", "sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["MultiNodeHadoopNode6", "PublicDnsName"]}, " \"sudo su -c  'echo -e $etcHostsConfigOfCluster >> /etc/hosts'\" \n"]]}, {"Fn::Join": ["", ["sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["MultiNodeHadoopGateway", "PublicDnsName"]}, " \"sudo su -c 'echo -e $etcHostsConfigOfCluster >> /etc/hosts'\" \n", "sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["MultiNodeHadoopNode2", "PublicDnsName"]}, " \"sudo su -c  'echo -e $etcHostsConfigOfCluster >> /etc/hosts'\" \n", "sudo ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ", {"Fn::GetAtt": ["MultiNodeHadoopNode3", "PublicDnsName"]}, " \"sudo su -c  'echo -e $etcHostsConfigOfCluster >>  /etc/hosts'\" \n"]]}]}]}]]}, "mode": "000770", "owner": "ec2-user", "group": "ec2-user"}, "/home/ec2-user/Mercury_Setup/replaceValues.sh": {"content": {"Fn::Join": ["", ["#!/bin/bash\n", "THISHOST=$(hostname -f)\n", "sed -i -e ", {"Fn::Join": ["", ["\"s/DomainHostValue/$THISHOST/g\"", " /home/ec2-user/Mercury_Setup/config_template.xml\n"]]}, "export ODBCHOME=/opt/informatica/ODBC7.1 \n", "export ODBCINI=/opt/informatica/ODBC7.1/odbc.ini \n", "sed -i -e 's/domainname/Domain/g' /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/nodename/Node/g' /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/licensename/License/g' /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/adminusername/", {"Ref": "InformaticaAdminUsername"}, "/g' /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/adminpassword/", {"Ref": "InformaticaAdminPassword"}, "/g' /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/dbtypevalue/MSSQLServer/g' /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/dbloginvalue/", {"Ref": "DBUser"}, "/g' /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/dbpasswordvalue/", {"Ref": "DBPassword"}, "/g' /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/dbhostname/", {"Fn::GetAtt": ["InfaDB", "Endpoint.Address"]}, "/g' /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/dbportvalue/1433/g' /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/dbservicenamevalue/infadb/g' /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/mrsservicename/infamrsdb/g' /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/cmsdbtype/SQLServer/g' /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/cmsdbname/infacmsdb/g' /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/pwhdbname/infapwhdb/g' /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/hadoopgatewayhost/", {"Fn::If": ["SingleNodeCnd", {"Fn::GetAtt": ["HadoopGateway", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopGateway", "PublicDnsName"]}]}, "/g'  /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/hadoopnodes/", {"Fn::If": ["SingleNodeCnd", {"Fn::GetAtt": ["HadoopGateway", "PublicDnsName"]}, {"Fn::If": ["CreateLargeClusterCnd", {"Fn::Join": [",", [{"Fn::GetAtt": ["MultiNodeHadoopGateway", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode2", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode3", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode4", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode5", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode6", "PublicDnsName"]}]]}, {"Fn::Join": [",", [{"Fn::GetAtt": ["MultiNodeHadoopGateway", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode2", "PublicDnsName"]}, {"Fn::GetAtt": ["MultiNodeHadoopNode3", "PublicDnsName"]}]]}]}]}, "/g'  /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/ldmloadtype/", {"Fn::If": ["SingleNodeCnd", "low", {"Fn::If": ["CreateLargeClusterCnd", "high", "medium"]}]}, "/g' /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/repocontentcreatetimeout/1200000/g' /home/ec2-user/Mercury_Setup/config_template.xml\n", "sed -i -e 's/importsampledata/", {"Fn::If": ["ImportSampleCnd", "true", "false"]}, "/g'  /home/ec2-user/Mercury_Setup/config_template.xml\n"]]}, "mode": "000700", "owner": "ec2-user", "group": "ec2-user"}, "/home/ec2-user/Mercury_Setup/launchAnalystService.sh": {"content": {"Fn::Join": ["", ["#!/bin/bash\n", "administratorName=", {"Ref": "InformaticaAdminUsername"}, "\n", "administratorPassword=", {"Ref": "InformaticaAdminPassword"}, "\n", "echo /opt/informatica/isp/bin/infacmd.sh as createService -dn Domain -nn Node -sn Analyst_Service -un $administratorName -pd $administratorPassword -rs Model_Repository_Service -ds Data_Integration_Service -ffl /tmp -cs Catalog_Service -csau $administratorName -csap $administratorPassword -au $administratorName -ap $administratorPassword -bgefd /tmp -HttpPort 8089 >> /installation.log \n", "/opt/informatica/isp/bin/infacmd.sh as createService -dn Domain -nn Node -sn Analyst_Service -un $administratorName -pd $administratorPassword -rs Model_Repository_Service -ds Data_Integration_Service -ffl /tmp -cs Catalog_Service -csau $administratorName -csap $administratorPassword -au $administratorName -ap $administratorPassword -bgefd /tmp -HttpPort 8089 >> /installation.log 2>&1 \n", "echo /opt/informatica/isp/bin/infacmd.sh assignLicense -dn Domain -un $administratorName -pd $administratorPassword -ln License -sn Analyst_Service >> /installation.log \n", "/opt/informatica/isp/bin/infacmd.sh assignLicense -dn Domain -un $administratorName -pd $administratorPassword -ln License -sn Analyst_Service >> /installation.log 2>&1 \n", "echo /opt/informatica/isp/bin/infacmd.sh as updateServiceOptions -dn Domain -sn Analyst_Service -un $administratorName -pd $administratorPassword  -o BGExport.BGPermanentAttachmentFileLocation=/tmp >> /installation.log \n", "/opt/informatica/isp/bin/infacmd.sh as updateServiceOptions -dn Domain -sn Analyst_Service -un $administratorName -pd $administratorPassword  -o BGExport.BGPermanentAttachmentFileLocation=/tmp >> /installation.log 2>&1 \n", "echo /opt/informatica/isp/bin/infacmd.sh enableService -dn Domain -un $administratorName -pd $administratorPassword -sn Analyst_Service >> /installation.log \n", "/opt/informatica/isp/bin/infacmd.sh enableService -dn Domain -un $administratorName -pd $administratorPassword -sn Analyst_Service >> /installation.log 2>&1 \n"]]}, "mode": "000770", "owner": "ec2-user", "group": "ec2-user"}, "/home/ec2-user/Mercury_Setup/launchPDMService.sh": {"content": {"Fn::Join": ["", ["#!/bin/bash\n", "administratorName=", {"Ref": "InformaticaAdminUsername"}, "\n", "administratorPassword=", {"Ref": "InformaticaAdminPassword"}, "\n", "sudo /opt/informatica/isp/bin/infacmd.sh  ihs updateServiceOptions -dn Domain -un $administratorName -pd $administratorPassword -o HadoopServicesProperties.yarn_nodemanager_resource_memory_mb=100000 -sn Informatica_Cluster_Service \n", "sudo /opt/informatica/isp/bin/infacmd.sh  ldm updateServiceOptions -dn Domain -un $administratorName -pd $administratorPassword -o LdmCustomOptions.ingest.enable.propagation=false -sn Catalog_Service \n", "PublicDnsName=$(curl http://169.254.169.254/latest/meta-data/public-hostname) \n", "sudo su -c \"sed -i '/^INFA_JRE/a HOSTNAME=$publicDnsName' /opt/informatica/tomcat/temp/envvars.txt\" \n", "sudo su -c \"sed -i '/^INFA_JRE/a HOSTNAME=$publicDnsName' /opt/informatica/tomcat/temp/tomcat_envvars.txt\" \n", "sudo /opt/informatica/tomcat/bin/infaservice.sh shutdown; \n", "sudo sleep 5m; \n", "sudo HOSTNAME=`cat /etc/hostname` /opt/informatica/tomcat/bin/infaservice.sh startup; \n", "sudo sleep 3m; \n", "sudo /opt/informatica/isp/bin/infacmd.sh createRepositoryService -dn Domain -un $administratorName -pd $administratorPassword -sn PCRS -nn Node -so OperatingMode=Exclusive DBUser=", {"Ref": "DBUser"}, " DBPassword=", {"Ref": "DBPassword"}, " ConnectString=", {"Fn::GetAtt": ["InfaDB", "Endpoint.Address"]}, "@infapcrsdb ", " DatabaseType='MSSQLSERVER' CodePage='UTF-8 encoding of Unicode'  -ln License \n", "sudo /opt/informatica/isp/bin/infacmd.sh  enableService -dn Domain -un $administratorName -pd $administratorPassword -sn PCRS \n", "cd /opt/informatica/server/bin; export LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH; ./pmrep connect -r PCRS -d Domain \n", "cd /opt/informatica/server/bin; export LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH; ./pmrep create -u $administratorName -p $administratorPassword \n", "sudo /opt/informatica/isp/bin/infacmd.sh  disableService -dn Domain -un $administratorName -pd $administratorPassword -sn PCRS  -mo COMPLETE \n", "sudo sleep 1m \n", "sudo /opt/informatica/isp/bin/infacmd.sh  updateRepositoryService -dn Domain -un $administratorName -pd $administratorPassword -sn PCRS", " -nn Node  -so OperatingMode=Normal \n", "sudo /opt/informatica/isp/bin/infacmd.sh  enableService -dn Domain -un $administratorName -pd Administrator -sn PCRS \n", "sudo sleep 1m \n", "sudo /opt/informatica/isp/bin/infacmd.sh  createIntegrationService -dn Domain -un $administratorName -pd $administratorPassword", " -sn PCIS -nn Node -rs PCRS -ru $administratorName -rp $administratorPassword -so DataMovementMode=Unicode -po Codepage_Id=106 -ln License \n", "sudo rsync -a  /home/ec2-user/TDM/infa_shared/ /opt/informatica/infa_shared \n", "sudo rsync -a  /home/ec2-user/TDM/isp/ /opt/informatica/isp \n", "sudo rsync -a  /home/ec2-user/TDM/plugins/ /opt/informatica/plugins \n", "sudo rsync -a /home/ec2-user/TDM/services/ /opt/informatica/services \n", "sudo rsync -a /home/ec2-user/TDM/TDM /opt/informatica \n", "sudo rsync -a /home/ec2-user/TDM/TDW /opt/informatica \n", "sudo /opt/informatica/isp/bin/infacmd.sh tdm createService -dn Domain -sn Persistent_Data_Masking_Service -un $administratorName -pd $administratorPassword ", " -nn Node -pcrs PCRS -pcis PCIS -mrs Model_Repository_Service -rsun $administratorName -rspd $administratorPassword -dis Data_Integration_Service  ", " -dt SQLSERVER -du ", {"Ref": "DBUser"}, " -dp ", {"Ref": "DBPassword"}, " -dl 'jdbc:informatica:sqlserver://", {"Fn::GetAtt": ["InfaDB", "Endpoint.Address"]}, ":1433;SelectMethod=cursor;databaseName=infatdmdb' -ep true -ln License -dc ", {"Fn::GetAtt": ["InfaDB", "Endpoint.Address"]}, "@infatdmdb \n", "sudo /opt/informatica/isp/bin/infacmd.sh  tdm createContents -dn Domain -sn Persistent_Data_Masking_Service -un $administratorName ", " -pd $administratorPassword -sdn '' \n ", "sudo /opt/informatica/isp/bin/infacmd.sh  enableService -dn Domain -un $administratorName -pd $administratorPassword ", "-sn Persistent_Data_Masking_Service  -sdn ''  \n", "sudo /opt/informatica/isp/bin/infacmd.sh disableservice -dn Domain -un $administratorName -pd $administratorPassword -sdn Native  -sn _AdminConsole -mo Stop; \n", "sudo sleep 1m; \n", "sudo /opt/informatica/isp/bin/infacmd.sh enableservice -dn Domain -un $administratorName -pd $administratorPassword -sdn Native  -sn _AdminConsole; \n", "sudo sleep 30; \n", "sudo cp /opt/informatica/infa_shared/LkpFiles/* /opt/informatica/server/infa_shared/LkpFiles/ \n"]]}, "mode": "000770", "owner": "ec2-user", "group": "ec2-user"}, "/home/ec2-user/Mercury_Setup/launchSATSService.sh": {"content": {"Fn::Join": ["", ["#!/bin/bash\n", "administratorName=", {"Ref": "InformaticaAdminUsername"}, "\n", "administratorPassword=", {"Ref": "InformaticaAdminPassword"}, "\n", "sudo /opt/informatica/isp/bin/infacmd.sh  ihs updateServiceOptions -dn Domain -un $administratorName -pd $administratorPassword -o HadoopServicesProperties.yarn_nodemanager_resource_memory_mb=100000 -sn Informatica_Cluster_Service \n", "sudo /opt/informatica/isp/bin/infacmd.sh  ldm updateServiceOptions -dn Domain -un $administratorName -pd $administratorPassword -o LdmCustomOptions.ingest.enable.propagation=false -sn Catalog_Service \n", "cd /home/ec2-user/SATS/;\n", "license_file=license.txt_`hostname -f` \n", "curl http://169.254.169.254/latest/dynamic/instance-identity/document > $license_file \n", "echo \"=====================================\" >> $license_file \n", "sudo /opt/informatica/isp/bin/infacmd.sh showLicense -dn Domain -un $administratorName -pd $administratorPassword -ln License >> $license_file \n", "bucket=sats-phonehome \n", "resource=\"/${bucket}/${license_file}\" \n", "contentType=\"text/plain\" \n", "dateValue=`date -R` \n", "curl -L -X PUT -T \"${license_file}\" -H \"Host: ${bucket}.s3.amazonaws.com\"  -H \"Date: ${dateValue}\" -H \"Content-Type: ${contentType}\" https://${bucket}.s3.amazonaws.com/${license_file} \n", "export HOSTNAME=`cat /etc/hostname` \n", "sudo sh  /home/ec2-user/SATS/silentinstall.sh > /tmp/sats.txt 2>&1 & ", "\n", "install_pid=$! \n", "sudo sleep 3m; \n", "sudo pkill -TERM -P $install_pid \n", "#sudo /home/ec2-user/sats/SATS_EBF/installEBF.sh \n", "#publicDnsName=$(curl http://169.254.169.254/latest/meta-data/public-hostname) \n", "#sudo su -c \"sed -i '/^INFA_JRE/a HOSTNAME=$publicDnsName' /opt/informatica/tomcat/temp/envvars.txt\" \n", "#sudo su -c \"sed -i '/^INFA_JRE/a HOSTNAME=$publicDnsName' /opt/informatica/tomcat/temp/tomcat_envvars.txt\" \n", "cd /opt/informatica/services/AdministratorConsole/webapps; sudo rm -rf adminconsole administrator monitoring ows ROOT; cd -;", "sudo /opt/informatica/isp/bin/infacmd.sh disableservice -dn Domain -un $administratorName -pd $administratorPassword -sdn Native  -sn _AdminConsole -mo Stop; \n", "sudo sleep 1m; \n", "sudo /opt/informatica/isp/bin/infacmd.sh enableservice -dn Domain -un $administratorName -pd $administratorPassword -sdn Native  -sn _AdminConsole; \n", "sudo sleep 30; \n", "sudo /opt/informatica/isp/bin/infacmd.sh sats createService -dn Domain -nn Node -un $administratorName -pd $administratorPassword -sn ", "SecureAtSource_Service -dt SQLSERVER -du ", {"Ref": "DBUser"}, " -dp ", {"Ref": "DBPassword"}, " -dl 'jdbc:informatica:sqlserver://", {"Fn::GetAtt": ["InfaDB", "Endpoint.Address"]}, ":1433;SelectMethod=cursor;databaseName=infasatsdb' -pmsn Persistent_Data_Masking_Service -csn Catalog_Service -csun $administratorName -cspd $administratorPassword  -HttpPort 6200 -ll DEBUG; \n", "sudo /opt/informatica/isp/bin/infacmd.sh assignLicense -dn Domain -un $administratorName -pd $administratorPassword -ln License -sn SecureAtSource_Service; \n", "RET=1 \n", "COUNTER=0 \n", "while [[ $RET -ne 0 && $COUNTER -lt 3 ]]; do echo \"Running create contents\"; ((++COUNTER)); sudo /opt/informatica/isp/bin/infacmd.sh sats createContents -dn Domain -sdn Native -un $administratorName -pd $administratorPassword -sn SecureAtSource_Service; RET=$?;sleep 100; done \n", "sudo /opt/informatica/isp/bin/infacmd.sh sats updateServiceOptions -dn Domain -un $administratorName -pd $administratorPassword -sn SecureAtSource_Service -opts EnableUserActivity='true' \n", "sudo /opt/informatica/isp/bin/infacmd.sh enableService -dn Domain -sdn Native -un $administratorName -pd $administratorPassword -sn SecureAtSource_Service \n"]]}, "mode": "000770", "owner": "ec2-user", "group": "ec2-user"}, "/mnt1/EICLicense.key": {"source": {"Fn::Join": ["", ["https://", {"Ref": "InformaticaSATSKeyS3Bucket"}, ".s3.amazonaws.com/", {"Ref": "InformaticaSATSKeyName"}]]}, "mode": "000400", "owner": "ec2-user", "group": "ec2-user", "authentication": "S3AccessCreds"}}}, "Configure": {"commands": {"01_ReplaceHostname": {"command": "sudo /home/ec2-user/Mercury_Setup/replaceHostname.sh"}, "02_ReplaceValues": {"command": "sudo /home/ec2-user/Mercury_Setup/replaceValues.sh"}, "03_DatabaseCreation": {"command": {"Fn::Join": ["", ["sudo java -cp /home/ec2-user/mssqlutil/MSSQLUtility.jar:/home/ec2-user/mssqlutil/com.informatica.datadirect-dwsqlserver-5.1.4_B.jar mssqlutil/MSSQLUtility jdbc:informatica:sqlserver://", {"Fn::GetAtt": ["InfaDB", "Endpoint.Address"]}, ":1433 ", {"Ref": "DBUser"}, " ", {"Ref": "DBPassword"}, " infadb ", "infamrsdb ", "infacmsdb ", "infapwhdb ", "infavdsdb ", "infasatsdb ", "infapcrsdb ", "infatdmdb "]]}}, "04_MercurySetup": {"command": "sudo java -jar /home/ec2-user/Mercury_Setup/mercury_setup.jar -cf /home/ec2-user/Mercury_Setup/config_template.xml -s -uei"}, "05_AnalystServiceSetup": {"command": "sudo /home/ec2-user/Mercury_Setup/launchAnalystService.sh"}, "06_PDMServiceSetup": {"command": "sudo /home/ec2-user/Mercury_Setup/launchPDMService.sh"}, "07_SATSServiceSetup": {"command": "sudo /home/ec2-user/Mercury_Setup/launchSATSService.sh"}, "08_Cleanup": {"command": "sudo rm -f /home/ec2-user/Mercury_Setup/*.sh"}}}}}, "Properties": {"IamInstanceProfile": {"Ref": "InstanceProfile"}, "ImageId": {"Fn::FindInMap": ["AWSAMIRegionMap", {"Ref": "AWS::Region"}, "INFASATSADMINHVM"]}, "InstanceType": {"Ref": "InformaticaServerInstanceType"}, "KeyName": {"Ref": "KeyName"}, "InstanceInitiatedShutdownBehavior": "stop", "NetworkInterfaces": [{"NetworkInterfaceId": {"Ref": "AdministrationServerNetInterface"}, "DeviceIndex": "0"}], "Tags": [{"Key": "NAME", "Value": {"Fn::Join": ["", ["InformaticaDomain-", {"Ref": "AWS::StackName"}]]}}]}, "CreationPolicy": {"ResourceSignal": {"Timeout": "PT2H55M"}}, "DependsOn": ["InfaDB", "AdministrationServerNetInterface", "WaitForClusterInstancesCondition"]}}, "Outputs": {"InstanceID": {"Description": "Informatica Domain Host Name", "Value": {"Ref": "AdministrationServer"}}, "InformaticaAdminConsoleURL": {"Description": "Informatica Administrator Console", "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["AdministrationServer", "PublicDnsName"]}, ":6008"]]}}, "InformaticaSecureAtSourceURL": {"Description": "Informatica SecureAtSource", "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["AdministrationServer", "PublicDnsName"]}, ":6200"]]}}, "ICSSingleNodeClusterURL": {"Description": "ICS Hadoop Gateway node", "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["HadoopGateway", "PublicDnsName"]}, ":8080"]]}, "Condition": "SingleNodeCnd"}, "ICSMultiNodeClusterURL": {"Description": "ICS Hadoop Gateway node", "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["MultiNodeHadoopGateway", "PublicDnsName"]}, ":8080"]]}, "Condition": "MultipleNodeCnd"}, "InformaticaAdminConsoleServerLogs": {"Description": "Informatica Domain Installation Log Location", "Value": "/installation.log"}, "InstanceSetupLogs": {"Description": "Informatica Domain EC2 Instance setup Log Location", "Value": "/var/log/cfn-init-cmd.log"}}}

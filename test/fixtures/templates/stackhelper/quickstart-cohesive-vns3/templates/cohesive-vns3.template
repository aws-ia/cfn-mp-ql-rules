---
AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation script to create one VNS3 free edition network controller with five Amazon Linux AMI overlay clients. (qs-1pn7ttmtb)
Metadata:
  AWSAMIRegionMap:
    Filters:
      VNS3:
        name: vnscubed*
        owner-alias: aws-marketplace
        product-code: dnenbuz38vmuzp0f9fnbhjkn7
        product-code.type: marketplace
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC network configuration
        Parameters:
          - VPCID
          - VPCCIDR
          - PrivateSubnet1Id
          - PrivateSubnet2Id
          - PublicSubnet1Id
          - RemoteAccessCidr
          - BastionSecurityGroupID
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - ClientInstanceTypeParameter
          - KeyPairName
          - AmazonLinuxAMI
      - Label:
          default: Cohesive Networks VNS3 configuration
        Parameters:
          - VNS3InstanceTypeParameter
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      VPCID:
        default: VPC ID
      VPCCIDR:
        default: VPC CIDR
      PrivateSubnet1Id:
        default: Private subnet 1 ID
      PublicSubnet1Id:
        default: Public subnet 1 ID
      RemoteAccessCidr:
        default: Allowed external access CIDR
      BastionSecurityGroupID:
        default: Bastion security group
      ClientInstanceTypeParameter:
        default: Overlay clients instance type
      KeyPairName:
        default: Key pair name
      VNS3InstanceTypeParameter:
        default: VNS3 instance type
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      AmazonLinuxAMI:
        default: Amazon Linux SSM Parameter
Parameters:
  VPCID:
    Description: ID of the VPC to deploy the VNS3 overlay network into.
    Type: AWS::EC2::VPC::Id
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/24
    Description: CIDR block for the VPC.
    Type: String
  PrivateSubnet1Id:
    Description: ID of private subnet 1 for the overlay clients.
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2Id:
    Description: ID of private subnet 2 for the overlay clients.
    Type: AWS::EC2::Subnet::Id
  PublicSubnet1Id:
    Description: ID of public subnet 1 for the VNS3 controller.
    Type: AWS::EC2::Subnet::Id
  RemoteAccessCidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the instances. We recommend that you set this value to a trusted IP range.
    Type: String
  BastionSecurityGroupID:
    Description: Security group of a bastion instance to allow SSH access to client instances.
    Type: AWS::EC2::SecurityGroup::Id
  ClientInstanceTypeParameter:
    Description: Enter t3.nano, t3.micro or t3.small. Default is t3.nano.
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - c5.large
      - c5.nlarge
  KeyPairName:
    Description: The name of an existing public/private key pair, which allows you to securely connect to your instance after it launches.
    Type: AWS::EC2::KeyPair::KeyName
  VNS3InstanceTypeParameter:
    Description: 'The EC2 instance type for the VNS3 instance. The EC2 instance type t3.small is adequate for general testing purposes. For performance testing, we suggest using a c5.large or c5n.large, if available in the region you are testing in. Enter t3.nano, t3.micro or t3.small. Default is t3.small'
    Type: String
    Default: 't3.small'
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - c5.large
      - c5.nlarge
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-ia
    Description: S3 bucket name for the Quick Start assets. This string can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-cohesive-vns3/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
    Type: String
  AmazonLinuxAMI:
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
    Description: SSM parameter for the latest Amazon Linux AMI. (Advanced Usage).
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
Conditions:
  GovCloudCondition: !Or
    - !Equals [!Ref 'AWS::Region', us-gov-east-1]
    - !Equals [!Ref 'AWS::Region', us-gov-west-1]
Mappings:
  VNS3:
    overlay:
      OVERLAY1: "100_127_255_193"
      OVERLAY2: "100_127_255_194"
      OVERLAY3: "100_127_255_195"
      OVERLAY4: "100_127_255_196"
      OVERLAY5: "100_127_255_197"
    autoscale:
      ASGCooldown: '10'
      CCDefault: '1'
      CCMaxValue: '1'
      CCMinValue: '1'
  AWSAMIRegionMap:
    ap-northeast-1:
      VNS3: ami-0e9e8b8847e24c4e3
    ap-northeast-2:
      VNS3: ami-08f715611802a5da6
    ap-south-1:
      VNS3: ami-04140ad6d376240ac
    ap-southeast-1:
      VNS3: ami-07655aee322a5d7ab
    ap-southeast-2:
      VNS3: ami-0588f36f2bd84cb56
    ca-central-1:
      VNS3: ami-0bf16449b0c4e8b6e
    eu-central-1:
      VNS3: ami-0630fe90e7396d121
    eu-north-1:
      VNS3: ami-f541c98b
    eu-west-1:
      VNS3: ami-0445e06070801e990
    eu-west-2:
      VNS3: ami-0f112e0afdbf6237a
    eu-west-3:
      VNS3: ami-05577f684b5edb088
    sa-east-1:
      VNS3: ami-0e6f87151140bfd9f
    us-east-1:
      VNS3: ami-045dbed65bb63b350
    us-east-2:
      VNS3: ami-0ed537ce287159f91
    us-west-1:
      VNS3: ami-0bfaded05af5bb474
    us-west-2:
      VNS3: ami-0f3300cdc58681e47
Resources:
  ElasticIPVNS3:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  CFVPCESecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-CFVPCE-sg
      GroupDescription: !Sub ${AWS::StackName}-CFVPCE-sg
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: !Ref VPCCIDR
          IpProtocol: '-1'
      VpcId: !Ref VPCID
  ClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      SecurityGroupIngress:
        - FromPort: 22
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
          ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-hosts
      VpcId: !Ref VPCID
  VNS3SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      SecurityGroupIngress:
        - FromPort: 1194
          IpProtocol: udp
          SourceSecurityGroupId: !Ref ClientSecurityGroup
          ToPort: 1194
        - FromPort: 8000
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ClientSecurityGroup
          ToPort: 8000
        - CidrIp: !Ref RemoteAccessCidr
          FromPort: 22
          IpProtocol: tcp
          ToPort: 66
        - CidrIp: !Ref RemoteAccessCidr
          FromPort: 8000
          IpProtocol: tcp
          ToPort: 8000
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VNS3
      VpcId: !Ref VPCID
  CFEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn:
      - CFVPCESecurityGroup
    Properties:
      VpcId: !Ref VPCID
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.cloudformation"
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1Id
        - !Ref PrivateSubnet2Id
      SecurityGroupIds:
        - !Ref CFVPCESecurityGroup
  VNS3RecoveryTestAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a recovery when instance status check fails for 2 consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 2
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
        - !Sub 'arn:aws:automate:${AWS::Region}:ec2:recover'
      Dimensions:
        - Name: InstanceId
          Value:
            Ref: VNS3
  VNS3:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [AWSAMIRegionMap, !Ref 'AWS::Region', VNS3]
      InstanceType: !Ref VNS3InstanceTypeParameter
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref VNS3SecurityGroup
      SourceDestCheck: False
      SubnetId: !Ref PublicSubnet1Id
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VNS3
  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref VNS3
      AllocationId: !GetAtt ElasticIPVNS3.AllocationId
  ClientRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ListS3Bucket
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !Sub "arn:aws:s3:::${QSS3BucketName}"
                Action:
                  - s3:ListBucket
        - PolicyName: ReadS3Objects
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !Sub "arn:aws:s3:::${QSS3BucketName}/*"
                Action:
                  - s3:GetObject
  ClientProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ClientRole
  Client1LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          buckets:
            - !Ref QSS3BucketName
          roleName: !Ref ClientRole
          type: S3
      AWS::CloudFormation::Init:
        configSets:
          default:
            - "config1"
            - "config2"
            - "config3"
        config1:
          packages:
            yum:
              openvpn: []
          services:
            sysvinit:
              openvpn:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/openvpn/vns3clientpack.conf"
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.VirtualMachine.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=VirtualMachine
                runas=root
            /home/ec2-user/mcast.py:
              authentication: S3AccessCreds
              group: ec2-user
              mode: '000755'
              owner: ec2-user
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/mcast.py
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/client-bootstrap-a.sh:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/client-bootstrap-a.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/client-bootstrap-b.sh:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/client-bootstrap-b.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/client-bootstrap-c.sh:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/client-bootstrap-c.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/cohesive-ra-1.1.1_x86_64.rpm:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/cohesive-ra-1.1.1_x86_64.rpm
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
          commands:
            a-bootstrap:
              command: /tmp/client-bootstrap-a.sh
              env:
                VNS3OVERLAYIP: !FindInMap [VNS3, overlay, OVERLAY1]
                VNS3IP: !GetAtt VNS3.PrivateIp
                VNS3PW: !Ref VNS3
        config2:
          commands:
            b-bootstrap:
              command: /tmp/client-bootstrap-b.sh
              env:
                VPC_CIDR: !Ref VPCCIDR
                VNS3IP: !GetAtt VNS3.PrivateIp
                VNS3PDNS: !GetAtt VNS3.PublicDnsName
        config3:
          commands:
            c-bootstrap:
              command: /tmp/client-bootstrap-c.sh
              env:
                VNS3OVERLAYIP: !FindInMap [VNS3, overlay, OVERLAY1]
    Properties:
      IamInstanceProfile: !Ref ClientProfile
      ImageId: !Ref AmazonLinuxAMI
      InstanceType: !Ref ClientInstanceTypeParameter
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref ClientSecurityGroup
  Client1ASGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: !FindInMap [VNS3, autoscale, CCDefault]
        Timeout: PT10M
    DependsOn:
      - VNS3
    Properties:
      LaunchConfigurationName: !Ref Client1LaunchConfig
      Cooldown: !FindInMap [VNS3, autoscale, ASGCooldown]
      MaxSize: !FindInMap [VNS3, autoscale, CCMaxValue]
      MinSize: !FindInMap [VNS3, autoscale, CCMinValue]
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1Id
      Tags:
        - PropagateAtLaunch: true
          Key: Name
          Value: !Sub ${AWS::StackName}-client1
  Client2LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          buckets:
            - !Ref QSS3BucketName
          roleName: !Ref ClientRole
          type: S3
      AWS::CloudFormation::Init:
        configSets:
          default:
            - "config1"
            - "config2"
            - "config3"
        config1:
          packages:
            yum:
              openvpn: []
          services:
            sysvinit:
              openvpn:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/openvpn/vns3clientpack.conf"
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.VirtualMachine.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=VirtualMachine
                runas=root
            /home/ec2-user/mcast.py:
              authentication: S3AccessCreds
              group: ec2-user
              mode: '000755'
              owner: ec2-user
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/mcast.py
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/client-bootstrap-a.sh:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/client-bootstrap-a.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/client-bootstrap-b.sh:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/client-bootstrap-b.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/client-bootstrap-c.sh:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/client-bootstrap-c.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/cohesive-ra-1.1.1_x86_64.rpm:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/cohesive-ra-1.1.1_x86_64.rpm
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
          commands:
            a-bootstrap:
              command: /tmp/client-bootstrap-a.sh
              env:
                VNS3OVERLAYIP: !FindInMap [VNS3, overlay, OVERLAY2]
                VNS3IP: !GetAtt VNS3.PrivateIp
                VNS3PW: !Ref VNS3
        config2:
          commands:
            b-bootstrap:
              command: /tmp/client-bootstrap-b.sh
              env:
                VPC_CIDR: !Ref VPCCIDR
                VNS3IP: !GetAtt VNS3.PrivateIp
                VNS3PDNS: !GetAtt VNS3.PublicDnsName
        config3:
          commands:
            c-bootstrap:
              command: /tmp/client-bootstrap-c.sh
              env:
                VNS3OVERLAYIP: !FindInMap [VNS3, overlay, OVERLAY2]
    Properties:
      IamInstanceProfile: !Ref ClientProfile
      ImageId: !Ref AmazonLinuxAMI
      InstanceType: !Ref ClientInstanceTypeParameter
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref ClientSecurityGroup
  Client2ASGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: !FindInMap [VNS3, autoscale, CCDefault]
        Timeout: PT10M
    DependsOn:
      - VNS3
    Properties:
      LaunchConfigurationName: !Ref Client2LaunchConfig
      Cooldown: !FindInMap [VNS3, autoscale, ASGCooldown]
      MaxSize: !FindInMap [VNS3, autoscale, CCMaxValue]
      MinSize: !FindInMap [VNS3, autoscale, CCMinValue]
      VPCZoneIdentifier:
        - !Ref PrivateSubnet2Id
      Tags:
        - PropagateAtLaunch: true
          Key: Name
          Value: !Sub ${AWS::StackName}-client2
  Client3LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          buckets:
            - !Ref QSS3BucketName
          roleName: !Ref ClientRole
          type: S3
      AWS::CloudFormation::Init:
        configSets:
          default:
            - "config1"
            - "config2"
            - "config3"
        config1:
          packages:
            yum:
              openvpn: []
          services:
            sysvinit:
              openvpn:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/openvpn/vns3clientpack.conf"
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.VirtualMachine.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=VirtualMachine
                runas=root
            /home/ec2-user/mcast.py:
              authentication: S3AccessCreds
              group: ec2-user
              mode: '000755'
              owner: ec2-user
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/mcast.py
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/client-bootstrap-a.sh:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/client-bootstrap-a.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/client-bootstrap-b.sh:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/client-bootstrap-b.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/client-bootstrap-c.sh:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/client-bootstrap-c.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/cohesive-ra-1.1.1_x86_64.rpm:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/cohesive-ra-1.1.1_x86_64.rpm
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
          commands:
            a-bootstrap:
              command: /tmp/client-bootstrap-a.sh
              env:
                VNS3OVERLAYIP: !FindInMap [VNS3, overlay, OVERLAY3]
                VNS3IP: !GetAtt VNS3.PrivateIp
                VNS3PW: !Ref VNS3
        config2:
          commands:
            b-bootstrap:
              command: /tmp/client-bootstrap-b.sh
              env:
                VPC_CIDR: !Ref VPCCIDR
                VNS3IP: !GetAtt VNS3.PrivateIp
                VNS3PDNS: !GetAtt VNS3.PublicDnsName
        config3:
          commands:
            c-bootstrap:
              command: /tmp/client-bootstrap-c.sh
              env:
                VNS3OVERLAYIP: !FindInMap [VNS3, overlay, OVERLAY3]
    Properties:
      IamInstanceProfile: !Ref ClientProfile
      ImageId: !Ref AmazonLinuxAMI
      InstanceType: !Ref ClientInstanceTypeParameter
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref ClientSecurityGroup
  Client3ASGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: !FindInMap [VNS3, autoscale, CCDefault]
        Timeout: PT10M
    DependsOn:
      - VNS3
    Properties:
      LaunchConfigurationName: !Ref Client3LaunchConfig
      Cooldown: !FindInMap [VNS3, autoscale, ASGCooldown]
      MaxSize: !FindInMap [VNS3, autoscale, CCMaxValue]
      MinSize: !FindInMap [VNS3, autoscale, CCMinValue]
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1Id
      Tags:
        - PropagateAtLaunch: true
          Key: Name
          Value: !Sub ${AWS::StackName}-client3
  Client4LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          buckets:
            - !Ref QSS3BucketName
          roleName: !Ref ClientRole
          type: S3
      AWS::CloudFormation::Init:
        configSets:
          default:
            - "config1"
            - "config2"
            - "config3"
        config1:
          packages:
            yum:
              openvpn: []
          services:
            sysvinit:
              openvpn:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/openvpn/vns3clientpack.conf"
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.VirtualMachine.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=VirtualMachine
                runas=root
            /home/ec2-user/mcast.py:
              authentication: S3AccessCreds
              group: ec2-user
              mode: '000755'
              owner: ec2-user
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/mcast.py
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/client-bootstrap-a.sh:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/client-bootstrap-a.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/client-bootstrap-b.sh:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/client-bootstrap-b.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/client-bootstrap-c.sh:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/client-bootstrap-c.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/cohesive-ra-1.1.1_x86_64.rpm:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/cohesive-ra-1.1.1_x86_64.rpm
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
          commands:
            a-bootstrap:
              command: /tmp/client-bootstrap-a.sh
              env:
                VNS3OVERLAYIP: !FindInMap [VNS3, overlay, OVERLAY4]
                VNS3IP: !GetAtt VNS3.PrivateIp
                VNS3PW: !Ref VNS3
        config2:
          commands:
            b-bootstrap:
              command: /tmp/client-bootstrap-b.sh
              env:
                VPC_CIDR: !Ref VPCCIDR
                VNS3IP: !GetAtt VNS3.PrivateIp
                VNS3PDNS: !GetAtt VNS3.PublicDnsName
        config3:
          commands:
            c-bootstrap:
              command: /tmp/client-bootstrap-c.sh
              env:
                VNS3OVERLAYIP: !FindInMap [VNS3, overlay, OVERLAY4]
    Properties:
      IamInstanceProfile: !Ref ClientProfile
      ImageId: !Ref AmazonLinuxAMI
      InstanceType: !Ref ClientInstanceTypeParameter
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref ClientSecurityGroup
  Client4ASGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: !FindInMap [VNS3, autoscale, CCDefault]
        Timeout: PT10M
    DependsOn:
      - VNS3
    Properties:
      LaunchConfigurationName: !Ref Client4LaunchConfig
      Cooldown: !FindInMap [VNS3, autoscale, ASGCooldown]
      MaxSize: !FindInMap [VNS3, autoscale, CCMaxValue]
      MinSize: !FindInMap [VNS3, autoscale, CCMinValue]
      VPCZoneIdentifier:
        - !Ref PrivateSubnet2Id
      Tags:
        - PropagateAtLaunch: true
          Key: Name
          Value: !Sub ${AWS::StackName}-client4
  Client5LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          buckets:
            - !Ref QSS3BucketName
          roleName: !Ref ClientRole
          type: S3
      AWS::CloudFormation::Init:
        configSets:
          default:
            - "config1"
            - "config2"
            - "config3"
        config1:
          packages:
            yum:
              openvpn: []
          services:
            sysvinit:
              openvpn:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/openvpn/vns3clientpack.conf"
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.VirtualMachine.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=VirtualMachine
                runas=root
            /home/ec2-user/mcast.py:
              authentication: S3AccessCreds
              group: ec2-user
              mode: '000755'
              owner: ec2-user
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/mcast.py
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/client-bootstrap-a.sh:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/client-bootstrap-a.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/client-bootstrap-b.sh:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/client-bootstrap-b.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/client-bootstrap-c.sh:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/client-bootstrap-c.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
            /tmp/cohesive-ra-1.1.1_x86_64.rpm:
              authentication: S3AccessCreds
              group: root
              mode: '000755'
              owner: root
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/cohesive-ra-1.1.1_x86_64.rpm
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
          commands:
            a-bootstrap:
              command: /tmp/client-bootstrap-a.sh
              env:
                VNS3OVERLAYIP: !FindInMap [VNS3, overlay, OVERLAY5]
                VNS3IP: !GetAtt VNS3.PrivateIp
                VNS3PW: !Ref VNS3
        config2:
          commands:
            b-bootstrap:
              command: /tmp/client-bootstrap-b.sh
              env:
                VPC_CIDR: !Ref VPCCIDR
                VNS3IP: !GetAtt VNS3.PrivateIp
                VNS3PDNS: !GetAtt VNS3.PublicDnsName
        config3:
          commands:
            c-bootstrap:
              command: /tmp/client-bootstrap-c.sh
              env:
                VNS3OVERLAYIP: !FindInMap [VNS3, overlay, OVERLAY5]
    Properties:
      IamInstanceProfile: !Ref ClientProfile
      ImageId: !Ref AmazonLinuxAMI
      InstanceType: !Ref ClientInstanceTypeParameter
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref ClientSecurityGroup
  Client5ASGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: !FindInMap [VNS3, autoscale, CCDefault]
        Timeout: PT10M
    DependsOn:
      - VNS3
    Properties:
      LaunchConfigurationName: !Ref Client5LaunchConfig
      Cooldown: !FindInMap [VNS3, autoscale, ASGCooldown]
      MaxSize: !FindInMap [VNS3, autoscale, CCMaxValue]
      MinSize: !FindInMap [VNS3, autoscale, CCMinValue]
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1Id
      Tags:
        - PropagateAtLaunch: true
          Key: Name
          Value: !Sub ${AWS::StackName}-client5
Outputs:
  VNS3PublicIp:
    Description: The Public IP of the VNS3 Network Controller
    Value: !Ref ElasticIPVNS3
  VNS3InstanceId:
    Description: The Instance ID and default password of the VNS3 Network Controller
    Value: !Ref VNS3
